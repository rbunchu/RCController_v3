
RCController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800200  0000131e  000013b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000131e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800262  00800262  00001414  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001414  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001444  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004c8  00000000  00000000  00001484  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007d44  00000000  00000000  0000194c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000021eb  00000000  00000000  00009690  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000029c2  00000000  00000000  0000b87b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000f28  00000000  00000000  0000e240  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002439  00000000  00000000  0000f168  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005486  00000000  00000000  000115a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000480  00000000  00000000  00016a27  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0d c1       	rjmp	.+538    	; 0x21c <__ctors_end>
       2:	00 00       	nop
       4:	d9 c4       	rjmp	.+2482   	; 0x9b8 <__vector_1>
       6:	00 00       	nop
       8:	02 c5       	rjmp	.+2564   	; 0xa0e <__vector_2>
       a:	00 00       	nop
       c:	2b c5       	rjmp	.+2646   	; 0xa64 <__vector_3>
       e:	00 00       	nop
      10:	54 c5       	rjmp	.+2728   	; 0xaba <__vector_4>
      12:	00 00       	nop
      14:	7d c5       	rjmp	.+2810   	; 0xb10 <__vector_5>
      16:	00 00       	nop
      18:	a6 c5       	rjmp	.+2892   	; 0xb66 <__vector_6>
      1a:	00 00       	nop
      1c:	cf c5       	rjmp	.+2974   	; 0xbbc <__vector_7>
      1e:	00 00       	nop
      20:	f8 c5       	rjmp	.+3056   	; 0xc12 <__vector_8>
      22:	00 00       	nop
      24:	1b c1       	rjmp	.+566    	; 0x25c <__bad_interrupt>
      26:	00 00       	nop
      28:	19 c1       	rjmp	.+562    	; 0x25c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	17 c1       	rjmp	.+558    	; 0x25c <__bad_interrupt>
      2e:	00 00       	nop
      30:	15 c1       	rjmp	.+554    	; 0x25c <__bad_interrupt>
      32:	00 00       	nop
      34:	13 c1       	rjmp	.+550    	; 0x25c <__bad_interrupt>
      36:	00 00       	nop
      38:	11 c1       	rjmp	.+546    	; 0x25c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	0f c1       	rjmp	.+542    	; 0x25c <__bad_interrupt>
      3e:	00 00       	nop
      40:	0d c1       	rjmp	.+538    	; 0x25c <__bad_interrupt>
      42:	00 00       	nop
      44:	0b c1       	rjmp	.+534    	; 0x25c <__bad_interrupt>
      46:	00 00       	nop
      48:	09 c1       	rjmp	.+530    	; 0x25c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	07 c1       	rjmp	.+526    	; 0x25c <__bad_interrupt>
      4e:	00 00       	nop
      50:	05 c1       	rjmp	.+522    	; 0x25c <__bad_interrupt>
      52:	00 00       	nop
      54:	03 c1       	rjmp	.+518    	; 0x25c <__bad_interrupt>
      56:	00 00       	nop
      58:	01 c1       	rjmp	.+514    	; 0x25c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	05 c6       	rjmp	.+3082   	; 0xc68 <__vector_23>
      5e:	00 00       	nop
      60:	fd c0       	rjmp	.+506    	; 0x25c <__bad_interrupt>
      62:	00 00       	nop
      64:	fb c0       	rjmp	.+502    	; 0x25c <__bad_interrupt>
      66:	00 00       	nop
      68:	f9 c0       	rjmp	.+498    	; 0x25c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	f7 c0       	rjmp	.+494    	; 0x25c <__bad_interrupt>
      6e:	00 00       	nop
      70:	f5 c0       	rjmp	.+490    	; 0x25c <__bad_interrupt>
      72:	00 00       	nop
      74:	f3 c0       	rjmp	.+486    	; 0x25c <__bad_interrupt>
      76:	00 00       	nop
      78:	f1 c0       	rjmp	.+482    	; 0x25c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ef c0       	rjmp	.+478    	; 0x25c <__bad_interrupt>
      7e:	00 00       	nop
      80:	ed c0       	rjmp	.+474    	; 0x25c <__bad_interrupt>
      82:	00 00       	nop
      84:	eb c0       	rjmp	.+470    	; 0x25c <__bad_interrupt>
      86:	00 00       	nop
      88:	e9 c0       	rjmp	.+466    	; 0x25c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e7 c0       	rjmp	.+462    	; 0x25c <__bad_interrupt>
      8e:	00 00       	nop
      90:	e5 c0       	rjmp	.+458    	; 0x25c <__bad_interrupt>
      92:	00 00       	nop
      94:	e3 c0       	rjmp	.+454    	; 0x25c <__bad_interrupt>
      96:	00 00       	nop
      98:	e1 c0       	rjmp	.+450    	; 0x25c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	df c0       	rjmp	.+446    	; 0x25c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	dd c0       	rjmp	.+442    	; 0x25c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	db c0       	rjmp	.+438    	; 0x25c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d9 c0       	rjmp	.+434    	; 0x25c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d7 c0       	rjmp	.+430    	; 0x25c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	d5 c0       	rjmp	.+426    	; 0x25c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	d3 c0       	rjmp	.+422    	; 0x25c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	d1 c0       	rjmp	.+418    	; 0x25c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	cf c0       	rjmp	.+414    	; 0x25c <__bad_interrupt>
      be:	00 00       	nop
      c0:	cd c0       	rjmp	.+410    	; 0x25c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	cb c0       	rjmp	.+406    	; 0x25c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	c9 c0       	rjmp	.+402    	; 0x25c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	c7 c0       	rjmp	.+398    	; 0x25c <__bad_interrupt>
      ce:	00 00       	nop
      d0:	c5 c0       	rjmp	.+394    	; 0x25c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	c3 c0       	rjmp	.+390    	; 0x25c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	c1 c0       	rjmp	.+386    	; 0x25c <__bad_interrupt>
      da:	00 00       	nop
      dc:	bf c0       	rjmp	.+382    	; 0x25c <__bad_interrupt>
      de:	00 00       	nop
      e0:	bd c0       	rjmp	.+378    	; 0x25c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b6 04       	cpc	r11, r6
      e6:	80 04       	cpc	r8, r0
      e8:	88 04       	cpc	r8, r8
      ea:	94 04       	cpc	r9, r4
      ec:	a1 04       	cpc	r10, r1
      ee:	c2 04       	cpc	r12, r2
      f0:	cf 04       	cpc	r12, r15
      f2:	88 07       	cpc	r24, r24
      f4:	8b 07       	cpc	r24, r27
      f6:	7a 07       	cpc	r23, r26
      f8:	7e 07       	cpc	r23, r30
      fa:	84 07       	cpc	r24, r20
      fc:	c2 07       	cpc	r28, r18
      fe:	8f 07       	cpc	r24, r31
     100:	93 07       	cpc	r25, r19
     102:	99 07       	cpc	r25, r25
     104:	9d 07       	cpc	r25, r29
     106:	a1 07       	cpc	r26, r17
     108:	a7 07       	cpc	r26, r23
     10a:	ab 07       	cpc	r26, r27
     10c:	af 07       	cpc	r26, r31
     10e:	c2 07       	cpc	r28, r18
     110:	b5 07       	cpc	r27, r21
     112:	b9 07       	cpc	r27, r25
     114:	bd 07       	cpc	r27, r29

00000116 <__trampolines_end>:
     116:	00 00       	nop
     118:	0a 0b       	sbc	r16, r26
     11a:	02 09       	sbc	r16, r2
     11c:	0c 0d       	add	r16, r12
     11e:	0e 08       	sbc	r0, r14
     120:	07 03       	mulsu	r16, r23
     122:	04 01       	movw	r0, r8
	...
     140:	00 00       	nop
     142:	12 11       	cpse	r17, r2
     144:	10 00       	.word	0x0010	; ????
	...

0000015c <digital_pin_to_bit_mask_PGM>:
     15c:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     16c:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     17c:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     18c:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     19c:	04 08 10 20 40 80                                   ... @.

000001a2 <digital_pin_to_port_PGM>:
     1a2:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1b2:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1c2:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1d2:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1e2:	0b 0b 0b 0b 0b 0b                                   ......

000001e8 <port_to_output_PGM>:
     1e8:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     1f8:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000202 <port_to_mode_PGM>:
     202:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     212:	01 01 00 00 04 01 07 01 0a 01                       ..........

0000021c <__ctors_end>:
     21c:	11 24       	eor	r1, r1
     21e:	1f be       	out	0x3f, r1	; 63
     220:	cf ef       	ldi	r28, 0xFF	; 255
     222:	d1 e2       	ldi	r29, 0x21	; 33
     224:	de bf       	out	0x3e, r29	; 62
     226:	cd bf       	out	0x3d, r28	; 61
     228:	00 e0       	ldi	r16, 0x00	; 0
     22a:	0c bf       	out	0x3c, r16	; 60

0000022c <__do_copy_data>:
     22c:	12 e0       	ldi	r17, 0x02	; 2
     22e:	a0 e0       	ldi	r26, 0x00	; 0
     230:	b2 e0       	ldi	r27, 0x02	; 2
     232:	ee e1       	ldi	r30, 0x1E	; 30
     234:	f3 e1       	ldi	r31, 0x13	; 19
     236:	00 e0       	ldi	r16, 0x00	; 0
     238:	0b bf       	out	0x3b, r16	; 59
     23a:	02 c0       	rjmp	.+4      	; 0x240 <__do_copy_data+0x14>
     23c:	07 90       	elpm	r0, Z+
     23e:	0d 92       	st	X+, r0
     240:	a2 36       	cpi	r26, 0x62	; 98
     242:	b1 07       	cpc	r27, r17
     244:	d9 f7       	brne	.-10     	; 0x23c <__do_copy_data+0x10>

00000246 <__do_clear_bss>:
     246:	22 e0       	ldi	r18, 0x02	; 2
     248:	a2 e6       	ldi	r26, 0x62	; 98
     24a:	b2 e0       	ldi	r27, 0x02	; 2
     24c:	01 c0       	rjmp	.+2      	; 0x250 <.do_clear_bss_start>

0000024e <.do_clear_bss_loop>:
     24e:	1d 92       	st	X+, r1

00000250 <.do_clear_bss_start>:
     250:	a5 37       	cpi	r26, 0x75	; 117
     252:	b2 07       	cpc	r27, r18
     254:	e1 f7       	brne	.-8      	; 0x24e <.do_clear_bss_loop>
     256:	f0 d2       	rcall	.+1504   	; 0x838 <main>
     258:	0c 94 8d 09 	jmp	0x131a	; 0x131a <_exit>

0000025c <__bad_interrupt>:
     25c:	d1 ce       	rjmp	.-606    	; 0x0 <__vectors>

0000025e <controller_interrupt_buttons>:
	lcd_clear(self->lcd);
	lcd_print(self->lcd, "WELCOME");
}

void controller_interrupt_buttons()
{
     25e:	0f 93       	push	r16
     260:	1f 93       	push	r17
     262:	cf 93       	push	r28
     264:	df 93       	push	r29
     266:	00 d0       	rcall	.+0      	; 0x268 <controller_interrupt_buttons+0xa>
     268:	1f 92       	push	r1
     26a:	1f 92       	push	r1
     26c:	cd b7       	in	r28, 0x3d	; 61
     26e:	de b7       	in	r29, 0x3e	; 62
	int value = analogRead(rc_controller.switches->data_pin);
     270:	0b e6       	ldi	r16, 0x6B	; 107
     272:	12 e0       	ldi	r17, 0x02	; 2
     274:	d8 01       	movw	r26, r16
     276:	ed 91       	ld	r30, X+
     278:	fc 91       	ld	r31, X
     27a:	80 81       	ld	r24, Z
     27c:	0a d6       	rcall	.+3092   	; 0xe92 <analogRead>
	analog_button button = tact_switch_button_pressed(rc_controller.switches, value);
     27e:	bc 01       	movw	r22, r24
     280:	f8 01       	movw	r30, r16
     282:	80 81       	ld	r24, Z
     284:	91 81       	ldd	r25, Z+1	; 0x01
     286:	8f d2       	rcall	.+1310   	; 0x7a6 <tact_switch_button_pressed>
}
     288:	0f 90       	pop	r0
     28a:	0f 90       	pop	r0
     28c:	0f 90       	pop	r0
     28e:	0f 90       	pop	r0
     290:	0f 90       	pop	r0
     292:	df 91       	pop	r29
     294:	cf 91       	pop	r28
     296:	1f 91       	pop	r17
     298:	0f 91       	pop	r16
     29a:	08 95       	ret

0000029c <controller_initialize>:
#include "controller.h"

void controller_initialize(controller *self)
{   
     29c:	ef 92       	push	r14
     29e:	0f 93       	push	r16
     2a0:	cf 93       	push	r28
     2a2:	df 93       	push	r29
     2a4:	ec 01       	movw	r28, r24
    self->switches = malloc(sizeof(tact_switch_board));
     2a6:	86 e1       	ldi	r24, 0x16	; 22
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	16 d7       	rcall	.+3628   	; 0x10d8 <malloc>
     2ac:	99 83       	std	Y+1, r25	; 0x01
     2ae:	88 83       	st	Y, r24
    self->switches->data_pin = 1;
     2b0:	21 e0       	ldi	r18, 0x01	; 1
     2b2:	fc 01       	movw	r30, r24
     2b4:	20 83       	st	Z, r18
    self->switches->interrupt_pin = 2;
     2b6:	22 e0       	ldi	r18, 0x02	; 2
	tact_switch_board_init(self->switches);
     2b8:	21 83       	std	Z+1, r18	; 0x01
  
    self->leds = malloc(sizeof(led_shift_register));
     2ba:	4d d2       	rcall	.+1178   	; 0x756 <tact_switch_board_init>
     2bc:	8a e0       	ldi	r24, 0x0A	; 10
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	0b d7       	rcall	.+3606   	; 0x10d8 <malloc>
     2c2:	9b 83       	std	Y+3, r25	; 0x03
    self->leds->data_pin = 53;
     2c4:	8a 83       	std	Y+2, r24	; 0x02
     2c6:	25 e3       	ldi	r18, 0x35	; 53
     2c8:	30 e0       	ldi	r19, 0x00	; 0
     2ca:	fc 01       	movw	r30, r24
     2cc:	31 83       	std	Z+1, r19	; 0x01
    self->leds->clock_pin = 49;
     2ce:	20 83       	st	Z, r18
     2d0:	21 e3       	ldi	r18, 0x31	; 49
     2d2:	30 e0       	ldi	r19, 0x00	; 0
     2d4:	33 83       	std	Z+3, r19	; 0x03
    self->leds->latch_pin = 51;
     2d6:	22 83       	std	Z+2, r18	; 0x02
     2d8:	23 e3       	ldi	r18, 0x33	; 51
     2da:	30 e0       	ldi	r19, 0x00	; 0
     2dc:	35 83       	std	Z+5, r19	; 0x05
	self->leds->output_enable = 47;
     2de:	24 83       	std	Z+4, r18	; 0x04
     2e0:	2f e2       	ldi	r18, 0x2F	; 47
     2e2:	30 e0       	ldi	r19, 0x00	; 0

	led_shift_register_init(self->leds);
     2e4:	31 87       	std	Z+9, r19	; 0x09

	pinMode(self->switches->interrupt_pin, OUTPUT);
     2e6:	20 87       	std	Z+8, r18	; 0x08
     2e8:	6a d0       	rcall	.+212    	; 0x3be <led_shift_register_init>
     2ea:	e8 81       	ld	r30, Y
     2ec:	f9 81       	ldd	r31, Y+1	; 0x01
     2ee:	61 e0       	ldi	r22, 0x01	; 1
	attachInterrupt(self->switches->interrupt_pin, controller_interrupt_buttons, RISING);
     2f0:	81 81       	ldd	r24, Z+1	; 0x01
     2f2:	49 d6       	rcall	.+3218   	; 0xf86 <pinMode>
     2f4:	e8 81       	ld	r30, Y
     2f6:	f9 81       	ldd	r31, Y+1	; 0x01
     2f8:	43 e0       	ldi	r20, 0x03	; 3
     2fa:	50 e0       	ldi	r21, 0x00	; 0
     2fc:	6f e2       	ldi	r22, 0x2F	; 47
     2fe:	71 e0       	ldi	r23, 0x01	; 1
  
	self->lcd = lcd_get(8, 9, 4, 5, 6, 7);
     300:	81 81       	ldd	r24, Z+1	; 0x01
     302:	e7 d2       	rcall	.+1486   	; 0x8d2 <attachInterrupt>
     304:	87 e0       	ldi	r24, 0x07	; 7
     306:	e8 2e       	mov	r14, r24
     308:	06 e0       	ldi	r16, 0x06	; 6
     30a:	25 e0       	ldi	r18, 0x05	; 5
     30c:	44 e0       	ldi	r20, 0x04	; 4
     30e:	69 e0       	ldi	r22, 0x09	; 9
	lcd_begin(self->lcd, 16, 2);
     310:	88 e0       	ldi	r24, 0x08	; 8
     312:	f5 d1       	rcall	.+1002   	; 0x6fe <lcd_get>
     314:	9d 83       	std	Y+5, r25	; 0x05
	lcd_set_cursor(self->lcd, 0, 0);
     316:	8c 83       	std	Y+4, r24	; 0x04
     318:	42 e0       	ldi	r20, 0x02	; 2
     31a:	60 e1       	ldi	r22, 0x10	; 16
     31c:	13 d2       	rcall	.+1062   	; 0x744 <lcd_begin>
	lcd_print(self->lcd, "RC Controller");
     31e:	40 e0       	ldi	r20, 0x00	; 0
     320:	60 e0       	ldi	r22, 0x00	; 0
     322:	8c 81       	ldd	r24, Y+4	; 0x04
     324:	9d 81       	ldd	r25, Y+5	; 0x05
	lcd_set_cursor(self->lcd, 0, 1);
     326:	11 d2       	rcall	.+1058   	; 0x74a <lcd_set_cursor>
     328:	6b e2       	ldi	r22, 0x2B	; 43
     32a:	72 e0       	ldi	r23, 0x02	; 2
     32c:	8c 81       	ldd	r24, Y+4	; 0x04
     32e:	9d 81       	ldd	r25, Y+5	; 0x05
	lcd_print(self->lcd, "ver. 1.0");
     330:	0d d2       	rcall	.+1050   	; 0x74c <lcd_print>
     332:	41 e0       	ldi	r20, 0x01	; 1
     334:	60 e0       	ldi	r22, 0x00	; 0
     336:	8c 81       	ldd	r24, Y+4	; 0x04
    delay(2000);
     338:	9d 81       	ldd	r25, Y+5	; 0x05
     33a:	07 d2       	rcall	.+1038   	; 0x74a <lcd_set_cursor>
     33c:	69 e3       	ldi	r22, 0x39	; 57
     33e:	72 e0       	ldi	r23, 0x02	; 2
	lcd_clear(self->lcd);
     340:	8c 81       	ldd	r24, Y+4	; 0x04
     342:	9d 81       	ldd	r25, Y+5	; 0x05
     344:	03 d2       	rcall	.+1030   	; 0x74c <lcd_print>
	lcd_set_cursor(self->lcd, 0, 0);
     346:	60 ed       	ldi	r22, 0xD0	; 208
     348:	77 e0       	ldi	r23, 0x07	; 7
     34a:	80 e0       	ldi	r24, 0x00	; 0
     34c:	90 e0       	ldi	r25, 0x00	; 0
	led_shift_register_reset(self->leds);
     34e:	fb d4       	rcall	.+2550   	; 0xd46 <delay>
     350:	8c 81       	ldd	r24, Y+4	; 0x04
	digitalWrite(self->leds->output_enable, LOW);
     352:	9d 81       	ldd	r25, Y+5	; 0x05
     354:	f9 d1       	rcall	.+1010   	; 0x748 <lcd_clear>
     356:	40 e0       	ldi	r20, 0x00	; 0
     358:	60 e0       	ldi	r22, 0x00	; 0
     35a:	8c 81       	ldd	r24, Y+4	; 0x04
     35c:	9d 81       	ldd	r25, Y+5	; 0x05
	lcd_print(self->lcd, "Testing LEDs...");
     35e:	f5 d1       	rcall	.+1002   	; 0x74a <lcd_set_cursor>
     360:	8a 81       	ldd	r24, Y+2	; 0x02
     362:	9b 81       	ldd	r25, Y+3	; 0x03
     364:	49 d0       	rcall	.+146    	; 0x3f8 <led_shift_register_reset>
     366:	ea 81       	ldd	r30, Y+2	; 0x02
    //Testing controller info leds
    led_shift_register_test(self->leds);
     368:	fb 81       	ldd	r31, Y+3	; 0x03
     36a:	60 e0       	ldi	r22, 0x00	; 0
     36c:	80 85       	ldd	r24, Z+8	; 0x08
     36e:	47 d6       	rcall	.+3214   	; 0xffe <digitalWrite>
	lcd_clear(self->lcd);
     370:	62 e4       	ldi	r22, 0x42	; 66
     372:	72 e0       	ldi	r23, 0x02	; 2
     374:	8c 81       	ldd	r24, Y+4	; 0x04
     376:	9d 81       	ldd	r25, Y+5	; 0x05
	lcd_print(self->lcd, "WELCOME");
     378:	e9 d1       	rcall	.+978    	; 0x74c <lcd_print>
     37a:	8a 81       	ldd	r24, Y+2	; 0x02
     37c:	9b 81       	ldd	r25, Y+3	; 0x03
     37e:	42 d0       	rcall	.+132    	; 0x404 <led_shift_register_test>
}
     380:	8c 81       	ldd	r24, Y+4	; 0x04
     382:	9d 81       	ldd	r25, Y+5	; 0x05
     384:	e1 d1       	rcall	.+962    	; 0x748 <lcd_clear>
     386:	62 e5       	ldi	r22, 0x52	; 82
	digitalWrite(self->leds->output_enable, LOW);
	lcd_print(self->lcd, "Testing LEDs...");
    //Testing controller info leds
    led_shift_register_test(self->leds);
	lcd_clear(self->lcd);
	lcd_print(self->lcd, "WELCOME");
     388:	72 e0       	ldi	r23, 0x02	; 2
     38a:	8c 81       	ldd	r24, Y+4	; 0x04
     38c:	9d 81       	ldd	r25, Y+5	; 0x05
     38e:	df 91       	pop	r29
     390:	cf 91       	pop	r28
     392:	0f 91       	pop	r16
     394:	ef 90       	pop	r14
     396:	da c1       	rjmp	.+948    	; 0x74c <lcd_print>

00000398 <led_shift_register_write>:
  shift_register->led_state = shift_register->led_state & (!(short)led);
  led_shift_register_write(shift_register, shift_register->led_state);
}

void led_shift_register_write(led_shift_register *shift_register, short value)
{
     398:	1f 93       	push	r17
     39a:	cf 93       	push	r28
     39c:	df 93       	push	r29
     39e:	ec 01       	movw	r28, r24
     3a0:	16 2f       	mov	r17, r22
    digitalWrite(shift_register->latch_pin, LOW);
     3a2:	60 e0       	ldi	r22, 0x00	; 0
     3a4:	8c 81       	ldd	r24, Y+4	; 0x04
     3a6:	2b d6       	rcall	.+3158   	; 0xffe <digitalWrite>
    shiftOut(shift_register->data_pin, shift_register->clock_pin, MSBFIRST, value);
     3a8:	21 2f       	mov	r18, r17
     3aa:	41 e0       	ldi	r20, 0x01	; 1
     3ac:	6a 81       	ldd	r22, Y+2	; 0x02
     3ae:	88 81       	ld	r24, Y
     3b0:	54 d6       	rcall	.+3240   	; 0x105a <shiftOut>
    digitalWrite(shift_register->latch_pin, HIGH);
     3b2:	61 e0       	ldi	r22, 0x01	; 1
     3b4:	8c 81       	ldd	r24, Y+4	; 0x04
     3b6:	df 91       	pop	r29
     3b8:	cf 91       	pop	r28

void led_shift_register_write(led_shift_register *shift_register, short value)
{
    digitalWrite(shift_register->latch_pin, LOW);
    shiftOut(shift_register->data_pin, shift_register->clock_pin, MSBFIRST, value);
    digitalWrite(shift_register->latch_pin, HIGH);
     3ba:	1f 91       	pop	r17
     3bc:	20 c6       	rjmp	.+3136   	; 0xffe <digitalWrite>

000003be <led_shift_register_init>:

static void led_shift_register_write(led_shift_register *, short);


void led_shift_register_init(led_shift_register * shift_register)
{
     3be:	cf 93       	push	r28
     3c0:	df 93       	push	r29
     3c2:	ec 01       	movw	r28, r24
	pinMode(shift_register->output_enable, OUTPUT);
     3c4:	61 e0       	ldi	r22, 0x01	; 1
     3c6:	88 85       	ldd	r24, Y+8	; 0x08
     3c8:	de d5       	rcall	.+3004   	; 0xf86 <pinMode>
	digitalWrite(shift_register->output_enable, HIGH);
     3ca:	61 e0       	ldi	r22, 0x01	; 1
     3cc:	88 85       	ldd	r24, Y+8	; 0x08

	pinMode(shift_register->clock_pin, OUTPUT);
     3ce:	17 d6       	rcall	.+3118   	; 0xffe <digitalWrite>
     3d0:	61 e0       	ldi	r22, 0x01	; 1
	pinMode(shift_register->data_pin, OUTPUT);
     3d2:	8a 81       	ldd	r24, Y+2	; 0x02
     3d4:	d8 d5       	rcall	.+2992   	; 0xf86 <pinMode>
     3d6:	61 e0       	ldi	r22, 0x01	; 1
	pinMode(shift_register->latch_pin, OUTPUT);
     3d8:	88 81       	ld	r24, Y
     3da:	d5 d5       	rcall	.+2986   	; 0xf86 <pinMode>

	digitalWrite(shift_register->clock_pin, LOW);
     3dc:	61 e0       	ldi	r22, 0x01	; 1
     3de:	8c 81       	ldd	r24, Y+4	; 0x04
     3e0:	d2 d5       	rcall	.+2980   	; 0xf86 <pinMode>
	digitalWrite(shift_register->data_pin, LOW);
     3e2:	60 e0       	ldi	r22, 0x00	; 0
     3e4:	8a 81       	ldd	r24, Y+2	; 0x02
     3e6:	0b d6       	rcall	.+3094   	; 0xffe <digitalWrite>
	digitalWrite(shift_register->latch_pin, LOW);
     3e8:	60 e0       	ldi	r22, 0x00	; 0
     3ea:	88 81       	ld	r24, Y
}
     3ec:	08 d6       	rcall	.+3088   	; 0xffe <digitalWrite>
     3ee:	60 e0       	ldi	r22, 0x00	; 0
	pinMode(shift_register->data_pin, OUTPUT);
	pinMode(shift_register->latch_pin, OUTPUT);

	digitalWrite(shift_register->clock_pin, LOW);
	digitalWrite(shift_register->data_pin, LOW);
	digitalWrite(shift_register->latch_pin, LOW);
     3f0:	8c 81       	ldd	r24, Y+4	; 0x04
     3f2:	df 91       	pop	r29
     3f4:	cf 91       	pop	r28
     3f6:	03 c6       	rjmp	.+3078   	; 0xffe <digitalWrite>

000003f8 <led_shift_register_reset>:
    led_shift_register_reset(shift_register);
}

void led_shift_register_reset(led_shift_register *shift_register)
{
    shift_register->led_state = 0;
     3f8:	fc 01       	movw	r30, r24
     3fa:	17 82       	std	Z+7, r1	; 0x07
     3fc:	16 82       	std	Z+6, r1	; 0x06
    led_shift_register_write(shift_register, shift_register->led_state);
     3fe:	60 e0       	ldi	r22, 0x00	; 0
     400:	70 e0       	ldi	r23, 0x00	; 0
     402:	ca cf       	rjmp	.-108    	; 0x398 <led_shift_register_write>

00000404 <led_shift_register_test>:
	digitalWrite(shift_register->data_pin, LOW);
	digitalWrite(shift_register->latch_pin, LOW);
}

void led_shift_register_test(led_shift_register *shift_register)
{
     404:	cf 93       	push	r28
     406:	df 93       	push	r29
     408:	ec 01       	movw	r28, r24
	shift_register->led_state = 1;
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	90 e0       	ldi	r25, 0x00	; 0
    for(shift_register->led_state; shift_register->led_state <= 128; shift_register->led_state = shift_register->led_state * 2)
     40e:	9f 83       	std	Y+7, r25	; 0x07
     410:	8e 83       	std	Y+6, r24	; 0x06
     412:	6e 81       	ldd	r22, Y+6	; 0x06
     414:	7f 81       	ldd	r23, Y+7	; 0x07
    {
      led_shift_register_write(shift_register, shift_register->led_state);
     416:	ce 01       	movw	r24, r28
}

void led_shift_register_test(led_shift_register *shift_register)
{
	shift_register->led_state = 1;
    for(shift_register->led_state; shift_register->led_state <= 128; shift_register->led_state = shift_register->led_state * 2)
     418:	61 38       	cpi	r22, 0x81	; 129
     41a:	71 05       	cpc	r23, r1
    {
      led_shift_register_write(shift_register, shift_register->led_state);
     41c:	5c f4       	brge	.+22     	; 0x434 <led_shift_register_test+0x30>
	  delay(200);
     41e:	bc df       	rcall	.-136    	; 0x398 <led_shift_register_write>
     420:	68 ec       	ldi	r22, 0xC8	; 200
     422:	70 e0       	ldi	r23, 0x00	; 0
     424:	80 e0       	ldi	r24, 0x00	; 0
     426:	90 e0       	ldi	r25, 0x00	; 0
}

void led_shift_register_test(led_shift_register *shift_register)
{
	shift_register->led_state = 1;
    for(shift_register->led_state; shift_register->led_state <= 128; shift_register->led_state = shift_register->led_state * 2)
     428:	8e d4       	rcall	.+2332   	; 0xd46 <delay>
     42a:	8e 81       	ldd	r24, Y+6	; 0x06
     42c:	9f 81       	ldd	r25, Y+7	; 0x07
     42e:	88 0f       	add	r24, r24
      led_shift_register_write(shift_register, shift_register->led_state);
	  delay(200);
    }
    
    led_shift_register_reset(shift_register);
}
     430:	99 1f       	adc	r25, r25
    {
      led_shift_register_write(shift_register, shift_register->led_state);
	  delay(200);
    }
    
    led_shift_register_reset(shift_register);
     432:	ed cf       	rjmp	.-38     	; 0x40e <led_shift_register_test+0xa>
     434:	df 91       	pop	r29
     436:	cf 91       	pop	r28
     438:	df cf       	rjmp	.-66     	; 0x3f8 <led_shift_register_reset>

0000043a <_ZN13LiquidCrystal11pulseEnableEv>:
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
}
     43a:	cf 93       	push	r28
     43c:	df 93       	push	r29
     43e:	ec 01       	movw	r28, r24
     440:	60 e0       	ldi	r22, 0x00	; 0
     442:	8e 81       	ldd	r24, Y+6	; 0x06
     444:	dc d5       	rcall	.+3000   	; 0xffe <digitalWrite>
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	b6 d4       	rcall	.+2412   	; 0xdb8 <delayMicroseconds>
     44c:	61 e0       	ldi	r22, 0x01	; 1
     44e:	8e 81       	ldd	r24, Y+6	; 0x06
     450:	d6 d5       	rcall	.+2988   	; 0xffe <digitalWrite>
     452:	81 e0       	ldi	r24, 0x01	; 1
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	b0 d4       	rcall	.+2400   	; 0xdb8 <delayMicroseconds>
     458:	60 e0       	ldi	r22, 0x00	; 0
     45a:	8e 81       	ldd	r24, Y+6	; 0x06
     45c:	d0 d5       	rcall	.+2976   	; 0xffe <digitalWrite>
     45e:	84 e6       	ldi	r24, 0x64	; 100
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	df 91       	pop	r29
     464:	cf 91       	pop	r28
     466:	a8 c4       	rjmp	.+2384   	; 0xdb8 <delayMicroseconds>

00000468 <_ZN13LiquidCrystal10write4bitsEh>:
     468:	cf 92       	push	r12
     46a:	df 92       	push	r13
     46c:	ef 92       	push	r14
     46e:	ff 92       	push	r15
     470:	0f 93       	push	r16
     472:	1f 93       	push	r17
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
     478:	6c 01       	movw	r12, r24
     47a:	7c 01       	movw	r14, r24
     47c:	87 e0       	ldi	r24, 0x07	; 7
     47e:	e8 0e       	add	r14, r24
     480:	f1 1c       	adc	r15, r1
     482:	c0 e0       	ldi	r28, 0x00	; 0
     484:	d0 e0       	ldi	r29, 0x00	; 0
     486:	06 2f       	mov	r16, r22
     488:	10 e0       	ldi	r17, 0x00	; 0
     48a:	b8 01       	movw	r22, r16
     48c:	0c 2e       	mov	r0, r28
     48e:	02 c0       	rjmp	.+4      	; 0x494 <_ZN13LiquidCrystal10write4bitsEh+0x2c>
     490:	75 95       	asr	r23
     492:	67 95       	ror	r22
     494:	0a 94       	dec	r0
     496:	e2 f7       	brpl	.-8      	; 0x490 <_ZN13LiquidCrystal10write4bitsEh+0x28>
     498:	61 70       	andi	r22, 0x01	; 1
     49a:	f7 01       	movw	r30, r14
     49c:	81 91       	ld	r24, Z+
     49e:	7f 01       	movw	r14, r30
     4a0:	ae d5       	rcall	.+2908   	; 0xffe <digitalWrite>
     4a2:	21 96       	adiw	r28, 0x01	; 1
     4a4:	c4 30       	cpi	r28, 0x04	; 4
     4a6:	d1 05       	cpc	r29, r1
     4a8:	81 f7       	brne	.-32     	; 0x48a <_ZN13LiquidCrystal10write4bitsEh+0x22>
     4aa:	c6 01       	movw	r24, r12
     4ac:	df 91       	pop	r29
     4ae:	cf 91       	pop	r28
     4b0:	1f 91       	pop	r17
     4b2:	0f 91       	pop	r16
     4b4:	ff 90       	pop	r15
     4b6:	ef 90       	pop	r14
     4b8:	df 90       	pop	r13
     4ba:	cf 90       	pop	r12
     4bc:	be cf       	rjmp	.-132    	; 0x43a <_ZN13LiquidCrystal11pulseEnableEv>

000004be <_ZN13LiquidCrystal10write8bitsEh>:
     4be:	cf 92       	push	r12
     4c0:	df 92       	push	r13
     4c2:	ef 92       	push	r14
     4c4:	ff 92       	push	r15
     4c6:	0f 93       	push	r16
     4c8:	1f 93       	push	r17
     4ca:	cf 93       	push	r28
     4cc:	df 93       	push	r29
     4ce:	6c 01       	movw	r12, r24
     4d0:	7c 01       	movw	r14, r24
     4d2:	87 e0       	ldi	r24, 0x07	; 7
     4d4:	e8 0e       	add	r14, r24
     4d6:	f1 1c       	adc	r15, r1
     4d8:	c0 e0       	ldi	r28, 0x00	; 0
     4da:	d0 e0       	ldi	r29, 0x00	; 0
     4dc:	06 2f       	mov	r16, r22
     4de:	10 e0       	ldi	r17, 0x00	; 0
     4e0:	b8 01       	movw	r22, r16
     4e2:	0c 2e       	mov	r0, r28
     4e4:	02 c0       	rjmp	.+4      	; 0x4ea <_ZN13LiquidCrystal10write8bitsEh+0x2c>
     4e6:	75 95       	asr	r23
     4e8:	67 95       	ror	r22
     4ea:	0a 94       	dec	r0
     4ec:	e2 f7       	brpl	.-8      	; 0x4e6 <_ZN13LiquidCrystal10write8bitsEh+0x28>
     4ee:	61 70       	andi	r22, 0x01	; 1
     4f0:	f7 01       	movw	r30, r14
     4f2:	81 91       	ld	r24, Z+
     4f4:	7f 01       	movw	r14, r30
     4f6:	83 d5       	rcall	.+2822   	; 0xffe <digitalWrite>
     4f8:	21 96       	adiw	r28, 0x01	; 1
     4fa:	c8 30       	cpi	r28, 0x08	; 8
     4fc:	d1 05       	cpc	r29, r1
     4fe:	81 f7       	brne	.-32     	; 0x4e0 <_ZN13LiquidCrystal10write8bitsEh+0x22>
     500:	c6 01       	movw	r24, r12
     502:	df 91       	pop	r29
     504:	cf 91       	pop	r28
     506:	1f 91       	pop	r17
     508:	0f 91       	pop	r16
     50a:	ff 90       	pop	r15
     50c:	ef 90       	pop	r14
     50e:	df 90       	pop	r13
     510:	cf 90       	pop	r12
     512:	93 cf       	rjmp	.-218    	; 0x43a <_ZN13LiquidCrystal11pulseEnableEv>

00000514 <_ZN13LiquidCrystal4sendEhh>:
     514:	1f 93       	push	r17
     516:	cf 93       	push	r28
     518:	df 93       	push	r29
     51a:	ec 01       	movw	r28, r24
     51c:	16 2f       	mov	r17, r22
     51e:	64 2f       	mov	r22, r20
     520:	8c 81       	ldd	r24, Y+4	; 0x04
     522:	6d d5       	rcall	.+2778   	; 0xffe <digitalWrite>
     524:	8d 81       	ldd	r24, Y+5	; 0x05
     526:	8f 3f       	cpi	r24, 0xFF	; 255
     528:	11 f0       	breq	.+4      	; 0x52e <_ZN13LiquidCrystal4sendEhh+0x1a>
     52a:	60 e0       	ldi	r22, 0x00	; 0
     52c:	68 d5       	rcall	.+2768   	; 0xffe <digitalWrite>
     52e:	8f 85       	ldd	r24, Y+15	; 0x0f
     530:	61 2f       	mov	r22, r17
     532:	84 ff       	sbrs	r24, 4
     534:	05 c0       	rjmp	.+10     	; 0x540 <_ZN13LiquidCrystal4sendEhh+0x2c>
     536:	ce 01       	movw	r24, r28
     538:	df 91       	pop	r29
     53a:	cf 91       	pop	r28
     53c:	1f 91       	pop	r17
     53e:	bf cf       	rjmp	.-130    	; 0x4be <_ZN13LiquidCrystal10write8bitsEh>
     540:	70 e0       	ldi	r23, 0x00	; 0
     542:	84 e0       	ldi	r24, 0x04	; 4
     544:	75 95       	asr	r23
     546:	67 95       	ror	r22
     548:	8a 95       	dec	r24
     54a:	e1 f7       	brne	.-8      	; 0x544 <_ZN13LiquidCrystal4sendEhh+0x30>
     54c:	ce 01       	movw	r24, r28
     54e:	8c df       	rcall	.-232    	; 0x468 <_ZN13LiquidCrystal10write4bitsEh>
     550:	61 2f       	mov	r22, r17
     552:	ce 01       	movw	r24, r28
     554:	df 91       	pop	r29
     556:	cf 91       	pop	r28
     558:	1f 91       	pop	r17
     55a:	86 cf       	rjmp	.-244    	; 0x468 <_ZN13LiquidCrystal10write4bitsEh>

0000055c <_ZN13LiquidCrystal7commandEh>:
     55c:	40 e0       	ldi	r20, 0x00	; 0
     55e:	da cf       	rjmp	.-76     	; 0x514 <_ZN13LiquidCrystal4sendEhh>

00000560 <_ZN13LiquidCrystal5clearEv>:
     560:	61 e0       	ldi	r22, 0x01	; 1
     562:	fc df       	rcall	.-8      	; 0x55c <_ZN13LiquidCrystal7commandEh>
     564:	80 ed       	ldi	r24, 0xD0	; 208
     566:	97 e0       	ldi	r25, 0x07	; 7
     568:	27 c4       	rjmp	.+2126   	; 0xdb8 <delayMicroseconds>

0000056a <_ZN13LiquidCrystal9setCursorEhh>:
     56a:	fc 01       	movw	r30, r24
     56c:	44 30       	cpi	r20, 0x04	; 4
     56e:	08 f0       	brcs	.+2      	; 0x572 <_ZN13LiquidCrystal9setCursorEhh+0x8>
     570:	43 e0       	ldi	r20, 0x03	; 3
     572:	83 89       	ldd	r24, Z+19	; 0x13
     574:	48 17       	cp	r20, r24
     576:	10 f0       	brcs	.+4      	; 0x57c <_ZN13LiquidCrystal9setCursorEhh+0x12>
     578:	4f ef       	ldi	r20, 0xFF	; 255
     57a:	48 0f       	add	r20, r24
     57c:	df 01       	movw	r26, r30
     57e:	a4 0f       	add	r26, r20
     580:	b1 1d       	adc	r27, r1
     582:	54 96       	adiw	r26, 0x14	; 20
     584:	9c 91       	ld	r25, X
     586:	69 0f       	add	r22, r25
     588:	60 68       	ori	r22, 0x80	; 128
     58a:	cf 01       	movw	r24, r30
     58c:	e7 cf       	rjmp	.-50     	; 0x55c <_ZN13LiquidCrystal7commandEh>

0000058e <_ZN13LiquidCrystal7displayEv>:
     58e:	fc 01       	movw	r30, r24
     590:	60 89       	ldd	r22, Z+16	; 0x10
     592:	26 2f       	mov	r18, r22
     594:	24 60       	ori	r18, 0x04	; 4
     596:	20 8b       	std	Z+16, r18	; 0x10
     598:	6c 60       	ori	r22, 0x0C	; 12
     59a:	e0 cf       	rjmp	.-64     	; 0x55c <_ZN13LiquidCrystal7commandEh>

0000059c <_ZN13LiquidCrystal5beginEhhh>:
     59c:	ef 92       	push	r14
     59e:	ff 92       	push	r15
     5a0:	0f 93       	push	r16
     5a2:	1f 93       	push	r17
     5a4:	cf 93       	push	r28
     5a6:	df 93       	push	r29
     5a8:	ec 01       	movw	r28, r24
     5aa:	42 30       	cpi	r20, 0x02	; 2
     5ac:	18 f0       	brcs	.+6      	; 0x5b4 <_ZN13LiquidCrystal5beginEhhh+0x18>
     5ae:	8f 85       	ldd	r24, Y+15	; 0x0f
     5b0:	88 60       	ori	r24, 0x08	; 8
     5b2:	8f 87       	std	Y+15, r24	; 0x0f
     5b4:	4b 8b       	std	Y+19, r20	; 0x13
     5b6:	1c 8a       	std	Y+20, r1	; 0x14
     5b8:	80 e4       	ldi	r24, 0x40	; 64
     5ba:	8d 8b       	std	Y+21, r24	; 0x15
     5bc:	6e 8b       	std	Y+22, r22	; 0x16
     5be:	70 e0       	ldi	r23, 0x00	; 0
     5c0:	60 5c       	subi	r22, 0xC0	; 192
     5c2:	7f 4f       	sbci	r23, 0xFF	; 255
     5c4:	6f 8b       	std	Y+23, r22	; 0x17
     5c6:	22 23       	and	r18, r18
     5c8:	29 f0       	breq	.+10     	; 0x5d4 <_ZN13LiquidCrystal5beginEhhh+0x38>
     5ca:	41 30       	cpi	r20, 0x01	; 1
     5cc:	19 f4       	brne	.+6      	; 0x5d4 <_ZN13LiquidCrystal5beginEhhh+0x38>
     5ce:	8f 85       	ldd	r24, Y+15	; 0x0f
     5d0:	84 60       	ori	r24, 0x04	; 4
     5d2:	8f 87       	std	Y+15, r24	; 0x0f
     5d4:	61 e0       	ldi	r22, 0x01	; 1
     5d6:	8c 81       	ldd	r24, Y+4	; 0x04
     5d8:	d6 d4       	rcall	.+2476   	; 0xf86 <pinMode>
     5da:	8d 81       	ldd	r24, Y+5	; 0x05
     5dc:	8f 3f       	cpi	r24, 0xFF	; 255
     5de:	11 f0       	breq	.+4      	; 0x5e4 <_ZN13LiquidCrystal5beginEhhh+0x48>
     5e0:	61 e0       	ldi	r22, 0x01	; 1
     5e2:	d1 d4       	rcall	.+2466   	; 0xf86 <pinMode>
     5e4:	61 e0       	ldi	r22, 0x01	; 1
     5e6:	8e 81       	ldd	r24, Y+6	; 0x06
     5e8:	ce d4       	rcall	.+2460   	; 0xf86 <pinMode>
     5ea:	7e 01       	movw	r14, r28
     5ec:	87 e0       	ldi	r24, 0x07	; 7
     5ee:	e8 0e       	add	r14, r24
     5f0:	f1 1c       	adc	r15, r1
     5f2:	00 e0       	ldi	r16, 0x00	; 0
     5f4:	10 e0       	ldi	r17, 0x00	; 0
     5f6:	8f 85       	ldd	r24, Y+15	; 0x0f
     5f8:	84 fd       	sbrc	r24, 4
     5fa:	03 c0       	rjmp	.+6      	; 0x602 <_ZN13LiquidCrystal5beginEhhh+0x66>
     5fc:	84 e0       	ldi	r24, 0x04	; 4
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	02 c0       	rjmp	.+4      	; 0x606 <_ZN13LiquidCrystal5beginEhhh+0x6a>
     602:	88 e0       	ldi	r24, 0x08	; 8
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	08 17       	cp	r16, r24
     608:	19 07       	cpc	r17, r25
     60a:	44 f4       	brge	.+16     	; 0x61c <_ZN13LiquidCrystal5beginEhhh+0x80>
     60c:	61 e0       	ldi	r22, 0x01	; 1
     60e:	f7 01       	movw	r30, r14
     610:	81 91       	ld	r24, Z+
     612:	7f 01       	movw	r14, r30
     614:	b8 d4       	rcall	.+2416   	; 0xf86 <pinMode>
     616:	0f 5f       	subi	r16, 0xFF	; 255
     618:	1f 4f       	sbci	r17, 0xFF	; 255
     61a:	ed cf       	rjmp	.-38     	; 0x5f6 <_ZN13LiquidCrystal5beginEhhh+0x5a>
     61c:	80 e5       	ldi	r24, 0x50	; 80
     61e:	93 ec       	ldi	r25, 0xC3	; 195
     620:	cb d3       	rcall	.+1942   	; 0xdb8 <delayMicroseconds>
     622:	60 e0       	ldi	r22, 0x00	; 0
     624:	8c 81       	ldd	r24, Y+4	; 0x04
     626:	eb d4       	rcall	.+2518   	; 0xffe <digitalWrite>
     628:	60 e0       	ldi	r22, 0x00	; 0
     62a:	8e 81       	ldd	r24, Y+6	; 0x06
     62c:	e8 d4       	rcall	.+2512   	; 0xffe <digitalWrite>
     62e:	8d 81       	ldd	r24, Y+5	; 0x05
     630:	8f 3f       	cpi	r24, 0xFF	; 255
     632:	11 f0       	breq	.+4      	; 0x638 <_ZN13LiquidCrystal5beginEhhh+0x9c>
     634:	60 e0       	ldi	r22, 0x00	; 0
     636:	e3 d4       	rcall	.+2502   	; 0xffe <digitalWrite>
     638:	6f 85       	ldd	r22, Y+15	; 0x0f
     63a:	64 fd       	sbrc	r22, 4
     63c:	16 c0       	rjmp	.+44     	; 0x66a <_ZN13LiquidCrystal5beginEhhh+0xce>
     63e:	63 e0       	ldi	r22, 0x03	; 3
     640:	ce 01       	movw	r24, r28
     642:	12 df       	rcall	.-476    	; 0x468 <_ZN13LiquidCrystal10write4bitsEh>
     644:	84 e9       	ldi	r24, 0x94	; 148
     646:	91 e1       	ldi	r25, 0x11	; 17
     648:	b7 d3       	rcall	.+1902   	; 0xdb8 <delayMicroseconds>
     64a:	63 e0       	ldi	r22, 0x03	; 3
     64c:	ce 01       	movw	r24, r28
     64e:	0c df       	rcall	.-488    	; 0x468 <_ZN13LiquidCrystal10write4bitsEh>
     650:	84 e9       	ldi	r24, 0x94	; 148
     652:	91 e1       	ldi	r25, 0x11	; 17
     654:	b1 d3       	rcall	.+1890   	; 0xdb8 <delayMicroseconds>
     656:	63 e0       	ldi	r22, 0x03	; 3
     658:	ce 01       	movw	r24, r28
     65a:	06 df       	rcall	.-500    	; 0x468 <_ZN13LiquidCrystal10write4bitsEh>
     65c:	86 e9       	ldi	r24, 0x96	; 150
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	ab d3       	rcall	.+1878   	; 0xdb8 <delayMicroseconds>
     662:	62 e0       	ldi	r22, 0x02	; 2
     664:	ce 01       	movw	r24, r28
     666:	00 df       	rcall	.-512    	; 0x468 <_ZN13LiquidCrystal10write4bitsEh>
     668:	11 c0       	rjmp	.+34     	; 0x68c <_ZN13LiquidCrystal5beginEhhh+0xf0>
     66a:	60 62       	ori	r22, 0x20	; 32
     66c:	ce 01       	movw	r24, r28
     66e:	76 df       	rcall	.-276    	; 0x55c <_ZN13LiquidCrystal7commandEh>
     670:	84 e9       	ldi	r24, 0x94	; 148
     672:	91 e1       	ldi	r25, 0x11	; 17
     674:	a1 d3       	rcall	.+1858   	; 0xdb8 <delayMicroseconds>
     676:	6f 85       	ldd	r22, Y+15	; 0x0f
     678:	60 62       	ori	r22, 0x20	; 32
     67a:	ce 01       	movw	r24, r28
     67c:	6f df       	rcall	.-290    	; 0x55c <_ZN13LiquidCrystal7commandEh>
     67e:	86 e9       	ldi	r24, 0x96	; 150
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	9a d3       	rcall	.+1844   	; 0xdb8 <delayMicroseconds>
     684:	6f 85       	ldd	r22, Y+15	; 0x0f
     686:	60 62       	ori	r22, 0x20	; 32
     688:	ce 01       	movw	r24, r28
     68a:	68 df       	rcall	.-304    	; 0x55c <_ZN13LiquidCrystal7commandEh>
     68c:	6f 85       	ldd	r22, Y+15	; 0x0f
     68e:	60 62       	ori	r22, 0x20	; 32
     690:	ce 01       	movw	r24, r28
     692:	64 df       	rcall	.-312    	; 0x55c <_ZN13LiquidCrystal7commandEh>
     694:	84 e0       	ldi	r24, 0x04	; 4
     696:	88 8b       	std	Y+16, r24	; 0x10
     698:	ce 01       	movw	r24, r28
     69a:	79 df       	rcall	.-270    	; 0x58e <_ZN13LiquidCrystal7displayEv>
     69c:	ce 01       	movw	r24, r28
     69e:	60 df       	rcall	.-320    	; 0x560 <_ZN13LiquidCrystal5clearEv>
     6a0:	82 e0       	ldi	r24, 0x02	; 2
     6a2:	89 8b       	std	Y+17, r24	; 0x11
     6a4:	66 e0       	ldi	r22, 0x06	; 6
     6a6:	ce 01       	movw	r24, r28
     6a8:	df 91       	pop	r29
     6aa:	cf 91       	pop	r28
     6ac:	1f 91       	pop	r17
     6ae:	0f 91       	pop	r16
     6b0:	ff 90       	pop	r15
     6b2:	ef 90       	pop	r14
     6b4:	53 cf       	rjmp	.-346    	; 0x55c <_ZN13LiquidCrystal7commandEh>

000006b6 <_ZN13LiquidCrystalC1Ehhhhhh>:
     6b6:	cf 92       	push	r12
     6b8:	ef 92       	push	r14
     6ba:	0f 93       	push	r16
     6bc:	fc 01       	movw	r30, r24
     6be:	13 82       	std	Z+3, r1	; 0x03
     6c0:	12 82       	std	Z+2, r1	; 0x02
     6c2:	8e e5       	ldi	r24, 0x5E	; 94
     6c4:	92 e0       	ldi	r25, 0x02	; 2
     6c6:	91 83       	std	Z+1, r25	; 0x01
     6c8:	80 83       	st	Z, r24
     6ca:	64 83       	std	Z+4, r22	; 0x04
     6cc:	8f ef       	ldi	r24, 0xFF	; 255
     6ce:	85 83       	std	Z+5, r24	; 0x05
     6d0:	46 83       	std	Z+6, r20	; 0x06
     6d2:	27 83       	std	Z+7, r18	; 0x07
     6d4:	00 87       	std	Z+8, r16	; 0x08
     6d6:	e1 86       	std	Z+9, r14	; 0x09
     6d8:	c2 86       	std	Z+10, r12	; 0x0a
     6da:	13 86       	std	Z+11, r1	; 0x0b
     6dc:	14 86       	std	Z+12, r1	; 0x0c
     6de:	15 86       	std	Z+13, r1	; 0x0d
     6e0:	16 86       	std	Z+14, r1	; 0x0e
     6e2:	17 86       	std	Z+15, r1	; 0x0f
     6e4:	20 e0       	ldi	r18, 0x00	; 0
     6e6:	41 e0       	ldi	r20, 0x01	; 1
     6e8:	60 e1       	ldi	r22, 0x10	; 16
     6ea:	cf 01       	movw	r24, r30
     6ec:	0f 91       	pop	r16
     6ee:	ef 90       	pop	r14
     6f0:	cf 90       	pop	r12
     6f2:	54 cf       	rjmp	.-344    	; 0x59c <_ZN13LiquidCrystal5beginEhhh>

000006f4 <_ZN13LiquidCrystal5writeEh>:
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
     6f4:	41 e0       	ldi	r20, 0x01	; 1
     6f6:	0e df       	rcall	.-484    	; 0x514 <_ZN13LiquidCrystal4sendEhh>
  return 1; // assume sucess
}
     6f8:	81 e0       	ldi	r24, 0x01	; 1
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	08 95       	ret

000006fe <lcd_get>:
		return new LiquidCrystal(rs, enable, d0, d1, d2, d3);
	 }

	 void lcd_free(LiquidCrystal * lcd)
	 {
		delete lcd;
     6fe:	bf 92       	push	r11
     700:	cf 92       	push	r12
     702:	df 92       	push	r13
     704:	ef 92       	push	r14
     706:	ff 92       	push	r15
     708:	0f 93       	push	r16
     70a:	1f 93       	push	r17
     70c:	cf 93       	push	r28
     70e:	df 93       	push	r29
     710:	18 2f       	mov	r17, r24
     712:	f6 2e       	mov	r15, r22
     714:	d4 2e       	mov	r13, r20
     716:	b2 2e       	mov	r11, r18
     718:	88 e1       	ldi	r24, 0x18	; 24
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	98 d0       	rcall	.+304    	; 0x84e <_Znwj>
     71e:	ec 01       	movw	r28, r24
     720:	ce 2c       	mov	r12, r14
     722:	e0 2e       	mov	r14, r16
     724:	0b 2d       	mov	r16, r11
     726:	2d 2d       	mov	r18, r13
     728:	4f 2d       	mov	r20, r15
     72a:	61 2f       	mov	r22, r17
     72c:	c4 df       	rcall	.-120    	; 0x6b6 <_ZN13LiquidCrystalC1Ehhhhhh>
     72e:	ce 01       	movw	r24, r28
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	1f 91       	pop	r17
     736:	0f 91       	pop	r16
     738:	ff 90       	pop	r15
     73a:	ef 90       	pop	r14
     73c:	df 90       	pop	r13
     73e:	cf 90       	pop	r12
     740:	bf 90       	pop	r11
     742:	08 95       	ret

00000744 <lcd_begin>:
	 }

	 void lcd_begin(LiquidCrystal *lcd, uint8_t cols, uint8_t rows)
	 {
		lcd->begin(cols, rows);
     744:	20 e0       	ldi	r18, 0x00	; 0
     746:	2a cf       	rjmp	.-428    	; 0x59c <_ZN13LiquidCrystal5beginEhhh>

00000748 <lcd_clear>:
	 }

	 void lcd_clear(LiquidCrystal *lcd)
	 {
     748:	0b cf       	rjmp	.-490    	; 0x560 <_ZN13LiquidCrystal5clearEv>

0000074a <lcd_set_cursor>:
     74a:	0f cf       	rjmp	.-482    	; 0x56a <_ZN13LiquidCrystal9setCursorEhh>

0000074c <lcd_print>:
     74c:	c0 c0       	rjmp	.+384    	; 0x8ce <_ZN5Print5printEPKc>

0000074e <setup>:

controller rc_controller;

void setup() {
  // put your setup code here, to run once:
  controller_initialize(&rc_controller);
     74e:	8b e6       	ldi	r24, 0x6B	; 107
     750:	92 e0       	ldi	r25, 0x02	; 2
     752:	a4 cd       	rjmp	.-1208   	; 0x29c <controller_initialize>

00000754 <loop>:
}

void loop() {
     754:	08 95       	ret

00000756 <tact_switch_board_init>:
#include "tact_switch_board.h"

void tact_switch_board_init(tact_switch_board *board)
{
	board->buttons[0] = (analog_button){ .minimum = 692, .maximum = 702, .type = LIGHT_BUTTON};
     756:	25 e0       	ldi	r18, 0x05	; 5
     758:	e7 e1       	ldi	r30, 0x17	; 23
     75a:	f2 e0       	ldi	r31, 0x02	; 2
     75c:	dc 01       	movw	r26, r24
     75e:	12 96       	adiw	r26, 0x02	; 2
     760:	01 90       	ld	r0, Z+
     762:	0d 92       	st	X+, r0
     764:	2a 95       	dec	r18
     766:	e1 f7       	brne	.-8      	; 0x760 <tact_switch_board_init+0xa>
	board->buttons[1] = (analog_button){ .minimum = 830, .maximum = 840, .type = BUTTON_2};
     768:	25 e0       	ldi	r18, 0x05	; 5
     76a:	ec e1       	ldi	r30, 0x1C	; 28
     76c:	f2 e0       	ldi	r31, 0x02	; 2
     76e:	dc 01       	movw	r26, r24
     770:	17 96       	adiw	r26, 0x07	; 7
     772:	01 90       	ld	r0, Z+
     774:	0d 92       	st	X+, r0
     776:	2a 95       	dec	r18
     778:	e1 f7       	brne	.-8      	; 0x772 <tact_switch_board_init+0x1c>
	board->buttons[2] = (analog_button){ .minimum = 922, .maximum = 932, .type = BUTTON_3};
     77a:	25 e0       	ldi	r18, 0x05	; 5
     77c:	e1 e2       	ldi	r30, 0x21	; 33
     77e:	f2 e0       	ldi	r31, 0x02	; 2
     780:	dc 01       	movw	r26, r24
     782:	1c 96       	adiw	r26, 0x0c	; 12
     784:	01 90       	ld	r0, Z+
     786:	0d 92       	st	X+, r0
     788:	2a 95       	dec	r18
     78a:	e1 f7       	brne	.-8      	; 0x784 <tact_switch_board_init+0x2e>
	board->buttons[3] = (analog_button){ .minimum = 969, .maximum = 979, .type = BUTTON_4};
     78c:	25 e0       	ldi	r18, 0x05	; 5
     78e:	e6 e2       	ldi	r30, 0x26	; 38
     790:	f2 e0       	ldi	r31, 0x02	; 2
     792:	dc 01       	movw	r26, r24
     794:	51 96       	adiw	r26, 0x11	; 17
     796:	01 90       	ld	r0, Z+
     798:	0d 92       	st	X+, r0
     79a:	2a 95       	dec	r18
     79c:	e1 f7       	brne	.-8      	; 0x796 <tact_switch_board_init+0x40>

	pinMode(board->data_pin, INPUT);
     79e:	60 e0       	ldi	r22, 0x00	; 0
     7a0:	fc 01       	movw	r30, r24
     7a2:	80 81       	ld	r24, Z
     7a4:	f0 c3       	rjmp	.+2016   	; 0xf86 <pinMode>

000007a6 <tact_switch_button_pressed>:
}

analog_button tact_switch_button_pressed(tact_switch_board *switches, int value)
{
     7a6:	0f 93       	push	r16
     7a8:	1f 93       	push	r17
     7aa:	cf 93       	push	r28
     7ac:	df 93       	push	r29
     7ae:	cd b7       	in	r28, 0x3d	; 61
     7b0:	de b7       	in	r29, 0x3e	; 62
     7b2:	2a 97       	sbiw	r28, 0x0a	; 10
     7b4:	0f b6       	in	r0, 0x3f	; 63
     7b6:	f8 94       	cli
     7b8:	de bf       	out	0x3e, r29	; 62
     7ba:	0f be       	out	0x3f, r0	; 63
     7bc:	cd bf       	out	0x3d, r28	; 61
     7be:	8c 01       	movw	r16, r24
     7c0:	0c 5e       	subi	r16, 0xEC	; 236
     7c2:	1f 4f       	sbci	r17, 0xFF	; 255
    for(int index = 0; index < 4; ++index)
    {
	    analog_button button = switches->buttons[index];
     7c4:	25 e0       	ldi	r18, 0x05	; 5
     7c6:	fc 01       	movw	r30, r24
     7c8:	32 96       	adiw	r30, 0x02	; 2
     7ca:	de 01       	movw	r26, r28
     7cc:	16 96       	adiw	r26, 0x06	; 6
     7ce:	01 90       	ld	r0, Z+
     7d0:	0d 92       	st	X+, r0
     7d2:	2a 95       	dec	r18
     7d4:	e1 f7       	brne	.-8      	; 0x7ce <tact_switch_button_pressed+0x28>
     7d6:	fc 01       	movw	r30, r24
     7d8:	42 81       	ldd	r20, Z+2	; 0x02
     7da:	53 81       	ldd	r21, Z+3	; 0x03
	    if(value > button.minimum && value < button.maximum)
     7dc:	46 17       	cp	r20, r22
     7de:	57 07       	cpc	r21, r23
     7e0:	dc f4       	brge	.+54     	; 0x818 <tact_switch_button_pressed+0x72>

analog_button tact_switch_button_pressed(tact_switch_board *switches, int value)
{
    for(int index = 0; index < 4; ++index)
    {
	    analog_button button = switches->buttons[index];
     7e2:	24 81       	ldd	r18, Z+4	; 0x04
     7e4:	35 81       	ldd	r19, Z+5	; 0x05
	    if(value > button.minimum && value < button.maximum)
     7e6:	62 17       	cp	r22, r18
     7e8:	73 07       	cpc	r23, r19
     7ea:	b4 f4       	brge	.+44     	; 0x818 <tact_switch_button_pressed+0x72>
	    {
		    return button;
     7ec:	5f 83       	std	Y+7, r21	; 0x07
     7ee:	4e 83       	std	Y+6, r20	; 0x06
     7f0:	39 87       	std	Y+9, r19	; 0x09
     7f2:	28 87       	std	Y+8, r18	; 0x08
     7f4:	85 e0       	ldi	r24, 0x05	; 5
     7f6:	fe 01       	movw	r30, r28
     7f8:	36 96       	adiw	r30, 0x06	; 6
     7fa:	de 01       	movw	r26, r28
     7fc:	11 96       	adiw	r26, 0x01	; 1
     7fe:	01 90       	ld	r0, Z+
     800:	0d 92       	st	X+, r0
     802:	8a 95       	dec	r24
     804:	e1 f7       	brne	.-8      	; 0x7fe <tact_switch_button_pressed+0x58>
     806:	29 81       	ldd	r18, Y+1	; 0x01
     808:	3a 81       	ldd	r19, Y+2	; 0x02
     80a:	4b 81       	ldd	r20, Y+3	; 0x03
     80c:	5c 81       	ldd	r21, Y+4	; 0x04
     80e:	6d 81       	ldd	r22, Y+5	; 0x05
     810:	70 e0       	ldi	r23, 0x00	; 0
     812:	80 e0       	ldi	r24, 0x00	; 0
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	04 c0       	rjmp	.+8      	; 0x820 <tact_switch_button_pressed+0x7a>
     818:	05 96       	adiw	r24, 0x05	; 5
	pinMode(board->data_pin, INPUT);
}

analog_button tact_switch_button_pressed(tact_switch_board *switches, int value)
{
    for(int index = 0; index < 4; ++index)
     81a:	80 17       	cp	r24, r16
     81c:	91 07       	cpc	r25, r17
     81e:	91 f6       	brne	.-92     	; 0x7c4 <tact_switch_button_pressed+0x1e>
	    if(value > button.minimum && value < button.maximum)
	    {
		    return button;
	    }
    }
}
     820:	2a 96       	adiw	r28, 0x0a	; 10
     822:	0f b6       	in	r0, 0x3f	; 63
     824:	f8 94       	cli
     826:	de bf       	out	0x3e, r29	; 62
     828:	0f be       	out	0x3f, r0	; 63
     82a:	cd bf       	out	0x3d, r28	; 61
     82c:	df 91       	pop	r29
     82e:	cf 91       	pop	r28
     830:	1f 91       	pop	r17
     832:	0f 91       	pop	r16
     834:	08 95       	ret

00000836 <initVariant>:
     836:	08 95       	ret

00000838 <main>:
     838:	ca d2       	rcall	.+1428   	; 0xdce <init>
     83a:	fd df       	rcall	.-6      	; 0x836 <initVariant>
     83c:	88 df       	rcall	.-240    	; 0x74e <setup>
     83e:	c0 e0       	ldi	r28, 0x00	; 0
     840:	d0 e0       	ldi	r29, 0x00	; 0
     842:	88 df       	rcall	.-240    	; 0x754 <loop>
     844:	20 97       	sbiw	r28, 0x00	; 0
     846:	e9 f3       	breq	.-6      	; 0x842 <main+0xa>
     848:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     84c:	fa cf       	rjmp	.-12     	; 0x842 <main+0xa>

0000084e <_Znwj>:
     84e:	44 c4       	rjmp	.+2184   	; 0x10d8 <malloc>

00000850 <_ZN5Print5writeEPKhj>:
     850:	cf 92       	push	r12
     852:	df 92       	push	r13
     854:	ef 92       	push	r14
     856:	ff 92       	push	r15
     858:	0f 93       	push	r16
     85a:	1f 93       	push	r17
     85c:	cf 93       	push	r28
     85e:	df 93       	push	r29
     860:	6c 01       	movw	r12, r24
     862:	7a 01       	movw	r14, r20
     864:	8b 01       	movw	r16, r22
     866:	c0 e0       	ldi	r28, 0x00	; 0
     868:	d0 e0       	ldi	r29, 0x00	; 0
     86a:	ce 15       	cp	r28, r14
     86c:	df 05       	cpc	r29, r15
     86e:	81 f0       	breq	.+32     	; 0x890 <_ZN5Print5writeEPKhj+0x40>
     870:	d8 01       	movw	r26, r16
     872:	6d 91       	ld	r22, X+
     874:	8d 01       	movw	r16, r26
     876:	d6 01       	movw	r26, r12
     878:	ed 91       	ld	r30, X+
     87a:	fc 91       	ld	r31, X
     87c:	01 90       	ld	r0, Z+
     87e:	f0 81       	ld	r31, Z
     880:	e0 2d       	mov	r30, r0
     882:	c6 01       	movw	r24, r12
     884:	19 95       	eicall
     886:	89 2b       	or	r24, r25
     888:	11 f0       	breq	.+4      	; 0x88e <_ZN5Print5writeEPKhj+0x3e>
     88a:	21 96       	adiw	r28, 0x01	; 1
     88c:	ee cf       	rjmp	.-36     	; 0x86a <_ZN5Print5writeEPKhj+0x1a>
     88e:	7e 01       	movw	r14, r28
     890:	c7 01       	movw	r24, r14
     892:	df 91       	pop	r29
     894:	cf 91       	pop	r28
     896:	1f 91       	pop	r17
     898:	0f 91       	pop	r16
     89a:	ff 90       	pop	r15
     89c:	ef 90       	pop	r14
     89e:	df 90       	pop	r13
     8a0:	cf 90       	pop	r12
     8a2:	08 95       	ret

000008a4 <_ZN5Print5writeEPKc>:
     8a4:	61 15       	cp	r22, r1
     8a6:	71 05       	cpc	r23, r1
     8a8:	79 f0       	breq	.+30     	; 0x8c8 <_ZN5Print5writeEPKc+0x24>
     8aa:	fb 01       	movw	r30, r22
     8ac:	01 90       	ld	r0, Z+
     8ae:	00 20       	and	r0, r0
     8b0:	e9 f7       	brne	.-6      	; 0x8ac <_ZN5Print5writeEPKc+0x8>
     8b2:	31 97       	sbiw	r30, 0x01	; 1
     8b4:	af 01       	movw	r20, r30
     8b6:	46 1b       	sub	r20, r22
     8b8:	57 0b       	sbc	r21, r23
     8ba:	dc 01       	movw	r26, r24
     8bc:	ed 91       	ld	r30, X+
     8be:	fc 91       	ld	r31, X
     8c0:	02 80       	ldd	r0, Z+2	; 0x02
     8c2:	f3 81       	ldd	r31, Z+3	; 0x03
     8c4:	e0 2d       	mov	r30, r0
     8c6:	19 94       	eijmp
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	08 95       	ret

000008ce <_ZN5Print5printEPKc>:
     8ce:	ea cf       	rjmp	.-44     	; 0x8a4 <_ZN5Print5writeEPKc>

000008d0 <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
     8d0:	08 95       	ret

000008d2 <attachInterrupt>:
     8d2:	88 30       	cpi	r24, 0x08	; 8
     8d4:	08 f0       	brcs	.+2      	; 0x8d8 <attachInterrupt+0x6>
     8d6:	6f c0       	rjmp	.+222    	; 0x9b6 <attachInterrupt+0xe4>
     8d8:	a8 2f       	mov	r26, r24
     8da:	b0 e0       	ldi	r27, 0x00	; 0
     8dc:	aa 0f       	add	r26, r26
     8de:	bb 1f       	adc	r27, r27
     8e0:	aa 5f       	subi	r26, 0xFA	; 250
     8e2:	bd 4f       	sbci	r27, 0xFD	; 253
     8e4:	11 96       	adiw	r26, 0x01	; 1
     8e6:	7c 93       	st	X, r23
     8e8:	6e 93       	st	-X, r22
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	fc 01       	movw	r30, r24
     8ee:	31 97       	sbiw	r30, 0x01	; 1
     8f0:	e7 30       	cpi	r30, 0x07	; 7
     8f2:	f1 05       	cpc	r31, r1
     8f4:	98 f5       	brcc	.+102    	; 0x95c <attachInterrupt+0x8a>
     8f6:	88 27       	eor	r24, r24
     8f8:	ee 58       	subi	r30, 0x8E	; 142
     8fa:	ff 4f       	sbci	r31, 0xFF	; 255
     8fc:	8f 4f       	sbci	r24, 0xFF	; 255
     8fe:	e4 c3       	rjmp	.+1992   	; 0x10c8 <__tablejump2__>
     900:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
     904:	8c 7f       	andi	r24, 0xFC	; 252
     906:	48 2b       	or	r20, r24
     908:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
     90c:	e8 9a       	sbi	0x1d, 0	; 29
     90e:	08 95       	ret
     910:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
     914:	83 7f       	andi	r24, 0xF3	; 243
     916:	44 0f       	add	r20, r20
     918:	55 1f       	adc	r21, r21
     91a:	44 0f       	add	r20, r20
     91c:	55 1f       	adc	r21, r21
     91e:	48 2b       	or	r20, r24
     920:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
     924:	e9 9a       	sbi	0x1d, 1	; 29
     926:	08 95       	ret
     928:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
     92c:	8f 7c       	andi	r24, 0xCF	; 207
     92e:	74 e0       	ldi	r23, 0x04	; 4
     930:	44 0f       	add	r20, r20
     932:	55 1f       	adc	r21, r21
     934:	7a 95       	dec	r23
     936:	e1 f7       	brne	.-8      	; 0x930 <attachInterrupt+0x5e>
     938:	48 2b       	or	r20, r24
     93a:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
     93e:	ea 9a       	sbi	0x1d, 2	; 29
     940:	08 95       	ret
     942:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
     946:	8f 73       	andi	r24, 0x3F	; 63
     948:	66 e0       	ldi	r22, 0x06	; 6
     94a:	44 0f       	add	r20, r20
     94c:	55 1f       	adc	r21, r21
     94e:	6a 95       	dec	r22
     950:	e1 f7       	brne	.-8      	; 0x94a <attachInterrupt+0x78>
     952:	48 2b       	or	r20, r24
     954:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
     958:	eb 9a       	sbi	0x1d, 3	; 29
     95a:	08 95       	ret
     95c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     960:	8c 7f       	andi	r24, 0xFC	; 252
     962:	48 2b       	or	r20, r24
     964:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     968:	ec 9a       	sbi	0x1d, 4	; 29
     96a:	08 95       	ret
     96c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     970:	83 7f       	andi	r24, 0xF3	; 243
     972:	44 0f       	add	r20, r20
     974:	55 1f       	adc	r21, r21
     976:	44 0f       	add	r20, r20
     978:	55 1f       	adc	r21, r21
     97a:	48 2b       	or	r20, r24
     97c:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     980:	ed 9a       	sbi	0x1d, 5	; 29
     982:	08 95       	ret
     984:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     988:	8f 7c       	andi	r24, 0xCF	; 207
     98a:	24 e0       	ldi	r18, 0x04	; 4
     98c:	44 0f       	add	r20, r20
     98e:	55 1f       	adc	r21, r21
     990:	2a 95       	dec	r18
     992:	e1 f7       	brne	.-8      	; 0x98c <attachInterrupt+0xba>
     994:	48 2b       	or	r20, r24
     996:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     99a:	ee 9a       	sbi	0x1d, 6	; 29
     99c:	08 95       	ret
     99e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     9a2:	8f 73       	andi	r24, 0x3F	; 63
     9a4:	96 e0       	ldi	r25, 0x06	; 6
     9a6:	44 0f       	add	r20, r20
     9a8:	55 1f       	adc	r21, r21
     9aa:	9a 95       	dec	r25
     9ac:	e1 f7       	brne	.-8      	; 0x9a6 <attachInterrupt+0xd4>
     9ae:	48 2b       	or	r20, r24
     9b0:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     9b4:	ef 9a       	sbi	0x1d, 7	; 29
     9b6:	08 95       	ret

000009b8 <__vector_1>:
IMPLEMENT_ISR(INT3_vect, EXTERNAL_INT_3)
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_4)

#elif defined(EICRA) && defined(EICRB)

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_2)
     9b8:	1f 92       	push	r1
     9ba:	0f 92       	push	r0
     9bc:	0f b6       	in	r0, 0x3f	; 63
     9be:	0f 92       	push	r0
     9c0:	11 24       	eor	r1, r1
     9c2:	0b b6       	in	r0, 0x3b	; 59
     9c4:	0f 92       	push	r0
     9c6:	2f 93       	push	r18
     9c8:	3f 93       	push	r19
     9ca:	4f 93       	push	r20
     9cc:	5f 93       	push	r21
     9ce:	6f 93       	push	r22
     9d0:	7f 93       	push	r23
     9d2:	8f 93       	push	r24
     9d4:	9f 93       	push	r25
     9d6:	af 93       	push	r26
     9d8:	bf 93       	push	r27
     9da:	ef 93       	push	r30
     9dc:	ff 93       	push	r31
     9de:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <intFunc+0x4>
     9e2:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <intFunc+0x5>
     9e6:	19 95       	eicall
     9e8:	ff 91       	pop	r31
     9ea:	ef 91       	pop	r30
     9ec:	bf 91       	pop	r27
     9ee:	af 91       	pop	r26
     9f0:	9f 91       	pop	r25
     9f2:	8f 91       	pop	r24
     9f4:	7f 91       	pop	r23
     9f6:	6f 91       	pop	r22
     9f8:	5f 91       	pop	r21
     9fa:	4f 91       	pop	r20
     9fc:	3f 91       	pop	r19
     9fe:	2f 91       	pop	r18
     a00:	0f 90       	pop	r0
     a02:	0b be       	out	0x3b, r0	; 59
     a04:	0f 90       	pop	r0
     a06:	0f be       	out	0x3f, r0	; 63
     a08:	0f 90       	pop	r0
     a0a:	1f 90       	pop	r1
     a0c:	18 95       	reti

00000a0e <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_3)
     a0e:	1f 92       	push	r1
     a10:	0f 92       	push	r0
     a12:	0f b6       	in	r0, 0x3f	; 63
     a14:	0f 92       	push	r0
     a16:	11 24       	eor	r1, r1
     a18:	0b b6       	in	r0, 0x3b	; 59
     a1a:	0f 92       	push	r0
     a1c:	2f 93       	push	r18
     a1e:	3f 93       	push	r19
     a20:	4f 93       	push	r20
     a22:	5f 93       	push	r21
     a24:	6f 93       	push	r22
     a26:	7f 93       	push	r23
     a28:	8f 93       	push	r24
     a2a:	9f 93       	push	r25
     a2c:	af 93       	push	r26
     a2e:	bf 93       	push	r27
     a30:	ef 93       	push	r30
     a32:	ff 93       	push	r31
     a34:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <intFunc+0x6>
     a38:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <intFunc+0x7>
     a3c:	19 95       	eicall
     a3e:	ff 91       	pop	r31
     a40:	ef 91       	pop	r30
     a42:	bf 91       	pop	r27
     a44:	af 91       	pop	r26
     a46:	9f 91       	pop	r25
     a48:	8f 91       	pop	r24
     a4a:	7f 91       	pop	r23
     a4c:	6f 91       	pop	r22
     a4e:	5f 91       	pop	r21
     a50:	4f 91       	pop	r20
     a52:	3f 91       	pop	r19
     a54:	2f 91       	pop	r18
     a56:	0f 90       	pop	r0
     a58:	0b be       	out	0x3b, r0	; 59
     a5a:	0f 90       	pop	r0
     a5c:	0f be       	out	0x3f, r0	; 63
     a5e:	0f 90       	pop	r0
     a60:	1f 90       	pop	r1
     a62:	18 95       	reti

00000a64 <__vector_3>:
IMPLEMENT_ISR(INT2_vect, EXTERNAL_INT_4)
     a64:	1f 92       	push	r1
     a66:	0f 92       	push	r0
     a68:	0f b6       	in	r0, 0x3f	; 63
     a6a:	0f 92       	push	r0
     a6c:	11 24       	eor	r1, r1
     a6e:	0b b6       	in	r0, 0x3b	; 59
     a70:	0f 92       	push	r0
     a72:	2f 93       	push	r18
     a74:	3f 93       	push	r19
     a76:	4f 93       	push	r20
     a78:	5f 93       	push	r21
     a7a:	6f 93       	push	r22
     a7c:	7f 93       	push	r23
     a7e:	8f 93       	push	r24
     a80:	9f 93       	push	r25
     a82:	af 93       	push	r26
     a84:	bf 93       	push	r27
     a86:	ef 93       	push	r30
     a88:	ff 93       	push	r31
     a8a:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <intFunc+0x8>
     a8e:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <intFunc+0x9>
     a92:	19 95       	eicall
     a94:	ff 91       	pop	r31
     a96:	ef 91       	pop	r30
     a98:	bf 91       	pop	r27
     a9a:	af 91       	pop	r26
     a9c:	9f 91       	pop	r25
     a9e:	8f 91       	pop	r24
     aa0:	7f 91       	pop	r23
     aa2:	6f 91       	pop	r22
     aa4:	5f 91       	pop	r21
     aa6:	4f 91       	pop	r20
     aa8:	3f 91       	pop	r19
     aaa:	2f 91       	pop	r18
     aac:	0f 90       	pop	r0
     aae:	0b be       	out	0x3b, r0	; 59
     ab0:	0f 90       	pop	r0
     ab2:	0f be       	out	0x3f, r0	; 63
     ab4:	0f 90       	pop	r0
     ab6:	1f 90       	pop	r1
     ab8:	18 95       	reti

00000aba <__vector_4>:
IMPLEMENT_ISR(INT3_vect, EXTERNAL_INT_5)
     aba:	1f 92       	push	r1
     abc:	0f 92       	push	r0
     abe:	0f b6       	in	r0, 0x3f	; 63
     ac0:	0f 92       	push	r0
     ac2:	11 24       	eor	r1, r1
     ac4:	0b b6       	in	r0, 0x3b	; 59
     ac6:	0f 92       	push	r0
     ac8:	2f 93       	push	r18
     aca:	3f 93       	push	r19
     acc:	4f 93       	push	r20
     ace:	5f 93       	push	r21
     ad0:	6f 93       	push	r22
     ad2:	7f 93       	push	r23
     ad4:	8f 93       	push	r24
     ad6:	9f 93       	push	r25
     ad8:	af 93       	push	r26
     ada:	bf 93       	push	r27
     adc:	ef 93       	push	r30
     ade:	ff 93       	push	r31
     ae0:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <intFunc+0xa>
     ae4:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <intFunc+0xb>
     ae8:	19 95       	eicall
     aea:	ff 91       	pop	r31
     aec:	ef 91       	pop	r30
     aee:	bf 91       	pop	r27
     af0:	af 91       	pop	r26
     af2:	9f 91       	pop	r25
     af4:	8f 91       	pop	r24
     af6:	7f 91       	pop	r23
     af8:	6f 91       	pop	r22
     afa:	5f 91       	pop	r21
     afc:	4f 91       	pop	r20
     afe:	3f 91       	pop	r19
     b00:	2f 91       	pop	r18
     b02:	0f 90       	pop	r0
     b04:	0b be       	out	0x3b, r0	; 59
     b06:	0f 90       	pop	r0
     b08:	0f be       	out	0x3f, r0	; 63
     b0a:	0f 90       	pop	r0
     b0c:	1f 90       	pop	r1
     b0e:	18 95       	reti

00000b10 <__vector_5>:
IMPLEMENT_ISR(INT4_vect, EXTERNAL_INT_0)
     b10:	1f 92       	push	r1
     b12:	0f 92       	push	r0
     b14:	0f b6       	in	r0, 0x3f	; 63
     b16:	0f 92       	push	r0
     b18:	11 24       	eor	r1, r1
     b1a:	0b b6       	in	r0, 0x3b	; 59
     b1c:	0f 92       	push	r0
     b1e:	2f 93       	push	r18
     b20:	3f 93       	push	r19
     b22:	4f 93       	push	r20
     b24:	5f 93       	push	r21
     b26:	6f 93       	push	r22
     b28:	7f 93       	push	r23
     b2a:	8f 93       	push	r24
     b2c:	9f 93       	push	r25
     b2e:	af 93       	push	r26
     b30:	bf 93       	push	r27
     b32:	ef 93       	push	r30
     b34:	ff 93       	push	r31
     b36:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <intFunc>
     b3a:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <intFunc+0x1>
     b3e:	19 95       	eicall
     b40:	ff 91       	pop	r31
     b42:	ef 91       	pop	r30
     b44:	bf 91       	pop	r27
     b46:	af 91       	pop	r26
     b48:	9f 91       	pop	r25
     b4a:	8f 91       	pop	r24
     b4c:	7f 91       	pop	r23
     b4e:	6f 91       	pop	r22
     b50:	5f 91       	pop	r21
     b52:	4f 91       	pop	r20
     b54:	3f 91       	pop	r19
     b56:	2f 91       	pop	r18
     b58:	0f 90       	pop	r0
     b5a:	0b be       	out	0x3b, r0	; 59
     b5c:	0f 90       	pop	r0
     b5e:	0f be       	out	0x3f, r0	; 63
     b60:	0f 90       	pop	r0
     b62:	1f 90       	pop	r1
     b64:	18 95       	reti

00000b66 <__vector_6>:
IMPLEMENT_ISR(INT5_vect, EXTERNAL_INT_1)
     b66:	1f 92       	push	r1
     b68:	0f 92       	push	r0
     b6a:	0f b6       	in	r0, 0x3f	; 63
     b6c:	0f 92       	push	r0
     b6e:	11 24       	eor	r1, r1
     b70:	0b b6       	in	r0, 0x3b	; 59
     b72:	0f 92       	push	r0
     b74:	2f 93       	push	r18
     b76:	3f 93       	push	r19
     b78:	4f 93       	push	r20
     b7a:	5f 93       	push	r21
     b7c:	6f 93       	push	r22
     b7e:	7f 93       	push	r23
     b80:	8f 93       	push	r24
     b82:	9f 93       	push	r25
     b84:	af 93       	push	r26
     b86:	bf 93       	push	r27
     b88:	ef 93       	push	r30
     b8a:	ff 93       	push	r31
     b8c:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <intFunc+0x2>
     b90:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <intFunc+0x3>
     b94:	19 95       	eicall
     b96:	ff 91       	pop	r31
     b98:	ef 91       	pop	r30
     b9a:	bf 91       	pop	r27
     b9c:	af 91       	pop	r26
     b9e:	9f 91       	pop	r25
     ba0:	8f 91       	pop	r24
     ba2:	7f 91       	pop	r23
     ba4:	6f 91       	pop	r22
     ba6:	5f 91       	pop	r21
     ba8:	4f 91       	pop	r20
     baa:	3f 91       	pop	r19
     bac:	2f 91       	pop	r18
     bae:	0f 90       	pop	r0
     bb0:	0b be       	out	0x3b, r0	; 59
     bb2:	0f 90       	pop	r0
     bb4:	0f be       	out	0x3f, r0	; 63
     bb6:	0f 90       	pop	r0
     bb8:	1f 90       	pop	r1
     bba:	18 95       	reti

00000bbc <__vector_7>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
     bbc:	1f 92       	push	r1
     bbe:	0f 92       	push	r0
     bc0:	0f b6       	in	r0, 0x3f	; 63
     bc2:	0f 92       	push	r0
     bc4:	11 24       	eor	r1, r1
     bc6:	0b b6       	in	r0, 0x3b	; 59
     bc8:	0f 92       	push	r0
     bca:	2f 93       	push	r18
     bcc:	3f 93       	push	r19
     bce:	4f 93       	push	r20
     bd0:	5f 93       	push	r21
     bd2:	6f 93       	push	r22
     bd4:	7f 93       	push	r23
     bd6:	8f 93       	push	r24
     bd8:	9f 93       	push	r25
     bda:	af 93       	push	r26
     bdc:	bf 93       	push	r27
     bde:	ef 93       	push	r30
     be0:	ff 93       	push	r31
     be2:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <intFunc+0xc>
     be6:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <intFunc+0xd>
     bea:	19 95       	eicall
     bec:	ff 91       	pop	r31
     bee:	ef 91       	pop	r30
     bf0:	bf 91       	pop	r27
     bf2:	af 91       	pop	r26
     bf4:	9f 91       	pop	r25
     bf6:	8f 91       	pop	r24
     bf8:	7f 91       	pop	r23
     bfa:	6f 91       	pop	r22
     bfc:	5f 91       	pop	r21
     bfe:	4f 91       	pop	r20
     c00:	3f 91       	pop	r19
     c02:	2f 91       	pop	r18
     c04:	0f 90       	pop	r0
     c06:	0b be       	out	0x3b, r0	; 59
     c08:	0f 90       	pop	r0
     c0a:	0f be       	out	0x3f, r0	; 63
     c0c:	0f 90       	pop	r0
     c0e:	1f 90       	pop	r1
     c10:	18 95       	reti

00000c12 <__vector_8>:
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)
     c12:	1f 92       	push	r1
     c14:	0f 92       	push	r0
     c16:	0f b6       	in	r0, 0x3f	; 63
     c18:	0f 92       	push	r0
     c1a:	11 24       	eor	r1, r1
     c1c:	0b b6       	in	r0, 0x3b	; 59
     c1e:	0f 92       	push	r0
     c20:	2f 93       	push	r18
     c22:	3f 93       	push	r19
     c24:	4f 93       	push	r20
     c26:	5f 93       	push	r21
     c28:	6f 93       	push	r22
     c2a:	7f 93       	push	r23
     c2c:	8f 93       	push	r24
     c2e:	9f 93       	push	r25
     c30:	af 93       	push	r26
     c32:	bf 93       	push	r27
     c34:	ef 93       	push	r30
     c36:	ff 93       	push	r31
     c38:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <intFunc+0xe>
     c3c:	f0 91 15 02 	lds	r31, 0x0215	; 0x800215 <intFunc+0xf>
     c40:	19 95       	eicall
     c42:	ff 91       	pop	r31
     c44:	ef 91       	pop	r30
     c46:	bf 91       	pop	r27
     c48:	af 91       	pop	r26
     c4a:	9f 91       	pop	r25
     c4c:	8f 91       	pop	r24
     c4e:	7f 91       	pop	r23
     c50:	6f 91       	pop	r22
     c52:	5f 91       	pop	r21
     c54:	4f 91       	pop	r20
     c56:	3f 91       	pop	r19
     c58:	2f 91       	pop	r18
     c5a:	0f 90       	pop	r0
     c5c:	0b be       	out	0x3b, r0	; 59
     c5e:	0f 90       	pop	r0
     c60:	0f be       	out	0x3f, r0	; 63
     c62:	0f 90       	pop	r0
     c64:	1f 90       	pop	r1
     c66:	18 95       	reti

00000c68 <__vector_23>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
     c68:	1f 92       	push	r1
     c6a:	0f 92       	push	r0
     c6c:	0f b6       	in	r0, 0x3f	; 63
     c6e:	0f 92       	push	r0
     c70:	11 24       	eor	r1, r1
     c72:	2f 93       	push	r18
     c74:	3f 93       	push	r19
     c76:	8f 93       	push	r24
     c78:	9f 93       	push	r25
     c7a:	af 93       	push	r26
     c7c:	bf 93       	push	r27
     c7e:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <timer0_millis>
     c82:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <timer0_millis+0x1>
     c86:	a0 91 65 02 	lds	r26, 0x0265	; 0x800265 <timer0_millis+0x2>
     c8a:	b0 91 66 02 	lds	r27, 0x0266	; 0x800266 <timer0_millis+0x3>
     c8e:	30 91 62 02 	lds	r19, 0x0262	; 0x800262 <__data_end>
     c92:	23 e0       	ldi	r18, 0x03	; 3
     c94:	23 0f       	add	r18, r19
     c96:	2d 37       	cpi	r18, 0x7D	; 125
     c98:	20 f4       	brcc	.+8      	; 0xca2 <__vector_23+0x3a>
     c9a:	01 96       	adiw	r24, 0x01	; 1
     c9c:	a1 1d       	adc	r26, r1
     c9e:	b1 1d       	adc	r27, r1
     ca0:	05 c0       	rjmp	.+10     	; 0xcac <__vector_23+0x44>
     ca2:	26 e8       	ldi	r18, 0x86	; 134
     ca4:	23 0f       	add	r18, r19
     ca6:	02 96       	adiw	r24, 0x02	; 2
     ca8:	a1 1d       	adc	r26, r1
     caa:	b1 1d       	adc	r27, r1
     cac:	20 93 62 02 	sts	0x0262, r18	; 0x800262 <__data_end>
     cb0:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <timer0_millis>
     cb4:	90 93 64 02 	sts	0x0264, r25	; 0x800264 <timer0_millis+0x1>
     cb8:	a0 93 65 02 	sts	0x0265, r26	; 0x800265 <timer0_millis+0x2>
     cbc:	b0 93 66 02 	sts	0x0266, r27	; 0x800266 <timer0_millis+0x3>
     cc0:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <timer0_overflow_count>
     cc4:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <timer0_overflow_count+0x1>
     cc8:	a0 91 69 02 	lds	r26, 0x0269	; 0x800269 <timer0_overflow_count+0x2>
     ccc:	b0 91 6a 02 	lds	r27, 0x026A	; 0x80026a <timer0_overflow_count+0x3>
     cd0:	01 96       	adiw	r24, 0x01	; 1
     cd2:	a1 1d       	adc	r26, r1
     cd4:	b1 1d       	adc	r27, r1
     cd6:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <timer0_overflow_count>
     cda:	90 93 68 02 	sts	0x0268, r25	; 0x800268 <timer0_overflow_count+0x1>
     cde:	a0 93 69 02 	sts	0x0269, r26	; 0x800269 <timer0_overflow_count+0x2>
     ce2:	b0 93 6a 02 	sts	0x026A, r27	; 0x80026a <timer0_overflow_count+0x3>
     ce6:	bf 91       	pop	r27
     ce8:	af 91       	pop	r26
     cea:	9f 91       	pop	r25
     cec:	8f 91       	pop	r24
     cee:	3f 91       	pop	r19
     cf0:	2f 91       	pop	r18
     cf2:	0f 90       	pop	r0
     cf4:	0f be       	out	0x3f, r0	; 63
     cf6:	0f 90       	pop	r0
     cf8:	1f 90       	pop	r1
     cfa:	18 95       	reti

00000cfc <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     cfc:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     cfe:	f8 94       	cli
	m = timer0_overflow_count;
     d00:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <timer0_overflow_count>
     d04:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <timer0_overflow_count+0x1>
     d08:	a0 91 69 02 	lds	r26, 0x0269	; 0x800269 <timer0_overflow_count+0x2>
     d0c:	b0 91 6a 02 	lds	r27, 0x026A	; 0x80026a <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
     d10:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     d12:	a8 9b       	sbis	0x15, 0	; 21
     d14:	05 c0       	rjmp	.+10     	; 0xd20 <micros+0x24>
     d16:	2f 3f       	cpi	r18, 0xFF	; 255
     d18:	19 f0       	breq	.+6      	; 0xd20 <micros+0x24>
		m++;
     d1a:	01 96       	adiw	r24, 0x01	; 1
     d1c:	a1 1d       	adc	r26, r1
     d1e:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     d20:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     d22:	ba 2f       	mov	r27, r26
     d24:	a9 2f       	mov	r26, r25
     d26:	98 2f       	mov	r25, r24
     d28:	88 27       	eor	r24, r24
     d2a:	82 0f       	add	r24, r18
     d2c:	91 1d       	adc	r25, r1
     d2e:	a1 1d       	adc	r26, r1
     d30:	b1 1d       	adc	r27, r1
     d32:	bc 01       	movw	r22, r24
     d34:	cd 01       	movw	r24, r26
     d36:	42 e0       	ldi	r20, 0x02	; 2
     d38:	66 0f       	add	r22, r22
     d3a:	77 1f       	adc	r23, r23
     d3c:	88 1f       	adc	r24, r24
     d3e:	99 1f       	adc	r25, r25
     d40:	4a 95       	dec	r20
     d42:	d1 f7       	brne	.-12     	; 0xd38 <micros+0x3c>
}
     d44:	08 95       	ret

00000d46 <delay>:

void delay(unsigned long ms)
{
     d46:	8f 92       	push	r8
     d48:	9f 92       	push	r9
     d4a:	af 92       	push	r10
     d4c:	bf 92       	push	r11
     d4e:	cf 92       	push	r12
     d50:	df 92       	push	r13
     d52:	ef 92       	push	r14
     d54:	ff 92       	push	r15
     d56:	6b 01       	movw	r12, r22
	uint32_t start = micros();
     d58:	7c 01       	movw	r14, r24
     d5a:	d0 df       	rcall	.-96     	; 0xcfc <micros>
     d5c:	4b 01       	movw	r8, r22

	while (ms > 0) {
     d5e:	5c 01       	movw	r10, r24
     d60:	c1 14       	cp	r12, r1
     d62:	d1 04       	cpc	r13, r1
		yield();
     d64:	e1 04       	cpc	r14, r1
		while ( ms > 0 && (micros() - start) >= 1000) {
     d66:	f1 04       	cpc	r15, r1
     d68:	f1 f0       	breq	.+60     	; 0xda6 <delay+0x60>
     d6a:	ad d1       	rcall	.+858    	; 0x10c6 <yield>
     d6c:	c7 df       	rcall	.-114    	; 0xcfc <micros>
     d6e:	dc 01       	movw	r26, r24
     d70:	cb 01       	movw	r24, r22
     d72:	88 19       	sub	r24, r8
     d74:	99 09       	sbc	r25, r9
     d76:	aa 09       	sbc	r26, r10
     d78:	bb 09       	sbc	r27, r11
     d7a:	88 3e       	cpi	r24, 0xE8	; 232
     d7c:	93 40       	sbci	r25, 0x03	; 3
     d7e:	a1 05       	cpc	r26, r1
			ms--;
     d80:	b1 05       	cpc	r27, r1
     d82:	70 f3       	brcs	.-36     	; 0xd60 <delay+0x1a>
     d84:	21 e0       	ldi	r18, 0x01	; 1
     d86:	c2 1a       	sub	r12, r18
     d88:	d1 08       	sbc	r13, r1
			start += 1000;
     d8a:	e1 08       	sbc	r14, r1
     d8c:	f1 08       	sbc	r15, r1
     d8e:	88 ee       	ldi	r24, 0xE8	; 232
     d90:	88 0e       	add	r8, r24
     d92:	83 e0       	ldi	r24, 0x03	; 3
     d94:	98 1e       	adc	r9, r24
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
     d96:	a1 1c       	adc	r10, r1
     d98:	b1 1c       	adc	r11, r1
     d9a:	c1 14       	cp	r12, r1
     d9c:	d1 04       	cpc	r13, r1
     d9e:	e1 04       	cpc	r14, r1
     da0:	f1 04       	cpc	r15, r1
			ms--;
			start += 1000;
		}
	}
}
     da2:	21 f7       	brne	.-56     	; 0xd6c <delay+0x26>
     da4:	dd cf       	rjmp	.-70     	; 0xd60 <delay+0x1a>
     da6:	ff 90       	pop	r15
     da8:	ef 90       	pop	r14
     daa:	df 90       	pop	r13
     dac:	cf 90       	pop	r12
     dae:	bf 90       	pop	r11
     db0:	af 90       	pop	r10
     db2:	9f 90       	pop	r9
     db4:	8f 90       	pop	r8
     db6:	08 95       	ret

00000db8 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
     db8:	82 30       	cpi	r24, 0x02	; 2
     dba:	91 05       	cpc	r25, r1
     dbc:	38 f0       	brcs	.+14     	; 0xdcc <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
     dbe:	88 0f       	add	r24, r24
     dc0:	99 1f       	adc	r25, r25
     dc2:	88 0f       	add	r24, r24
     dc4:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
     dc6:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
     dc8:	01 97       	sbiw	r24, 0x01	; 1
     dca:	f1 f7       	brne	.-4      	; 0xdc8 <delayMicroseconds+0x10>
     dcc:	08 95       	ret

00000dce <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     dce:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     dd0:	84 b5       	in	r24, 0x24	; 36
     dd2:	82 60       	ori	r24, 0x02	; 2
     dd4:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     dd6:	84 b5       	in	r24, 0x24	; 36
     dd8:	81 60       	ori	r24, 0x01	; 1
     dda:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     ddc:	85 b5       	in	r24, 0x25	; 37
     dde:	82 60       	ori	r24, 0x02	; 2
     de0:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     de2:	85 b5       	in	r24, 0x25	; 37
     de4:	81 60       	ori	r24, 0x01	; 1
     de6:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     de8:	ee e6       	ldi	r30, 0x6E	; 110
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	81 60       	ori	r24, 0x01	; 1
     df0:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     df2:	e1 e8       	ldi	r30, 0x81	; 129
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     df8:	80 81       	ld	r24, Z
     dfa:	82 60       	ori	r24, 0x02	; 2
     dfc:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     dfe:	80 81       	ld	r24, Z
     e00:	81 60       	ori	r24, 0x01	; 1
     e02:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     e04:	e0 e8       	ldi	r30, 0x80	; 128
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	81 60       	ori	r24, 0x01	; 1
     e0c:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     e0e:	e1 eb       	ldi	r30, 0xB1	; 177
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	84 60       	ori	r24, 0x04	; 4
     e16:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     e18:	e0 eb       	ldi	r30, 0xB0	; 176
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	81 60       	ori	r24, 0x01	; 1
     e20:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
     e22:	e1 e9       	ldi	r30, 0x91	; 145
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	82 60       	ori	r24, 0x02	; 2
     e2a:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
     e2c:	80 81       	ld	r24, Z
     e2e:	81 60       	ori	r24, 0x01	; 1
     e30:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
     e32:	e0 e9       	ldi	r30, 0x90	; 144
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	81 60       	ori	r24, 0x01	; 1
     e3a:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
     e3c:	e1 ea       	ldi	r30, 0xA1	; 161
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	82 60       	ori	r24, 0x02	; 2
     e44:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
     e46:	80 81       	ld	r24, Z
     e48:	81 60       	ori	r24, 0x01	; 1
     e4a:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
     e4c:	e0 ea       	ldi	r30, 0xA0	; 160
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	81 60       	ori	r24, 0x01	; 1
     e54:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
     e56:	e1 e2       	ldi	r30, 0x21	; 33
     e58:	f1 e0       	ldi	r31, 0x01	; 1
     e5a:	80 81       	ld	r24, Z
     e5c:	82 60       	ori	r24, 0x02	; 2
     e5e:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
     e60:	80 81       	ld	r24, Z
     e62:	81 60       	ori	r24, 0x01	; 1
     e64:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
     e66:	e0 e2       	ldi	r30, 0x20	; 32
     e68:	f1 e0       	ldi	r31, 0x01	; 1
     e6a:	80 81       	ld	r24, Z
     e6c:	81 60       	ori	r24, 0x01	; 1
     e6e:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     e70:	ea e7       	ldi	r30, 0x7A	; 122
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	84 60       	ori	r24, 0x04	; 4
     e78:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     e7a:	80 81       	ld	r24, Z
     e7c:	82 60       	ori	r24, 0x02	; 2
     e7e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     e80:	80 81       	ld	r24, Z
     e82:	81 60       	ori	r24, 0x01	; 1
     e84:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     e86:	80 81       	ld	r24, Z
     e88:	80 68       	ori	r24, 0x80	; 128
     e8a:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     e8c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
     e90:	08 95       	ret

00000e92 <analogRead>:
#if defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#endif
	pin = analogPinToChannel(pin);
#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
     e92:	86 33       	cpi	r24, 0x36	; 54
     e94:	08 f0       	brcs	.+2      	; 0xe98 <analogRead+0x6>
     e96:	86 53       	subi	r24, 0x36	; 54
#endif

#if defined(ADCSRB) && defined(MUX5)
	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
     e98:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
     e9c:	28 2f       	mov	r18, r24
     e9e:	28 70       	andi	r18, 0x08	; 8
     ea0:	97 7f       	andi	r25, 0xF7	; 247
     ea2:	92 2b       	or	r25, r18
     ea4:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
     ea8:	20 91 16 02 	lds	r18, 0x0216	; 0x800216 <analog_reference>
     eac:	90 e4       	ldi	r25, 0x40	; 64
     eae:	29 9f       	mul	r18, r25
     eb0:	90 01       	movw	r18, r0
     eb2:	11 24       	eor	r1, r1
     eb4:	87 70       	andi	r24, 0x07	; 7
     eb6:	82 2b       	or	r24, r18
     eb8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
     ebc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
     ec0:	80 64       	ori	r24, 0x40	; 64
     ec2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
     ec6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
     eca:	86 fd       	sbrc	r24, 6
     ecc:	fc cf       	rjmp	.-8      	; 0xec6 <analogRead+0x34>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
     ece:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
	high = ADCH;
     ed2:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
     ed6:	90 e0       	ldi	r25, 0x00	; 0
}
     ed8:	92 2b       	or	r25, r18
     eda:	08 95       	ret

00000edc <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	fc 01       	movw	r30, r24
     ee0:	31 97       	sbiw	r30, 0x01	; 1
     ee2:	e2 31       	cpi	r30, 0x12	; 18
     ee4:	f1 05       	cpc	r31, r1
     ee6:	08 f0       	brcs	.+2      	; 0xeea <turnOffPWM+0xe>
     ee8:	4d c0       	rjmp	.+154    	; 0xf84 <turnOffPWM+0xa8>
     eea:	88 27       	eor	r24, r24
     eec:	e7 58       	subi	r30, 0x87	; 135
     eee:	ff 4f       	sbci	r31, 0xFF	; 255
     ef0:	8f 4f       	sbci	r24, 0xFF	; 255
     ef2:	ea c0       	rjmp	.+468    	; 0x10c8 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     ef4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     ef8:	8f 77       	andi	r24, 0x7F	; 127
     efa:	03 c0       	rjmp	.+6      	; 0xf02 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     efc:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     f00:	8f 7d       	andi	r24, 0xDF	; 223
     f02:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     f06:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
     f08:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     f0c:	87 7f       	andi	r24, 0xF7	; 247
     f0e:	f9 cf       	rjmp	.-14     	; 0xf02 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     f10:	84 b5       	in	r24, 0x24	; 36
     f12:	8f 77       	andi	r24, 0x7F	; 127
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     f16:	84 b5       	in	r24, 0x24	; 36
     f18:	8f 7d       	andi	r24, 0xDF	; 223
     f1a:	84 bd       	out	0x24, r24	; 36
     f1c:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     f1e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
     f22:	8f 77       	andi	r24, 0x7F	; 127
     f24:	03 c0       	rjmp	.+6      	; 0xf2c <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     f26:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
     f2a:	8f 7d       	andi	r24, 0xDF	; 223
     f2c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
     f30:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
     f32:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
     f36:	8f 77       	andi	r24, 0x7F	; 127
     f38:	07 c0       	rjmp	.+14     	; 0xf48 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
     f3a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
     f3e:	8f 7d       	andi	r24, 0xDF	; 223
     f40:	03 c0       	rjmp	.+6      	; 0xf48 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
     f42:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
     f46:	87 7f       	andi	r24, 0xF7	; 247
     f48:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
     f4c:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
     f4e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     f52:	8f 77       	andi	r24, 0x7F	; 127
     f54:	07 c0       	rjmp	.+14     	; 0xf64 <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
     f56:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     f5a:	8f 7d       	andi	r24, 0xDF	; 223
     f5c:	03 c0       	rjmp	.+6      	; 0xf64 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
     f5e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     f62:	87 7f       	andi	r24, 0xF7	; 247
     f64:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     f68:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
     f6a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
     f6e:	8f 77       	andi	r24, 0x7F	; 127
     f70:	07 c0       	rjmp	.+14     	; 0xf80 <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
     f72:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
     f76:	8f 7d       	andi	r24, 0xDF	; 223
     f78:	03 c0       	rjmp	.+6      	; 0xf80 <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
     f7a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
     f7e:	87 7f       	andi	r24, 0xF7	; 247
     f80:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
     f84:	08 95       	ret

00000f86 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     f86:	cf 93       	push	r28
     f88:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	fc 01       	movw	r30, r24
     f8e:	e4 5a       	subi	r30, 0xA4	; 164
     f90:	fe 4f       	sbci	r31, 0xFE	; 254
     f92:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     f94:	fc 01       	movw	r30, r24
     f96:	ee 55       	subi	r30, 0x5E	; 94
     f98:	fe 4f       	sbci	r31, 0xFE	; 254
     f9a:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     f9c:	88 23       	and	r24, r24
     f9e:	61 f1       	breq	.+88     	; 0xff8 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	88 0f       	add	r24, r24
     fa4:	99 1f       	adc	r25, r25
     fa6:	fc 01       	movw	r30, r24
     fa8:	ee 5f       	subi	r30, 0xFE	; 254
     faa:	fd 4f       	sbci	r31, 0xFD	; 253
     fac:	c5 91       	lpm	r28, Z+
     fae:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
     fb0:	fc 01       	movw	r30, r24
     fb2:	e8 51       	subi	r30, 0x18	; 24
     fb4:	fe 4f       	sbci	r31, 0xFE	; 254
     fb6:	a5 91       	lpm	r26, Z+
     fb8:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
     fba:	61 11       	cpse	r22, r1
     fbc:	09 c0       	rjmp	.+18     	; 0xfd0 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
     fbe:	9f b7       	in	r25, 0x3f	; 63
                cli();
     fc0:	f8 94       	cli
		*reg &= ~bit;
     fc2:	88 81       	ld	r24, Y
     fc4:	20 95       	com	r18
     fc6:	82 23       	and	r24, r18
     fc8:	88 83       	st	Y, r24
		*out &= ~bit;
     fca:	ec 91       	ld	r30, X
     fcc:	2e 23       	and	r18, r30
     fce:	0b c0       	rjmp	.+22     	; 0xfe6 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     fd0:	62 30       	cpi	r22, 0x02	; 2
     fd2:	61 f4       	brne	.+24     	; 0xfec <pinMode+0x66>
		uint8_t oldSREG = SREG;
     fd4:	9f b7       	in	r25, 0x3f	; 63
                cli();
     fd6:	f8 94       	cli
		*reg &= ~bit;
     fd8:	88 81       	ld	r24, Y
     fda:	32 2f       	mov	r19, r18
     fdc:	30 95       	com	r19
     fde:	83 23       	and	r24, r19
     fe0:	88 83       	st	Y, r24
		*out |= bit;
     fe2:	ec 91       	ld	r30, X
     fe4:	2e 2b       	or	r18, r30
     fe6:	2c 93       	st	X, r18
		SREG = oldSREG;
     fe8:	9f bf       	out	0x3f, r25	; 63
     fea:	06 c0       	rjmp	.+12     	; 0xff8 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
     fec:	8f b7       	in	r24, 0x3f	; 63
                cli();
     fee:	f8 94       	cli
		*reg |= bit;
     ff0:	e8 81       	ld	r30, Y
     ff2:	2e 2b       	or	r18, r30
     ff4:	28 83       	st	Y, r18
		SREG = oldSREG;
     ff6:	8f bf       	out	0x3f, r24	; 63
	}
}
     ff8:	df 91       	pop	r29
     ffa:	cf 91       	pop	r28
     ffc:	08 95       	ret

00000ffe <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     ffe:	1f 93       	push	r17
    1000:	cf 93       	push	r28
    1002:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	f9 01       	movw	r30, r18
    100a:	ea 5e       	subi	r30, 0xEA	; 234
    100c:	fe 4f       	sbci	r31, 0xFE	; 254
    100e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1010:	f9 01       	movw	r30, r18
    1012:	e4 5a       	subi	r30, 0xA4	; 164
    1014:	fe 4f       	sbci	r31, 0xFE	; 254
    1016:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1018:	f9 01       	movw	r30, r18
    101a:	ee 55       	subi	r30, 0x5E	; 94
    101c:	fe 4f       	sbci	r31, 0xFE	; 254
    101e:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1020:	cc 23       	and	r28, r28
    1022:	b9 f0       	breq	.+46     	; 0x1052 <digitalWrite+0x54>
    1024:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1026:	81 11       	cpse	r24, r1

	out = portOutputRegister(port);
    1028:	59 df       	rcall	.-334    	; 0xedc <turnOffPWM>
    102a:	ec 2f       	mov	r30, r28
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	ee 0f       	add	r30, r30
    1030:	ff 1f       	adc	r31, r31
    1032:	e8 51       	subi	r30, 0x18	; 24
    1034:	fe 4f       	sbci	r31, 0xFE	; 254
    1036:	a5 91       	lpm	r26, Z+

	uint8_t oldSREG = SREG;
    1038:	b4 91       	lpm	r27, Z
	cli();
    103a:	9f b7       	in	r25, 0x3f	; 63

	if (val == LOW) {
    103c:	f8 94       	cli
    103e:	11 11       	cpse	r17, r1
		*out &= ~bit;
    1040:	04 c0       	rjmp	.+8      	; 0x104a <digitalWrite+0x4c>
    1042:	8c 91       	ld	r24, X
    1044:	d0 95       	com	r29
    1046:	d8 23       	and	r29, r24
	} else {
		*out |= bit;
    1048:	02 c0       	rjmp	.+4      	; 0x104e <digitalWrite+0x50>
    104a:	ec 91       	ld	r30, X
    104c:	de 2b       	or	r29, r30
	}

	SREG = oldSREG;
    104e:	dc 93       	st	X, r29
}
    1050:	9f bf       	out	0x3f, r25	; 63
    1052:	df 91       	pop	r29
    1054:	cf 91       	pop	r28
    1056:	1f 91       	pop	r17
    1058:	08 95       	ret

0000105a <shiftOut>:
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
    105a:	bf 92       	push	r11
    105c:	cf 92       	push	r12
    105e:	df 92       	push	r13
    1060:	ef 92       	push	r14
    1062:	ff 92       	push	r15
    1064:	0f 93       	push	r16
    1066:	1f 93       	push	r17
    1068:	cf 93       	push	r28
    106a:	df 93       	push	r29
    106c:	c8 2e       	mov	r12, r24
    106e:	d6 2e       	mov	r13, r22
    1070:	b4 2e       	mov	r11, r20
    1072:	c7 e0       	ldi	r28, 0x07	; 7
    1074:	d0 e0       	ldi	r29, 0x00	; 0
    1076:	02 2f       	mov	r16, r18
    1078:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
			digitalWrite(dataPin, !!(val & (1 << i)));
    107a:	87 e0       	ldi	r24, 0x07	; 7
    107c:	e8 2e       	mov	r14, r24
    107e:	f1 2c       	mov	r15, r1
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
    1080:	b1 10       	cpse	r11, r1
    1082:	05 c0       	rjmp	.+10     	; 0x108e <shiftOut+0x34>
			digitalWrite(dataPin, !!(val & (1 << i)));
    1084:	c7 01       	movw	r24, r14
    1086:	8c 1b       	sub	r24, r28
    1088:	9d 0b       	sbc	r25, r29
    108a:	b8 01       	movw	r22, r16
    108c:	02 c0       	rjmp	.+4      	; 0x1092 <shiftOut+0x38>
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
    108e:	b8 01       	movw	r22, r16
    1090:	8c 2f       	mov	r24, r28
    1092:	02 c0       	rjmp	.+4      	; 0x1098 <shiftOut+0x3e>
    1094:	75 95       	asr	r23
    1096:	67 95       	ror	r22
    1098:	8a 95       	dec	r24
    109a:	e2 f7       	brpl	.-8      	; 0x1094 <shiftOut+0x3a>
    109c:	61 70       	andi	r22, 0x01	; 1
    109e:	8c 2d       	mov	r24, r12
    10a0:	ae df       	rcall	.-164    	; 0xffe <digitalWrite>
			
		digitalWrite(clockPin, HIGH);
    10a2:	61 e0       	ldi	r22, 0x01	; 1
    10a4:	8d 2d       	mov	r24, r13
		digitalWrite(clockPin, LOW);		
    10a6:	ab df       	rcall	.-170    	; 0xffe <digitalWrite>
    10a8:	60 e0       	ldi	r22, 0x00	; 0
    10aa:	8d 2d       	mov	r24, r13
    10ac:	a8 df       	rcall	.-176    	; 0xffe <digitalWrite>
    10ae:	21 97       	sbiw	r28, 0x01	; 1
	}
}
    10b0:	38 f7       	brcc	.-50     	; 0x1080 <shiftOut+0x26>
    10b2:	df 91       	pop	r29
    10b4:	cf 91       	pop	r28
    10b6:	1f 91       	pop	r17
    10b8:	0f 91       	pop	r16
    10ba:	ff 90       	pop	r15
    10bc:	ef 90       	pop	r14
    10be:	df 90       	pop	r13
    10c0:	cf 90       	pop	r12
    10c2:	bf 90       	pop	r11
    10c4:	08 95       	ret

000010c6 <yield>:
    10c6:	08 95       	ret

000010c8 <__tablejump2__>:
    10c8:	ee 0f       	add	r30, r30
    10ca:	ff 1f       	adc	r31, r31
    10cc:	88 1f       	adc	r24, r24
    10ce:	8b bf       	out	0x3b, r24	; 59
    10d0:	07 90       	elpm	r0, Z+
    10d2:	f6 91       	elpm	r31, Z
    10d4:	e0 2d       	mov	r30, r0
    10d6:	19 94       	eijmp

000010d8 <malloc>:
    10d8:	0f 93       	push	r16
    10da:	1f 93       	push	r17
    10dc:	cf 93       	push	r28
    10de:	df 93       	push	r29
    10e0:	82 30       	cpi	r24, 0x02	; 2
    10e2:	91 05       	cpc	r25, r1
    10e4:	10 f4       	brcc	.+4      	; 0x10ea <malloc+0x12>
    10e6:	82 e0       	ldi	r24, 0x02	; 2
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	e0 91 73 02 	lds	r30, 0x0273	; 0x800273 <__flp>
    10ee:	f0 91 74 02 	lds	r31, 0x0274	; 0x800274 <__flp+0x1>
    10f2:	20 e0       	ldi	r18, 0x00	; 0
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	a0 e0       	ldi	r26, 0x00	; 0
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	30 97       	sbiw	r30, 0x00	; 0
    10fc:	19 f1       	breq	.+70     	; 0x1144 <malloc+0x6c>
    10fe:	40 81       	ld	r20, Z
    1100:	51 81       	ldd	r21, Z+1	; 0x01
    1102:	02 81       	ldd	r16, Z+2	; 0x02
    1104:	13 81       	ldd	r17, Z+3	; 0x03
    1106:	48 17       	cp	r20, r24
    1108:	59 07       	cpc	r21, r25
    110a:	c8 f0       	brcs	.+50     	; 0x113e <malloc+0x66>
    110c:	84 17       	cp	r24, r20
    110e:	95 07       	cpc	r25, r21
    1110:	69 f4       	brne	.+26     	; 0x112c <malloc+0x54>
    1112:	10 97       	sbiw	r26, 0x00	; 0
    1114:	31 f0       	breq	.+12     	; 0x1122 <malloc+0x4a>
    1116:	12 96       	adiw	r26, 0x02	; 2
    1118:	0c 93       	st	X, r16
    111a:	12 97       	sbiw	r26, 0x02	; 2
    111c:	13 96       	adiw	r26, 0x03	; 3
    111e:	1c 93       	st	X, r17
    1120:	27 c0       	rjmp	.+78     	; 0x1170 <malloc+0x98>
    1122:	00 93 73 02 	sts	0x0273, r16	; 0x800273 <__flp>
    1126:	10 93 74 02 	sts	0x0274, r17	; 0x800274 <__flp+0x1>
    112a:	22 c0       	rjmp	.+68     	; 0x1170 <malloc+0x98>
    112c:	21 15       	cp	r18, r1
    112e:	31 05       	cpc	r19, r1
    1130:	19 f0       	breq	.+6      	; 0x1138 <malloc+0x60>
    1132:	42 17       	cp	r20, r18
    1134:	53 07       	cpc	r21, r19
    1136:	18 f4       	brcc	.+6      	; 0x113e <malloc+0x66>
    1138:	9a 01       	movw	r18, r20
    113a:	bd 01       	movw	r22, r26
    113c:	ef 01       	movw	r28, r30
    113e:	df 01       	movw	r26, r30
    1140:	f8 01       	movw	r30, r16
    1142:	db cf       	rjmp	.-74     	; 0x10fa <malloc+0x22>
    1144:	21 15       	cp	r18, r1
    1146:	31 05       	cpc	r19, r1
    1148:	f9 f0       	breq	.+62     	; 0x1188 <malloc+0xb0>
    114a:	28 1b       	sub	r18, r24
    114c:	39 0b       	sbc	r19, r25
    114e:	24 30       	cpi	r18, 0x04	; 4
    1150:	31 05       	cpc	r19, r1
    1152:	80 f4       	brcc	.+32     	; 0x1174 <malloc+0x9c>
    1154:	8a 81       	ldd	r24, Y+2	; 0x02
    1156:	9b 81       	ldd	r25, Y+3	; 0x03
    1158:	61 15       	cp	r22, r1
    115a:	71 05       	cpc	r23, r1
    115c:	21 f0       	breq	.+8      	; 0x1166 <malloc+0x8e>
    115e:	fb 01       	movw	r30, r22
    1160:	93 83       	std	Z+3, r25	; 0x03
    1162:	82 83       	std	Z+2, r24	; 0x02
    1164:	04 c0       	rjmp	.+8      	; 0x116e <malloc+0x96>
    1166:	90 93 74 02 	sts	0x0274, r25	; 0x800274 <__flp+0x1>
    116a:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <__flp>
    116e:	fe 01       	movw	r30, r28
    1170:	32 96       	adiw	r30, 0x02	; 2
    1172:	44 c0       	rjmp	.+136    	; 0x11fc <malloc+0x124>
    1174:	fe 01       	movw	r30, r28
    1176:	e2 0f       	add	r30, r18
    1178:	f3 1f       	adc	r31, r19
    117a:	81 93       	st	Z+, r24
    117c:	91 93       	st	Z+, r25
    117e:	22 50       	subi	r18, 0x02	; 2
    1180:	31 09       	sbc	r19, r1
    1182:	39 83       	std	Y+1, r19	; 0x01
    1184:	28 83       	st	Y, r18
    1186:	3a c0       	rjmp	.+116    	; 0x11fc <malloc+0x124>
    1188:	20 91 71 02 	lds	r18, 0x0271	; 0x800271 <__brkval>
    118c:	30 91 72 02 	lds	r19, 0x0272	; 0x800272 <__brkval+0x1>
    1190:	23 2b       	or	r18, r19
    1192:	41 f4       	brne	.+16     	; 0x11a4 <malloc+0xcc>
    1194:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    1198:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    119c:	30 93 72 02 	sts	0x0272, r19	; 0x800272 <__brkval+0x1>
    11a0:	20 93 71 02 	sts	0x0271, r18	; 0x800271 <__brkval>
    11a4:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    11a8:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    11ac:	21 15       	cp	r18, r1
    11ae:	31 05       	cpc	r19, r1
    11b0:	41 f4       	brne	.+16     	; 0x11c2 <malloc+0xea>
    11b2:	2d b7       	in	r18, 0x3d	; 61
    11b4:	3e b7       	in	r19, 0x3e	; 62
    11b6:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    11ba:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    11be:	24 1b       	sub	r18, r20
    11c0:	35 0b       	sbc	r19, r21
    11c2:	e0 91 71 02 	lds	r30, 0x0271	; 0x800271 <__brkval>
    11c6:	f0 91 72 02 	lds	r31, 0x0272	; 0x800272 <__brkval+0x1>
    11ca:	e2 17       	cp	r30, r18
    11cc:	f3 07       	cpc	r31, r19
    11ce:	a0 f4       	brcc	.+40     	; 0x11f8 <malloc+0x120>
    11d0:	2e 1b       	sub	r18, r30
    11d2:	3f 0b       	sbc	r19, r31
    11d4:	28 17       	cp	r18, r24
    11d6:	39 07       	cpc	r19, r25
    11d8:	78 f0       	brcs	.+30     	; 0x11f8 <malloc+0x120>
    11da:	ac 01       	movw	r20, r24
    11dc:	4e 5f       	subi	r20, 0xFE	; 254
    11de:	5f 4f       	sbci	r21, 0xFF	; 255
    11e0:	24 17       	cp	r18, r20
    11e2:	35 07       	cpc	r19, r21
    11e4:	48 f0       	brcs	.+18     	; 0x11f8 <malloc+0x120>
    11e6:	4e 0f       	add	r20, r30
    11e8:	5f 1f       	adc	r21, r31
    11ea:	50 93 72 02 	sts	0x0272, r21	; 0x800272 <__brkval+0x1>
    11ee:	40 93 71 02 	sts	0x0271, r20	; 0x800271 <__brkval>
    11f2:	81 93       	st	Z+, r24
    11f4:	91 93       	st	Z+, r25
    11f6:	02 c0       	rjmp	.+4      	; 0x11fc <malloc+0x124>
    11f8:	e0 e0       	ldi	r30, 0x00	; 0
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	cf 01       	movw	r24, r30
    11fe:	df 91       	pop	r29
    1200:	cf 91       	pop	r28
    1202:	1f 91       	pop	r17
    1204:	0f 91       	pop	r16
    1206:	08 95       	ret

00001208 <free>:
    1208:	cf 93       	push	r28
    120a:	df 93       	push	r29
    120c:	00 97       	sbiw	r24, 0x00	; 0
    120e:	09 f4       	brne	.+2      	; 0x1212 <free+0xa>
    1210:	81 c0       	rjmp	.+258    	; 0x1314 <free+0x10c>
    1212:	fc 01       	movw	r30, r24
    1214:	32 97       	sbiw	r30, 0x02	; 2
    1216:	13 82       	std	Z+3, r1	; 0x03
    1218:	12 82       	std	Z+2, r1	; 0x02
    121a:	a0 91 73 02 	lds	r26, 0x0273	; 0x800273 <__flp>
    121e:	b0 91 74 02 	lds	r27, 0x0274	; 0x800274 <__flp+0x1>
    1222:	10 97       	sbiw	r26, 0x00	; 0
    1224:	81 f4       	brne	.+32     	; 0x1246 <free+0x3e>
    1226:	20 81       	ld	r18, Z
    1228:	31 81       	ldd	r19, Z+1	; 0x01
    122a:	82 0f       	add	r24, r18
    122c:	93 1f       	adc	r25, r19
    122e:	20 91 71 02 	lds	r18, 0x0271	; 0x800271 <__brkval>
    1232:	30 91 72 02 	lds	r19, 0x0272	; 0x800272 <__brkval+0x1>
    1236:	28 17       	cp	r18, r24
    1238:	39 07       	cpc	r19, r25
    123a:	51 f5       	brne	.+84     	; 0x1290 <free+0x88>
    123c:	f0 93 72 02 	sts	0x0272, r31	; 0x800272 <__brkval+0x1>
    1240:	e0 93 71 02 	sts	0x0271, r30	; 0x800271 <__brkval>
    1244:	67 c0       	rjmp	.+206    	; 0x1314 <free+0x10c>
    1246:	ed 01       	movw	r28, r26
    1248:	20 e0       	ldi	r18, 0x00	; 0
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	ce 17       	cp	r28, r30
    124e:	df 07       	cpc	r29, r31
    1250:	40 f4       	brcc	.+16     	; 0x1262 <free+0x5a>
    1252:	4a 81       	ldd	r20, Y+2	; 0x02
    1254:	5b 81       	ldd	r21, Y+3	; 0x03
    1256:	9e 01       	movw	r18, r28
    1258:	41 15       	cp	r20, r1
    125a:	51 05       	cpc	r21, r1
    125c:	f1 f0       	breq	.+60     	; 0x129a <free+0x92>
    125e:	ea 01       	movw	r28, r20
    1260:	f5 cf       	rjmp	.-22     	; 0x124c <free+0x44>
    1262:	d3 83       	std	Z+3, r29	; 0x03
    1264:	c2 83       	std	Z+2, r28	; 0x02
    1266:	40 81       	ld	r20, Z
    1268:	51 81       	ldd	r21, Z+1	; 0x01
    126a:	84 0f       	add	r24, r20
    126c:	95 1f       	adc	r25, r21
    126e:	c8 17       	cp	r28, r24
    1270:	d9 07       	cpc	r29, r25
    1272:	59 f4       	brne	.+22     	; 0x128a <free+0x82>
    1274:	88 81       	ld	r24, Y
    1276:	99 81       	ldd	r25, Y+1	; 0x01
    1278:	84 0f       	add	r24, r20
    127a:	95 1f       	adc	r25, r21
    127c:	02 96       	adiw	r24, 0x02	; 2
    127e:	91 83       	std	Z+1, r25	; 0x01
    1280:	80 83       	st	Z, r24
    1282:	8a 81       	ldd	r24, Y+2	; 0x02
    1284:	9b 81       	ldd	r25, Y+3	; 0x03
    1286:	93 83       	std	Z+3, r25	; 0x03
    1288:	82 83       	std	Z+2, r24	; 0x02
    128a:	21 15       	cp	r18, r1
    128c:	31 05       	cpc	r19, r1
    128e:	29 f4       	brne	.+10     	; 0x129a <free+0x92>
    1290:	f0 93 74 02 	sts	0x0274, r31	; 0x800274 <__flp+0x1>
    1294:	e0 93 73 02 	sts	0x0273, r30	; 0x800273 <__flp>
    1298:	3d c0       	rjmp	.+122    	; 0x1314 <free+0x10c>
    129a:	e9 01       	movw	r28, r18
    129c:	fb 83       	std	Y+3, r31	; 0x03
    129e:	ea 83       	std	Y+2, r30	; 0x02
    12a0:	49 91       	ld	r20, Y+
    12a2:	59 91       	ld	r21, Y+
    12a4:	c4 0f       	add	r28, r20
    12a6:	d5 1f       	adc	r29, r21
    12a8:	ec 17       	cp	r30, r28
    12aa:	fd 07       	cpc	r31, r29
    12ac:	61 f4       	brne	.+24     	; 0x12c6 <free+0xbe>
    12ae:	80 81       	ld	r24, Z
    12b0:	91 81       	ldd	r25, Z+1	; 0x01
    12b2:	84 0f       	add	r24, r20
    12b4:	95 1f       	adc	r25, r21
    12b6:	02 96       	adiw	r24, 0x02	; 2
    12b8:	e9 01       	movw	r28, r18
    12ba:	99 83       	std	Y+1, r25	; 0x01
    12bc:	88 83       	st	Y, r24
    12be:	82 81       	ldd	r24, Z+2	; 0x02
    12c0:	93 81       	ldd	r25, Z+3	; 0x03
    12c2:	9b 83       	std	Y+3, r25	; 0x03
    12c4:	8a 83       	std	Y+2, r24	; 0x02
    12c6:	e0 e0       	ldi	r30, 0x00	; 0
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	12 96       	adiw	r26, 0x02	; 2
    12cc:	8d 91       	ld	r24, X+
    12ce:	9c 91       	ld	r25, X
    12d0:	13 97       	sbiw	r26, 0x03	; 3
    12d2:	00 97       	sbiw	r24, 0x00	; 0
    12d4:	19 f0       	breq	.+6      	; 0x12dc <free+0xd4>
    12d6:	fd 01       	movw	r30, r26
    12d8:	dc 01       	movw	r26, r24
    12da:	f7 cf       	rjmp	.-18     	; 0x12ca <free+0xc2>
    12dc:	8d 91       	ld	r24, X+
    12de:	9c 91       	ld	r25, X
    12e0:	11 97       	sbiw	r26, 0x01	; 1
    12e2:	9d 01       	movw	r18, r26
    12e4:	2e 5f       	subi	r18, 0xFE	; 254
    12e6:	3f 4f       	sbci	r19, 0xFF	; 255
    12e8:	82 0f       	add	r24, r18
    12ea:	93 1f       	adc	r25, r19
    12ec:	20 91 71 02 	lds	r18, 0x0271	; 0x800271 <__brkval>
    12f0:	30 91 72 02 	lds	r19, 0x0272	; 0x800272 <__brkval+0x1>
    12f4:	28 17       	cp	r18, r24
    12f6:	39 07       	cpc	r19, r25
    12f8:	69 f4       	brne	.+26     	; 0x1314 <free+0x10c>
    12fa:	30 97       	sbiw	r30, 0x00	; 0
    12fc:	29 f4       	brne	.+10     	; 0x1308 <free+0x100>
    12fe:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <__flp+0x1>
    1302:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <__flp>
    1306:	02 c0       	rjmp	.+4      	; 0x130c <free+0x104>
    1308:	13 82       	std	Z+3, r1	; 0x03
    130a:	12 82       	std	Z+2, r1	; 0x02
    130c:	b0 93 72 02 	sts	0x0272, r27	; 0x800272 <__brkval+0x1>
    1310:	a0 93 71 02 	sts	0x0271, r26	; 0x800271 <__brkval>
    1314:	df 91       	pop	r29
    1316:	cf 91       	pop	r28
    1318:	08 95       	ret

0000131a <_exit>:
    131a:	f8 94       	cli

0000131c <__stop_program>:
    131c:	ff cf       	rjmp	.-2      	; 0x131c <__stop_program>
