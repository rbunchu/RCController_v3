
RCController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009c  00800200  00001984  00001a18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001984  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b8  0080029c  0080029c  00001ab4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001ab4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ae4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005f0  00000000  00000000  00001b24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c500  00000000  00000000  00002114  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002e2e  00000000  00000000  0000e614  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003697  00000000  00000000  00011442  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001238  00000000  00000000  00014adc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002f45  00000000  00000000  00015d14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005fd5  00000000  00000000  00018c59  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000570  00000000  00000000  0001ec2e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0e c1       	rjmp	.+540    	; 0x21e <__ctors_end>
       2:	00 00       	nop
       4:	ea c7       	rjmp	.+4052   	; 0xfda <__vector_1>
       6:	00 00       	nop
       8:	0c 94 18 08 	jmp	0x1030	; 0x1030 <__vector_2>
       c:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__vector_3>
      10:	0c 94 6e 08 	jmp	0x10dc	; 0x10dc <__vector_4>
      14:	0c 94 99 08 	jmp	0x1132	; 0x1132 <__vector_5>
      18:	0c 94 c4 08 	jmp	0x1188	; 0x1188 <__vector_6>
      1c:	0c 94 ef 08 	jmp	0x11de	; 0x11de <__vector_7>
      20:	0c 94 1a 09 	jmp	0x1234	; 0x1234 <__vector_8>
      24:	2c c1       	rjmp	.+600    	; 0x27e <__bad_interrupt>
      26:	00 00       	nop
      28:	2a c1       	rjmp	.+596    	; 0x27e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	28 c1       	rjmp	.+592    	; 0x27e <__bad_interrupt>
      2e:	00 00       	nop
      30:	26 c1       	rjmp	.+588    	; 0x27e <__bad_interrupt>
      32:	00 00       	nop
      34:	24 c1       	rjmp	.+584    	; 0x27e <__bad_interrupt>
      36:	00 00       	nop
      38:	22 c1       	rjmp	.+580    	; 0x27e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	20 c1       	rjmp	.+576    	; 0x27e <__bad_interrupt>
      3e:	00 00       	nop
      40:	1e c1       	rjmp	.+572    	; 0x27e <__bad_interrupt>
      42:	00 00       	nop
      44:	1c c1       	rjmp	.+568    	; 0x27e <__bad_interrupt>
      46:	00 00       	nop
      48:	1a c1       	rjmp	.+564    	; 0x27e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	18 c1       	rjmp	.+560    	; 0x27e <__bad_interrupt>
      4e:	00 00       	nop
      50:	16 c1       	rjmp	.+556    	; 0x27e <__bad_interrupt>
      52:	00 00       	nop
      54:	14 c1       	rjmp	.+552    	; 0x27e <__bad_interrupt>
      56:	00 00       	nop
      58:	12 c1       	rjmp	.+548    	; 0x27e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 45 09 	jmp	0x128a	; 0x128a <__vector_23>
      60:	0e c1       	rjmp	.+540    	; 0x27e <__bad_interrupt>
      62:	00 00       	nop
      64:	52 c6       	rjmp	.+3236   	; 0xd0a <__vector_25>
      66:	00 00       	nop
      68:	86 c6       	rjmp	.+3340   	; 0xd76 <__vector_26>
      6a:	00 00       	nop
      6c:	08 c1       	rjmp	.+528    	; 0x27e <__bad_interrupt>
      6e:	00 00       	nop
      70:	06 c1       	rjmp	.+524    	; 0x27e <__bad_interrupt>
      72:	00 00       	nop
      74:	04 c1       	rjmp	.+520    	; 0x27e <__bad_interrupt>
      76:	00 00       	nop
      78:	02 c1       	rjmp	.+516    	; 0x27e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	00 c1       	rjmp	.+512    	; 0x27e <__bad_interrupt>
      7e:	00 00       	nop
      80:	fe c0       	rjmp	.+508    	; 0x27e <__bad_interrupt>
      82:	00 00       	nop
      84:	fc c0       	rjmp	.+504    	; 0x27e <__bad_interrupt>
      86:	00 00       	nop
      88:	fa c0       	rjmp	.+500    	; 0x27e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f8 c0       	rjmp	.+496    	; 0x27e <__bad_interrupt>
      8e:	00 00       	nop
      90:	f6 c0       	rjmp	.+492    	; 0x27e <__bad_interrupt>
      92:	00 00       	nop
      94:	f4 c0       	rjmp	.+488    	; 0x27e <__bad_interrupt>
      96:	00 00       	nop
      98:	f2 c0       	rjmp	.+484    	; 0x27e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	f0 c0       	rjmp	.+480    	; 0x27e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	ee c0       	rjmp	.+476    	; 0x27e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	ec c0       	rjmp	.+472    	; 0x27e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ea c0       	rjmp	.+468    	; 0x27e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	e8 c0       	rjmp	.+464    	; 0x27e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	e6 c0       	rjmp	.+460    	; 0x27e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	e4 c0       	rjmp	.+456    	; 0x27e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	e2 c0       	rjmp	.+452    	; 0x27e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	e0 c0       	rjmp	.+448    	; 0x27e <__bad_interrupt>
      be:	00 00       	nop
      c0:	de c0       	rjmp	.+444    	; 0x27e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	dc c0       	rjmp	.+440    	; 0x27e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	da c0       	rjmp	.+436    	; 0x27e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	d8 c0       	rjmp	.+432    	; 0x27e <__bad_interrupt>
      ce:	00 00       	nop
      d0:	d6 c0       	rjmp	.+428    	; 0x27e <__bad_interrupt>
      d2:	00 00       	nop
      d4:	d4 c0       	rjmp	.+424    	; 0x27e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	d2 c0       	rjmp	.+420    	; 0x27e <__bad_interrupt>
      da:	00 00       	nop
      dc:	d0 c0       	rjmp	.+416    	; 0x27e <__bad_interrupt>
      de:	00 00       	nop
      e0:	ce c0       	rjmp	.+412    	; 0x27e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	c7 07       	cpc	r28, r23
      e6:	91 07       	cpc	r25, r17
      e8:	99 07       	cpc	r25, r25
      ea:	a5 07       	cpc	r26, r21
      ec:	b2 07       	cpc	r27, r18
      ee:	d3 07       	cpc	r29, r19
      f0:	e0 07       	cpc	r30, r16
      f2:	99 0a       	sbc	r9, r25
      f4:	9c 0a       	sbc	r9, r28
      f6:	8b 0a       	sbc	r8, r27
      f8:	8f 0a       	sbc	r8, r31
      fa:	95 0a       	sbc	r9, r21
      fc:	d3 0a       	sbc	r13, r19
      fe:	a0 0a       	sbc	r10, r16
     100:	a4 0a       	sbc	r10, r20
     102:	aa 0a       	sbc	r10, r26
     104:	ae 0a       	sbc	r10, r30
     106:	b2 0a       	sbc	r11, r18
     108:	b8 0a       	sbc	r11, r24
     10a:	bc 0a       	sbc	r11, r28
     10c:	c0 0a       	sbc	r12, r16
     10e:	d3 0a       	sbc	r13, r19
     110:	c6 0a       	sbc	r12, r22
     112:	ca 0a       	sbc	r12, r26
     114:	ce 0a       	sbc	r12, r30

00000116 <__trampolines_end>:
     116:	00 00       	nop
     118:	0a 0b       	sbc	r16, r26
     11a:	02 09       	sbc	r16, r2
     11c:	0c 0d       	add	r16, r12
     11e:	0e 08       	sbc	r0, r14
     120:	07 03       	mulsu	r16, r23
     122:	04 01       	movw	r0, r8
	...
     140:	00 00       	nop
     142:	12 11       	cpse	r17, r2
     144:	10 00       	.word	0x0010	; ????
	...

0000015c <digital_pin_to_bit_mask_PGM>:
     15c:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     16c:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     17c:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     18c:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     19c:	04 08 10 20 40 80                                   ... @.

000001a2 <digital_pin_to_port_PGM>:
     1a2:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1b2:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1c2:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1d2:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1e2:	0b 0b 0b 0b 0b 0b                                   ......

000001e8 <port_to_output_PGM>:
     1e8:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     1f8:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000202 <port_to_mode_PGM>:
     202:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     212:	01 01 00 00 04 01 07 01 0a 01                       ..........

0000021c <__ctors_start>:
     21c:	ed 06       	cpc	r14, r29

0000021e <__ctors_end>:
     21e:	11 24       	eor	r1, r1
     220:	1f be       	out	0x3f, r1	; 63
     222:	cf ef       	ldi	r28, 0xFF	; 255
     224:	d1 e2       	ldi	r29, 0x21	; 33
     226:	de bf       	out	0x3e, r29	; 62
     228:	cd bf       	out	0x3d, r28	; 61
     22a:	00 e0       	ldi	r16, 0x00	; 0
     22c:	0c bf       	out	0x3c, r16	; 60

0000022e <__do_copy_data>:
     22e:	12 e0       	ldi	r17, 0x02	; 2
     230:	a0 e0       	ldi	r26, 0x00	; 0
     232:	b2 e0       	ldi	r27, 0x02	; 2
     234:	e4 e8       	ldi	r30, 0x84	; 132
     236:	f9 e1       	ldi	r31, 0x19	; 25
     238:	00 e0       	ldi	r16, 0x00	; 0
     23a:	0b bf       	out	0x3b, r16	; 59
     23c:	02 c0       	rjmp	.+4      	; 0x242 <__do_copy_data+0x14>
     23e:	07 90       	elpm	r0, Z+
     240:	0d 92       	st	X+, r0
     242:	ac 39       	cpi	r26, 0x9C	; 156
     244:	b1 07       	cpc	r27, r17
     246:	d9 f7       	brne	.-10     	; 0x23e <__do_copy_data+0x10>

00000248 <__do_clear_bss>:
     248:	23 e0       	ldi	r18, 0x03	; 3
     24a:	ac e9       	ldi	r26, 0x9C	; 156
     24c:	b2 e0       	ldi	r27, 0x02	; 2
     24e:	01 c0       	rjmp	.+2      	; 0x252 <.do_clear_bss_start>

00000250 <.do_clear_bss_loop>:
     250:	1d 92       	st	X+, r1

00000252 <.do_clear_bss_start>:
     252:	a4 35       	cpi	r26, 0x54	; 84
     254:	b2 07       	cpc	r27, r18
     256:	e1 f7       	brne	.-8      	; 0x250 <.do_clear_bss_loop>

00000258 <__do_global_ctors>:
     258:	11 e0       	ldi	r17, 0x01	; 1
     25a:	cf e0       	ldi	r28, 0x0F	; 15
     25c:	d1 e0       	ldi	r29, 0x01	; 1
     25e:	00 e0       	ldi	r16, 0x00	; 0
     260:	06 c0       	rjmp	.+12     	; 0x26e <__do_global_ctors+0x16>
     262:	21 97       	sbiw	r28, 0x01	; 1
     264:	01 09       	sbc	r16, r1
     266:	80 2f       	mov	r24, r16
     268:	fe 01       	movw	r30, r28
     26a:	0e 94 97 0b 	call	0x172e	; 0x172e <__tablejump2__>
     26e:	ce 30       	cpi	r28, 0x0E	; 14
     270:	d1 07       	cpc	r29, r17
     272:	80 e0       	ldi	r24, 0x00	; 0
     274:	08 07       	cpc	r16, r24
     276:	a9 f7       	brne	.-22     	; 0x262 <__do_global_ctors+0xa>
     278:	de d5       	rcall	.+3004   	; 0xe36 <main>
     27a:	0c 94 c0 0c 	jmp	0x1980	; 0x1980 <_exit>

0000027e <__bad_interrupt>:
     27e:	c0 ce       	rjmp	.-640    	; 0x0 <__vectors>

00000280 <analog_joystick_create>:
#include <analog_joystick.h>


analog_joystick *analog_joystick_create(short analog_x, short analog_y, short action_button)
{
     280:	ef 92       	push	r14
     282:	ff 92       	push	r15
     284:	0f 93       	push	r16
     286:	1f 93       	push	r17
     288:	cf 93       	push	r28
     28a:	df 93       	push	r29
     28c:	7c 01       	movw	r14, r24
     28e:	8b 01       	movw	r16, r22
     290:	ea 01       	movw	r28, r20
  analog_joystick *joystick = malloc(sizeof(analog_joystick));
     292:	86 e0       	ldi	r24, 0x06	; 6
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	0e 94 9f 0b 	call	0x173e	; 0x173e <malloc>
  joystick->analog_x = analog_x;
     29a:	fc 01       	movw	r30, r24
     29c:	f1 82       	std	Z+1, r15	; 0x01
     29e:	e0 82       	st	Z, r14
  joystick->analog_y = analog_y;
     2a0:	13 83       	std	Z+3, r17	; 0x03
     2a2:	02 83       	std	Z+2, r16	; 0x02
  joystick->action_button = action_button;
     2a4:	d5 83       	std	Z+5, r29	; 0x05
     2a6:	c4 83       	std	Z+4, r28	; 0x04
  
  return joystick;
     2a8:	df 91       	pop	r29
     2aa:	cf 91       	pop	r28
     2ac:	1f 91       	pop	r17
     2ae:	0f 91       	pop	r16
     2b0:	ff 90       	pop	r15
     2b2:	ef 90       	pop	r14
     2b4:	08 95       	ret

000002b6 <controller_interrupt_joystick_left>:

/*
* Joystick left interrupt routine
*/
void controller_interrupt_joystick_left()
{
     2b6:	08 95       	ret

000002b8 <controller_interrupt_buttons>:
	attachInterrupt(self->joystic_left->action_button, controller_interrupt_joystick_left, RISING);
	attachInterrupt(self->joystic_right->action_button, controller_interrupt_joystick_right, RISING);
}

void controller_interrupt_buttons()
{
     2b8:	cf 93       	push	r28
     2ba:	df 93       	push	r29
     2bc:	00 d0       	rcall	.+0      	; 0x2be <controller_interrupt_buttons+0x6>
     2be:	1f 92       	push	r1
     2c0:	1f 92       	push	r1
     2c2:	cd b7       	in	r28, 0x3d	; 61
     2c4:	de b7       	in	r29, 0x3e	; 62
	#ifndef DEBUG
		hardware_serial_println(rc_controller.logger, "Interrupt");
	#endif

	int value = analogRead(rc_controller.switches->data_pin);
     2c6:	e0 91 42 03 	lds	r30, 0x0342	; 0x800342 <rc_controller>
     2ca:	f0 91 43 03 	lds	r31, 0x0343	; 0x800343 <rc_controller+0x1>
     2ce:	80 81       	ld	r24, Z
     2d0:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <analogRead>
	analog_button button = tact_switch_button_pressed(rc_controller.switches, value);
     2d4:	bc 01       	movw	r22, r24
     2d6:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <rc_controller>
     2da:	90 91 43 03 	lds	r25, 0x0343	; 0x800343 <rc_controller+0x1>
     2de:	78 d3       	rcall	.+1776   	; 0x9d0 <tact_switch_button_pressed>
	
	switch(button.type)
     2e0:	61 30       	cpi	r22, 0x01	; 1
     2e2:	61 f4       	brne	.+24     	; 0x2fc <controller_interrupt_buttons+0x44>
	{
		case LIGHT_BUTTON:
			light_control_leds_next(rc_controller.light_leds);
     2e4:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <rc_controller+0x2>
     2e8:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <rc_controller+0x3>
		case OPTIONS_BUTTON:
			break;
		default:
			break;
	}
}
     2ec:	0f 90       	pop	r0
     2ee:	0f 90       	pop	r0
     2f0:	0f 90       	pop	r0
     2f2:	0f 90       	pop	r0
     2f4:	0f 90       	pop	r0
     2f6:	df 91       	pop	r29
	analog_button button = tact_switch_button_pressed(rc_controller.switches, value);
	
	switch(button.type)
	{
		case LIGHT_BUTTON:
			light_control_leds_next(rc_controller.light_leds);
     2f8:	cf 91       	pop	r28
     2fa:	7f c1       	rjmp	.+766    	; 0x5fa <light_control_leds_next>
		case OPTIONS_BUTTON:
			break;
		default:
			break;
	}
}
     2fc:	0f 90       	pop	r0
     2fe:	0f 90       	pop	r0
     300:	0f 90       	pop	r0
     302:	0f 90       	pop	r0
     304:	0f 90       	pop	r0
     306:	df 91       	pop	r29
     308:	cf 91       	pop	r28
     30a:	08 95       	ret

0000030c <controller_interrupt_joystick_right>:
     30c:	08 95       	ret

0000030e <controller_initialize>:
#include <controller.h>

void controller_initialize(controller *self)
{
     30e:	ef 92       	push	r14
     310:	0f 93       	push	r16
     312:	cf 93       	push	r28
     314:	df 93       	push	r29
     316:	ec 01       	movw	r28, r24
	self->switches = tact_switch_board_create(1, 2);
     318:	62 e0       	ldi	r22, 0x02	; 2
     31a:	81 e0       	ldi	r24, 0x01	; 1
     31c:	20 d3       	rcall	.+1600   	; 0x95e <tact_switch_board_create>
     31e:	99 83       	std	Y+1, r25	; 0x01
     320:	88 83       	st	Y, r24
	self->leds = led_shift_register_create(53, 49, 51, 47);	
     322:	2f e2       	ldi	r18, 0x2F	; 47
     324:	30 e0       	ldi	r19, 0x00	; 0
     326:	43 e3       	ldi	r20, 0x33	; 51
     328:	50 e0       	ldi	r21, 0x00	; 0
     32a:	61 e3       	ldi	r22, 0x31	; 49
     32c:	70 e0       	ldi	r23, 0x00	; 0
     32e:	85 e3       	ldi	r24, 0x35	; 53
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	c7 d0       	rcall	.+398    	; 0x4c2 <led_shift_register_create>
     334:	9d 83       	std	Y+5, r25	; 0x05
	self->light_leds = light_control_leds_create(self->leds);	
     336:	8c 83       	std	Y+4, r24	; 0x04
     338:	45 d1       	rcall	.+650    	; 0x5c4 <light_control_leds_create>
     33a:	9b 83       	std	Y+3, r25	; 0x03
     33c:	8a 83       	std	Y+2, r24	; 0x02
	self->joystic_left = analog_joystick_create(1, 5, 6);
     33e:	46 e0       	ldi	r20, 0x06	; 6
     340:	50 e0       	ldi	r21, 0x00	; 0
     342:	65 e0       	ldi	r22, 0x05	; 5
     344:	70 e0       	ldi	r23, 0x00	; 0
     346:	81 e0       	ldi	r24, 0x01	; 1
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	9a df       	rcall	.-204    	; 0x280 <analog_joystick_create>
     34c:	99 87       	std	Y+9, r25	; 0x09
     34e:	88 87       	std	Y+8, r24	; 0x08
	self->joystic_right = analog_joystick_create(1, 7, 4);
     350:	44 e0       	ldi	r20, 0x04	; 4
     352:	50 e0       	ldi	r21, 0x00	; 0
     354:	67 e0       	ldi	r22, 0x07	; 7
     356:	70 e0       	ldi	r23, 0x00	; 0
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	91 df       	rcall	.-222    	; 0x280 <analog_joystick_create>
	#ifdef DEBUG
		self->logger = hardware_serial_get();
     35e:	9b 87       	std	Y+11, r25	; 0x0b
     360:	8a 87       	std	Y+10, r24	; 0x0a
     362:	8f d0       	rcall	.+286    	; 0x482 <hardware_serial_get>
		hardware_serial_begin(self->logger, 9600);
     364:	9d 87       	std	Y+13, r25	; 0x0d
     366:	8c 87       	std	Y+12, r24	; 0x0c
     368:	60 e8       	ldi	r22, 0x80	; 128
		hardware_serial_println(self->logger, "Initializing controller...");
     36a:	75 e2       	ldi	r23, 0x25	; 37
     36c:	8d d0       	rcall	.+282    	; 0x488 <hardware_serial_begin>
     36e:	6b e2       	ldi	r22, 0x2B	; 43
     370:	72 e0       	ldi	r23, 0x02	; 2
     372:	8c 85       	ldd	r24, Y+12	; 0x0c
	#endif	

	self->lcd = lcd_get(8, 9, 4, 5, 6, 7);
     374:	9d 85       	ldd	r25, Y+13	; 0x0d
     376:	8e d0       	rcall	.+284    	; 0x494 <hardware_serial_println>
     378:	87 e0       	ldi	r24, 0x07	; 7
     37a:	e8 2e       	mov	r14, r24
     37c:	06 e0       	ldi	r16, 0x06	; 6
     37e:	25 e0       	ldi	r18, 0x05	; 5
     380:	44 e0       	ldi	r20, 0x04	; 4
     382:	69 e0       	ldi	r22, 0x09	; 9
     384:	88 e0       	ldi	r24, 0x08	; 8
	lcd_begin(self->lcd, 16, 2);
     386:	bf d2       	rcall	.+1406   	; 0x906 <lcd_get>
     388:	9f 83       	std	Y+7, r25	; 0x07
     38a:	8e 83       	std	Y+6, r24	; 0x06
	lcd_set_cursor(self->lcd, 0, 0);
     38c:	42 e0       	ldi	r20, 0x02	; 2
     38e:	60 e1       	ldi	r22, 0x10	; 16
     390:	dd d2       	rcall	.+1466   	; 0x94c <lcd_begin>
     392:	40 e0       	ldi	r20, 0x00	; 0
     394:	60 e0       	ldi	r22, 0x00	; 0
	lcd_print(self->lcd, "RC Controller");
     396:	8e 81       	ldd	r24, Y+6	; 0x06
     398:	9f 81       	ldd	r25, Y+7	; 0x07
     39a:	db d2       	rcall	.+1462   	; 0x952 <lcd_set_cursor>
     39c:	66 e4       	ldi	r22, 0x46	; 70
     39e:	72 e0       	ldi	r23, 0x02	; 2
	lcd_set_cursor(self->lcd, 0, 1);
     3a0:	8e 81       	ldd	r24, Y+6	; 0x06
     3a2:	9f 81       	ldd	r25, Y+7	; 0x07
     3a4:	d7 d2       	rcall	.+1454   	; 0x954 <lcd_print>
     3a6:	41 e0       	ldi	r20, 0x01	; 1
	lcd_print(self->lcd, "ver. 1.0");
     3a8:	60 e0       	ldi	r22, 0x00	; 0
     3aa:	8e 81       	ldd	r24, Y+6	; 0x06
     3ac:	9f 81       	ldd	r25, Y+7	; 0x07
     3ae:	d1 d2       	rcall	.+1442   	; 0x952 <lcd_set_cursor>
    delay(2000);
     3b0:	64 e5       	ldi	r22, 0x54	; 84
     3b2:	72 e0       	ldi	r23, 0x02	; 2
     3b4:	8e 81       	ldd	r24, Y+6	; 0x06
     3b6:	9f 81       	ldd	r25, Y+7	; 0x07
     3b8:	cd d2       	rcall	.+1434   	; 0x954 <lcd_print>
	lcd_clear(self->lcd);
     3ba:	60 ed       	ldi	r22, 0xD0	; 208
     3bc:	77 e0       	ldi	r23, 0x07	; 7
     3be:	80 e0       	ldi	r24, 0x00	; 0
     3c0:	90 e0       	ldi	r25, 0x00	; 0
	lcd_set_cursor(self->lcd, 0, 0);
     3c2:	d2 d7       	rcall	.+4004   	; 0x1368 <delay>
     3c4:	8e 81       	ldd	r24, Y+6	; 0x06
     3c6:	9f 81       	ldd	r25, Y+7	; 0x07
     3c8:	c3 d2       	rcall	.+1414   	; 0x950 <lcd_clear>
	led_shift_register_reset(self->leds);
     3ca:	40 e0       	ldi	r20, 0x00	; 0
     3cc:	60 e0       	ldi	r22, 0x00	; 0
	digitalWrite(self->leds->output_enable, LOW);
     3ce:	8e 81       	ldd	r24, Y+6	; 0x06
     3d0:	9f 81       	ldd	r25, Y+7	; 0x07
     3d2:	bf d2       	rcall	.+1406   	; 0x952 <lcd_set_cursor>
     3d4:	8c 81       	ldd	r24, Y+4	; 0x04
     3d6:	9d 81       	ldd	r25, Y+5	; 0x05
	lcd_print(self->lcd, "Testing LEDs...");
     3d8:	bc d0       	rcall	.+376    	; 0x552 <led_shift_register_reset>
     3da:	ec 81       	ldd	r30, Y+4	; 0x04
     3dc:	fd 81       	ldd	r31, Y+5	; 0x05
     3de:	60 e0       	ldi	r22, 0x00	; 0
     3e0:	80 85       	ldd	r24, Z+8	; 0x08
     3e2:	0e 94 10 0b 	call	0x1620	; 0x1620 <digitalWrite>
    //Testing controller info leds
	led_shift_register_test(self->leds);
     3e6:	6d e5       	ldi	r22, 0x5D	; 93
     3e8:	72 e0       	ldi	r23, 0x02	; 2
     3ea:	8e 81       	ldd	r24, Y+6	; 0x06
	lcd_clear(self->lcd);
     3ec:	9f 81       	ldd	r25, Y+7	; 0x07
     3ee:	b2 d2       	rcall	.+1380   	; 0x954 <lcd_print>
     3f0:	8c 81       	ldd	r24, Y+4	; 0x04
     3f2:	9d 81       	ldd	r25, Y+5	; 0x05
	lcd_print(self->lcd, "WELCOME");
     3f4:	b4 d0       	rcall	.+360    	; 0x55e <led_shift_register_test>
     3f6:	8e 81       	ldd	r24, Y+6	; 0x06
     3f8:	9f 81       	ldd	r25, Y+7	; 0x07
     3fa:	aa d2       	rcall	.+1364   	; 0x950 <lcd_clear>
     3fc:	6d e6       	ldi	r22, 0x6D	; 109
     3fe:	72 e0       	ldi	r23, 0x02	; 2

	pinMode(self->switches->interrupt_pin, INPUT);
     400:	8e 81       	ldd	r24, Y+6	; 0x06
     402:	9f 81       	ldd	r25, Y+7	; 0x07
     404:	a7 d2       	rcall	.+1358   	; 0x954 <lcd_print>
     406:	e8 81       	ld	r30, Y
     408:	f9 81       	ldd	r31, Y+1	; 0x01
     40a:	60 e0       	ldi	r22, 0x00	; 0
	pinMode(self->joystic_left->action_button, OUTPUT);
     40c:	81 81       	ldd	r24, Z+1	; 0x01
     40e:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <pinMode>
     412:	e8 85       	ldd	r30, Y+8	; 0x08
     414:	f9 85       	ldd	r31, Y+9	; 0x09
     416:	61 e0       	ldi	r22, 0x01	; 1
	pinMode(self->joystic_right->action_button, OUTPUT);
     418:	84 81       	ldd	r24, Z+4	; 0x04
     41a:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <pinMode>
     41e:	ea 85       	ldd	r30, Y+10	; 0x0a
     420:	fb 85       	ldd	r31, Y+11	; 0x0b
     422:	61 e0       	ldi	r22, 0x01	; 1
	attachInterrupt(digitalPinToInterrupt(self->switches->interrupt_pin), controller_interrupt_buttons, RISING);
     424:	84 81       	ldd	r24, Z+4	; 0x04
     426:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <pinMode>
     42a:	e8 81       	ld	r30, Y
     42c:	f9 81       	ldd	r31, Y+1	; 0x01
     42e:	91 81       	ldd	r25, Z+1	; 0x01
     430:	92 30       	cpi	r25, 0x02	; 2
     432:	49 f0       	breq	.+18     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     434:	93 30       	cpi	r25, 0x03	; 3
     436:	49 f0       	breq	.+18     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     438:	8e ee       	ldi	r24, 0xEE	; 238
     43a:	89 0f       	add	r24, r25
     43c:	84 30       	cpi	r24, 0x04	; 4
     43e:	38 f4       	brcc	.+14     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     440:	87 e1       	ldi	r24, 0x17	; 23
     442:	89 1b       	sub	r24, r25
     444:	05 c0       	rjmp	.+10     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     446:	80 e0       	ldi	r24, 0x00	; 0
     448:	03 c0       	rjmp	.+6      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	01 c0       	rjmp	.+2      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     44e:	8f ef       	ldi	r24, 0xFF	; 255
	attachInterrupt(self->joystic_left->action_button, controller_interrupt_joystick_left, RISING);
     450:	43 e0       	ldi	r20, 0x03	; 3
     452:	50 e0       	ldi	r21, 0x00	; 0
     454:	6c e5       	ldi	r22, 0x5C	; 92
     456:	71 e0       	ldi	r23, 0x01	; 1
     458:	4d d5       	rcall	.+2714   	; 0xef4 <attachInterrupt>
     45a:	e8 85       	ldd	r30, Y+8	; 0x08
     45c:	f9 85       	ldd	r31, Y+9	; 0x09
     45e:	43 e0       	ldi	r20, 0x03	; 3
     460:	50 e0       	ldi	r21, 0x00	; 0
	attachInterrupt(self->joystic_right->action_button, controller_interrupt_joystick_right, RISING);
     462:	6b e5       	ldi	r22, 0x5B	; 91
     464:	71 e0       	ldi	r23, 0x01	; 1
     466:	84 81       	ldd	r24, Z+4	; 0x04
     468:	45 d5       	rcall	.+2698   	; 0xef4 <attachInterrupt>
     46a:	ea 85       	ldd	r30, Y+10	; 0x0a
     46c:	fb 85       	ldd	r31, Y+11	; 0x0b
     46e:	43 e0       	ldi	r20, 0x03	; 3
}
     470:	50 e0       	ldi	r21, 0x00	; 0
     472:	66 e8       	ldi	r22, 0x86	; 134
     474:	71 e0       	ldi	r23, 0x01	; 1
     476:	84 81       	ldd	r24, Z+4	; 0x04
	pinMode(self->switches->interrupt_pin, INPUT);
	pinMode(self->joystic_left->action_button, OUTPUT);
	pinMode(self->joystic_right->action_button, OUTPUT);
	attachInterrupt(digitalPinToInterrupt(self->switches->interrupt_pin), controller_interrupt_buttons, RISING);
	attachInterrupt(self->joystic_left->action_button, controller_interrupt_joystick_left, RISING);
	attachInterrupt(self->joystic_right->action_button, controller_interrupt_joystick_right, RISING);
     478:	df 91       	pop	r29
     47a:	cf 91       	pop	r28
     47c:	0f 91       	pop	r16
     47e:	ef 90       	pop	r14
     480:	39 c5       	rjmp	.+2674   	; 0xef4 <attachInterrupt>

00000482 <hardware_serial_get>:
 extern "C"
 {
	HardwareSerial* hardware_serial_get(void)
	{
		return &Serial;
	}
     482:	8c e9       	ldi	r24, 0x9C	; 156
     484:	92 e0       	ldi	r25, 0x02	; 2
     486:	08 95       	ret

00000488 <hardware_serial_begin>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     488:	ab 01       	movw	r20, r22
     48a:	77 0f       	add	r23, r23
     48c:	66 0b       	sbc	r22, r22
     48e:	77 0b       	sbc	r23, r23
     490:	26 e0       	ldi	r18, 0x06	; 6
     492:	d8 c3       	rjmp	.+1968   	; 0xc44 <_ZN14HardwareSerial5beginEmh>

00000494 <hardware_serial_println>:
	{
		handle->begin(bandwith);
	}

	void hardware_serial_println(HardwareSerial *handle, const char *text)
	{
     494:	1e c5       	rjmp	.+2620   	; 0xed2 <_ZN5Print7printlnEPKc>

00000496 <led_shift_register_write>:
  shift_register->led_state = shift_register->led_state & (!(short)led);
  led_shift_register_write(shift_register, shift_register->led_state);
}

void led_shift_register_write(led_shift_register *shift_register, short value)
{
     496:	1f 93       	push	r17
     498:	cf 93       	push	r28
     49a:	df 93       	push	r29
     49c:	ec 01       	movw	r28, r24
     49e:	16 2f       	mov	r17, r22
    digitalWrite(shift_register->latch_pin, LOW);
     4a0:	60 e0       	ldi	r22, 0x00	; 0
     4a2:	8c 81       	ldd	r24, Y+4	; 0x04
     4a4:	0e 94 10 0b 	call	0x1620	; 0x1620 <digitalWrite>
    shiftOut(shift_register->data_pin, shift_register->clock_pin, MSBFIRST, value);
     4a8:	21 2f       	mov	r18, r17
     4aa:	41 e0       	ldi	r20, 0x01	; 1
     4ac:	6a 81       	ldd	r22, Y+2	; 0x02
     4ae:	88 81       	ld	r24, Y
     4b0:	0e 94 3e 0b 	call	0x167c	; 0x167c <shiftOut>
    digitalWrite(shift_register->latch_pin, HIGH);
     4b4:	61 e0       	ldi	r22, 0x01	; 1
     4b6:	8c 81       	ldd	r24, Y+4	; 0x04
     4b8:	df 91       	pop	r29
     4ba:	cf 91       	pop	r28
     4bc:	1f 91       	pop	r17

void led_shift_register_write(led_shift_register *shift_register, short value)
{
    digitalWrite(shift_register->latch_pin, LOW);
    shiftOut(shift_register->data_pin, shift_register->clock_pin, MSBFIRST, value);
    digitalWrite(shift_register->latch_pin, HIGH);
     4be:	0c 94 10 0b 	jmp	0x1620	; 0x1620 <digitalWrite>

000004c2 <led_shift_register_create>:

static void led_shift_register_write(led_shift_register *, short);
static void led_shift_register_init(led_shift_register *);

led_shift_register *led_shift_register_create(short data_pin, short clock_pin, short latch_pin, short output_enable)
{
     4c2:	af 92       	push	r10
     4c4:	bf 92       	push	r11
     4c6:	cf 92       	push	r12
     4c8:	df 92       	push	r13
     4ca:	ef 92       	push	r14
     4cc:	ff 92       	push	r15
     4ce:	0f 93       	push	r16
     4d0:	1f 93       	push	r17
     4d2:	cf 93       	push	r28
     4d4:	df 93       	push	r29
     4d6:	5c 01       	movw	r10, r24
     4d8:	6b 01       	movw	r12, r22
     4da:	7a 01       	movw	r14, r20
     4dc:	12 2f       	mov	r17, r18
     4de:	03 2f       	mov	r16, r19
	led_shift_register *shift_register = malloc(sizeof(led_shift_register));
     4e0:	8a e0       	ldi	r24, 0x0A	; 10
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	0e 94 9f 0b 	call	0x173e	; 0x173e <malloc>
     4e8:	ec 01       	movw	r28, r24
	shift_register->data_pin = data_pin;
     4ea:	b9 82       	std	Y+1, r11	; 0x01
     4ec:	a8 82       	st	Y, r10
	shift_register->clock_pin = clock_pin;
     4ee:	db 82       	std	Y+3, r13	; 0x03
     4f0:	ca 82       	std	Y+2, r12	; 0x02
	shift_register->latch_pin = latch_pin;
     4f2:	fd 82       	std	Y+5, r15	; 0x05
     4f4:	ec 82       	std	Y+4, r14	; 0x04
	shift_register->output_enable = output_enable;
     4f6:	18 87       	std	Y+8, r17	; 0x08
     4f8:	09 87       	std	Y+9, r16	; 0x09
	return shift_register;
}

void led_shift_register_init(led_shift_register * shift_register)
{
	pinMode(shift_register->output_enable, OUTPUT);
     4fa:	61 e0       	ldi	r22, 0x01	; 1
     4fc:	81 2f       	mov	r24, r17
     4fe:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <pinMode>
	digitalWrite(shift_register->output_enable, HIGH);
     502:	61 e0       	ldi	r22, 0x01	; 1
     504:	88 85       	ldd	r24, Y+8	; 0x08
     506:	0e 94 10 0b 	call	0x1620	; 0x1620 <digitalWrite>

	pinMode(shift_register->clock_pin, OUTPUT);
     50a:	61 e0       	ldi	r22, 0x01	; 1
     50c:	8a 81       	ldd	r24, Y+2	; 0x02
     50e:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <pinMode>
	pinMode(shift_register->data_pin, OUTPUT);
     512:	61 e0       	ldi	r22, 0x01	; 1
     514:	88 81       	ld	r24, Y
     516:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <pinMode>
	pinMode(shift_register->latch_pin, OUTPUT);
     51a:	61 e0       	ldi	r22, 0x01	; 1
     51c:	8c 81       	ldd	r24, Y+4	; 0x04
     51e:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <pinMode>

	digitalWrite(shift_register->clock_pin, LOW);
     522:	60 e0       	ldi	r22, 0x00	; 0
     524:	8a 81       	ldd	r24, Y+2	; 0x02
     526:	0e 94 10 0b 	call	0x1620	; 0x1620 <digitalWrite>
	digitalWrite(shift_register->data_pin, LOW);
     52a:	60 e0       	ldi	r22, 0x00	; 0
     52c:	88 81       	ld	r24, Y
     52e:	0e 94 10 0b 	call	0x1620	; 0x1620 <digitalWrite>
	digitalWrite(shift_register->latch_pin, LOW);
     532:	60 e0       	ldi	r22, 0x00	; 0
     534:	8c 81       	ldd	r24, Y+4	; 0x04
     536:	0e 94 10 0b 	call	0x1620	; 0x1620 <digitalWrite>
	shift_register->latch_pin = latch_pin;
	shift_register->output_enable = output_enable;
	
	led_shift_register_init(shift_register);
	return shift_register;
}
     53a:	ce 01       	movw	r24, r28
     53c:	df 91       	pop	r29
     53e:	cf 91       	pop	r28
     540:	1f 91       	pop	r17
     542:	0f 91       	pop	r16
     544:	ff 90       	pop	r15
     546:	ef 90       	pop	r14
     548:	df 90       	pop	r13
     54a:	cf 90       	pop	r12
     54c:	bf 90       	pop	r11
     54e:	af 90       	pop	r10
     550:	08 95       	ret

00000552 <led_shift_register_reset>:
    led_shift_register_reset(shift_register);
}

void led_shift_register_reset(led_shift_register *shift_register)
{
    shift_register->led_state = 0;
     552:	fc 01       	movw	r30, r24
     554:	17 82       	std	Z+7, r1	; 0x07
     556:	16 82       	std	Z+6, r1	; 0x06
    led_shift_register_write(shift_register, shift_register->led_state);
     558:	60 e0       	ldi	r22, 0x00	; 0
     55a:	70 e0       	ldi	r23, 0x00	; 0
     55c:	9c cf       	rjmp	.-200    	; 0x496 <led_shift_register_write>

0000055e <led_shift_register_test>:
	digitalWrite(shift_register->data_pin, LOW);
	digitalWrite(shift_register->latch_pin, LOW);
}

void led_shift_register_test(led_shift_register *shift_register)
{
     55e:	cf 93       	push	r28
     560:	df 93       	push	r29
     562:	ec 01       	movw	r28, r24
	shift_register->led_state = 1;
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	90 e0       	ldi	r25, 0x00	; 0
    for(shift_register->led_state; shift_register->led_state <= 128; shift_register->led_state = shift_register->led_state * 2)
     568:	9f 83       	std	Y+7, r25	; 0x07
     56a:	8e 83       	std	Y+6, r24	; 0x06
     56c:	6e 81       	ldd	r22, Y+6	; 0x06
     56e:	7f 81       	ldd	r23, Y+7	; 0x07
    {
      led_shift_register_write(shift_register, shift_register->led_state);
     570:	ce 01       	movw	r24, r28
}

void led_shift_register_test(led_shift_register *shift_register)
{
	shift_register->led_state = 1;
    for(shift_register->led_state; shift_register->led_state <= 128; shift_register->led_state = shift_register->led_state * 2)
     572:	61 38       	cpi	r22, 0x81	; 129
     574:	71 05       	cpc	r23, r1
    {
      led_shift_register_write(shift_register, shift_register->led_state);
     576:	5c f4       	brge	.+22     	; 0x58e <led_shift_register_test+0x30>
	  delay(200);
     578:	8e df       	rcall	.-228    	; 0x496 <led_shift_register_write>
     57a:	68 ec       	ldi	r22, 0xC8	; 200
     57c:	70 e0       	ldi	r23, 0x00	; 0
     57e:	80 e0       	ldi	r24, 0x00	; 0
     580:	90 e0       	ldi	r25, 0x00	; 0
}

void led_shift_register_test(led_shift_register *shift_register)
{
	shift_register->led_state = 1;
    for(shift_register->led_state; shift_register->led_state <= 128; shift_register->led_state = shift_register->led_state * 2)
     582:	f2 d6       	rcall	.+3556   	; 0x1368 <delay>
     584:	8e 81       	ldd	r24, Y+6	; 0x06
     586:	9f 81       	ldd	r25, Y+7	; 0x07
     588:	88 0f       	add	r24, r24
      led_shift_register_write(shift_register, shift_register->led_state);
	  delay(200);
    }
    
    led_shift_register_reset(shift_register);
}
     58a:	99 1f       	adc	r25, r25
    {
      led_shift_register_write(shift_register, shift_register->led_state);
	  delay(200);
    }
    
    led_shift_register_reset(shift_register);
     58c:	ed cf       	rjmp	.-38     	; 0x568 <led_shift_register_test+0xa>
     58e:	df 91       	pop	r29
     590:	cf 91       	pop	r28
     592:	df cf       	rjmp	.-66     	; 0x552 <led_shift_register_reset>

00000594 <led_shift_register_on>:
    led_shift_register_write(shift_register, shift_register->led_state);
}

void led_shift_register_on(led_shift_register* shift_register, info_led_type led)
{
  shift_register->led_state = shift_register->led_state & (short)led;
     594:	70 e0       	ldi	r23, 0x00	; 0
     596:	fc 01       	movw	r30, r24
     598:	26 81       	ldd	r18, Z+6	; 0x06
     59a:	37 81       	ldd	r19, Z+7	; 0x07
     59c:	62 23       	and	r22, r18
     59e:	73 23       	and	r23, r19
     5a0:	77 83       	std	Z+7, r23	; 0x07
  led_shift_register_write(shift_register, shift_register->led_state);
     5a2:	66 83       	std	Z+6, r22	; 0x06
     5a4:	78 cf       	rjmp	.-272    	; 0x496 <led_shift_register_write>

000005a6 <led_shift_register_off>:
}

void led_shift_register_off(led_shift_register* shift_register, info_led_type led)
{
  shift_register->led_state = shift_register->led_state & (!(short)led);
     5a6:	41 e0       	ldi	r20, 0x01	; 1
     5a8:	50 e0       	ldi	r21, 0x00	; 0
     5aa:	66 23       	and	r22, r22
     5ac:	11 f0       	breq	.+4      	; 0x5b2 <led_shift_register_off+0xc>
     5ae:	40 e0       	ldi	r20, 0x00	; 0
     5b0:	50 e0       	ldi	r21, 0x00	; 0
     5b2:	fc 01       	movw	r30, r24
     5b4:	26 81       	ldd	r18, Z+6	; 0x06
     5b6:	37 81       	ldd	r19, Z+7	; 0x07
     5b8:	ba 01       	movw	r22, r20
     5ba:	62 23       	and	r22, r18
     5bc:	73 23       	and	r23, r19
     5be:	77 83       	std	Z+7, r23	; 0x07
  led_shift_register_write(shift_register, shift_register->led_state);
     5c0:	66 83       	std	Z+6, r22	; 0x06
     5c2:	69 cf       	rjmp	.-302    	; 0x496 <led_shift_register_write>

000005c4 <light_control_leds_create>:
#include <light_control_leds.h>

light_control_leds * light_control_leds_create(led_shift_register * shift_register)
{
     5c4:	cf 93       	push	r28
     5c6:	df 93       	push	r29
     5c8:	ec 01       	movw	r28, r24
  light_control_leds *leds_control = malloc(sizeof(light_control_leds));
     5ca:	89 e0       	ldi	r24, 0x09	; 9
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	0e 94 9f 0b 	call	0x173e	; 0x173e <malloc>
     5d2:	fc 01       	movw	r30, r24
  
  leds_control->avaible_states[0] = LIGHT_LED_OFF;
     5d4:	14 82       	std	Z+4, r1	; 0x04
  leds_control->avaible_states[1] = LIGHT_LED_MIN;
     5d6:	81 e0       	ldi	r24, 0x01	; 1
     5d8:	85 83       	std	Z+5, r24	; 0x05
  leds_control->avaible_states[2] = LIGHT_LED_MID;
     5da:	84 e0       	ldi	r24, 0x04	; 4
     5dc:	86 83       	std	Z+6, r24	; 0x06
  leds_control->avaible_states[3] = LIGHT_LED_HIGH;
     5de:	80 e1       	ldi	r24, 0x10	; 16
     5e0:	87 83       	std	Z+7, r24	; 0x07
  leds_control->avaible_states[4] = LIGHT_LED_FULL;
     5e2:	80 e4       	ldi	r24, 0x40	; 64
     5e4:	80 87       	std	Z+8, r24	; 0x08
  //points to first element in state array
  leds_control->actual_led_state = leds_control->avaible_states;
     5e6:	cf 01       	movw	r24, r30
     5e8:	04 96       	adiw	r24, 0x04	; 4
     5ea:	93 83       	std	Z+3, r25	; 0x03
     5ec:	82 83       	std	Z+2, r24	; 0x02
  leds_control->shift_register = shift_register;
     5ee:	d1 83       	std	Z+1, r29	; 0x01
     5f0:	c0 83       	st	Z, r28
  
  return leds_control;
}
     5f2:	cf 01       	movw	r24, r30
     5f4:	df 91       	pop	r29
     5f6:	cf 91       	pop	r28
     5f8:	08 95       	ret

000005fa <light_control_leds_next>:


void light_control_leds_next(light_control_leds * leds)
{
     5fa:	cf 93       	push	r28
     5fc:	df 93       	push	r29
     5fe:	ec 01       	movw	r28, r24
  led_shift_register_off(leds->shift_register, *leds->actual_led_state);
     600:	ea 81       	ldd	r30, Y+2	; 0x02
     602:	fb 81       	ldd	r31, Y+3	; 0x03
     604:	60 81       	ld	r22, Z
     606:	88 81       	ld	r24, Y
     608:	99 81       	ldd	r25, Y+1	; 0x01
     60a:	cd df       	rcall	.-102    	; 0x5a6 <led_shift_register_off>
  delay(100);
     60c:	64 e6       	ldi	r22, 0x64	; 100
     60e:	70 e0       	ldi	r23, 0x00	; 0
     610:	80 e0       	ldi	r24, 0x00	; 0
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	a9 d6       	rcall	.+3410   	; 0x1368 <delay>
  if(leds->actual_led_state == &leds->avaible_states[4])
     616:	8a 81       	ldd	r24, Y+2	; 0x02
     618:	9b 81       	ldd	r25, Y+3	; 0x03
     61a:	9e 01       	movw	r18, r28
     61c:	28 5f       	subi	r18, 0xF8	; 248
     61e:	3f 4f       	sbci	r19, 0xFF	; 255
     620:	82 17       	cp	r24, r18
     622:	93 07       	cpc	r25, r19
     624:	19 f4       	brne	.+6      	; 0x62c <light_control_leds_next+0x32>
  {
    leds->actual_led_state = leds->avaible_states;
     626:	ce 01       	movw	r24, r28
     628:	04 96       	adiw	r24, 0x04	; 4
     62a:	01 c0       	rjmp	.+2      	; 0x62e <light_control_leds_next+0x34>
  }
  else
  {
    ++leds->actual_led_state;
     62c:	01 96       	adiw	r24, 0x01	; 1
     62e:	9b 83       	std	Y+3, r25	; 0x03
     630:	8a 83       	std	Y+2, r24	; 0x02
  }
  led_shift_register_on(leds->shift_register, *leds->actual_led_state);
     632:	ea 81       	ldd	r30, Y+2	; 0x02
     634:	fb 81       	ldd	r31, Y+3	; 0x03
     636:	60 81       	ld	r22, Z
     638:	88 81       	ld	r24, Y
     63a:	99 81       	ldd	r25, Y+1	; 0x01
  }
  else
  {
    ++leds->actual_led_state;
  }
  led_shift_register_on(leds->shift_register, *leds->actual_led_state);
     63c:	df 91       	pop	r29
     63e:	cf 91       	pop	r28
     640:	a9 cf       	rjmp	.-174    	; 0x594 <led_shift_register_on>

00000642 <_ZN13LiquidCrystal11pulseEnableEv>:
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
}
     642:	cf 93       	push	r28
     644:	df 93       	push	r29
     646:	ec 01       	movw	r28, r24
     648:	60 e0       	ldi	r22, 0x00	; 0
     64a:	8e 81       	ldd	r24, Y+6	; 0x06
     64c:	e9 d7       	rcall	.+4050   	; 0x1620 <digitalWrite>
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	c3 d6       	rcall	.+3462   	; 0x13da <delayMicroseconds>
     654:	61 e0       	ldi	r22, 0x01	; 1
     656:	8e 81       	ldd	r24, Y+6	; 0x06
     658:	e3 d7       	rcall	.+4038   	; 0x1620 <digitalWrite>
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	bd d6       	rcall	.+3450   	; 0x13da <delayMicroseconds>
     660:	60 e0       	ldi	r22, 0x00	; 0
     662:	8e 81       	ldd	r24, Y+6	; 0x06
     664:	dd d7       	rcall	.+4026   	; 0x1620 <digitalWrite>
     666:	84 e6       	ldi	r24, 0x64	; 100
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	df 91       	pop	r29
     66c:	cf 91       	pop	r28
     66e:	b5 c6       	rjmp	.+3434   	; 0x13da <delayMicroseconds>

00000670 <_ZN13LiquidCrystal10write4bitsEh>:
     670:	cf 92       	push	r12
     672:	df 92       	push	r13
     674:	ef 92       	push	r14
     676:	ff 92       	push	r15
     678:	0f 93       	push	r16
     67a:	1f 93       	push	r17
     67c:	cf 93       	push	r28
     67e:	df 93       	push	r29
     680:	6c 01       	movw	r12, r24
     682:	7c 01       	movw	r14, r24
     684:	87 e0       	ldi	r24, 0x07	; 7
     686:	e8 0e       	add	r14, r24
     688:	f1 1c       	adc	r15, r1
     68a:	c0 e0       	ldi	r28, 0x00	; 0
     68c:	d0 e0       	ldi	r29, 0x00	; 0
     68e:	06 2f       	mov	r16, r22
     690:	10 e0       	ldi	r17, 0x00	; 0
     692:	b8 01       	movw	r22, r16
     694:	0c 2e       	mov	r0, r28
     696:	02 c0       	rjmp	.+4      	; 0x69c <_ZN13LiquidCrystal10write4bitsEh+0x2c>
     698:	75 95       	asr	r23
     69a:	67 95       	ror	r22
     69c:	0a 94       	dec	r0
     69e:	e2 f7       	brpl	.-8      	; 0x698 <_ZN13LiquidCrystal10write4bitsEh+0x28>
     6a0:	61 70       	andi	r22, 0x01	; 1
     6a2:	f7 01       	movw	r30, r14
     6a4:	81 91       	ld	r24, Z+
     6a6:	7f 01       	movw	r14, r30
     6a8:	bb d7       	rcall	.+3958   	; 0x1620 <digitalWrite>
     6aa:	21 96       	adiw	r28, 0x01	; 1
     6ac:	c4 30       	cpi	r28, 0x04	; 4
     6ae:	d1 05       	cpc	r29, r1
     6b0:	81 f7       	brne	.-32     	; 0x692 <_ZN13LiquidCrystal10write4bitsEh+0x22>
     6b2:	c6 01       	movw	r24, r12
     6b4:	df 91       	pop	r29
     6b6:	cf 91       	pop	r28
     6b8:	1f 91       	pop	r17
     6ba:	0f 91       	pop	r16
     6bc:	ff 90       	pop	r15
     6be:	ef 90       	pop	r14
     6c0:	df 90       	pop	r13
     6c2:	cf 90       	pop	r12
     6c4:	be cf       	rjmp	.-132    	; 0x642 <_ZN13LiquidCrystal11pulseEnableEv>

000006c6 <_ZN13LiquidCrystal10write8bitsEh>:
     6c6:	cf 92       	push	r12
     6c8:	df 92       	push	r13
     6ca:	ef 92       	push	r14
     6cc:	ff 92       	push	r15
     6ce:	0f 93       	push	r16
     6d0:	1f 93       	push	r17
     6d2:	cf 93       	push	r28
     6d4:	df 93       	push	r29
     6d6:	6c 01       	movw	r12, r24
     6d8:	7c 01       	movw	r14, r24
     6da:	87 e0       	ldi	r24, 0x07	; 7
     6dc:	e8 0e       	add	r14, r24
     6de:	f1 1c       	adc	r15, r1
     6e0:	c0 e0       	ldi	r28, 0x00	; 0
     6e2:	d0 e0       	ldi	r29, 0x00	; 0
     6e4:	06 2f       	mov	r16, r22
     6e6:	10 e0       	ldi	r17, 0x00	; 0
     6e8:	b8 01       	movw	r22, r16
     6ea:	0c 2e       	mov	r0, r28
     6ec:	02 c0       	rjmp	.+4      	; 0x6f2 <_ZN13LiquidCrystal10write8bitsEh+0x2c>
     6ee:	75 95       	asr	r23
     6f0:	67 95       	ror	r22
     6f2:	0a 94       	dec	r0
     6f4:	e2 f7       	brpl	.-8      	; 0x6ee <_ZN13LiquidCrystal10write8bitsEh+0x28>
     6f6:	61 70       	andi	r22, 0x01	; 1
     6f8:	f7 01       	movw	r30, r14
     6fa:	81 91       	ld	r24, Z+
     6fc:	7f 01       	movw	r14, r30
     6fe:	90 d7       	rcall	.+3872   	; 0x1620 <digitalWrite>
     700:	21 96       	adiw	r28, 0x01	; 1
     702:	c8 30       	cpi	r28, 0x08	; 8
     704:	d1 05       	cpc	r29, r1
     706:	81 f7       	brne	.-32     	; 0x6e8 <_ZN13LiquidCrystal10write8bitsEh+0x22>
     708:	c6 01       	movw	r24, r12
     70a:	df 91       	pop	r29
     70c:	cf 91       	pop	r28
     70e:	1f 91       	pop	r17
     710:	0f 91       	pop	r16
     712:	ff 90       	pop	r15
     714:	ef 90       	pop	r14
     716:	df 90       	pop	r13
     718:	cf 90       	pop	r12
     71a:	93 cf       	rjmp	.-218    	; 0x642 <_ZN13LiquidCrystal11pulseEnableEv>

0000071c <_ZN13LiquidCrystal4sendEhh>:
     71c:	1f 93       	push	r17
     71e:	cf 93       	push	r28
     720:	df 93       	push	r29
     722:	ec 01       	movw	r28, r24
     724:	16 2f       	mov	r17, r22
     726:	64 2f       	mov	r22, r20
     728:	8c 81       	ldd	r24, Y+4	; 0x04
     72a:	7a d7       	rcall	.+3828   	; 0x1620 <digitalWrite>
     72c:	8d 81       	ldd	r24, Y+5	; 0x05
     72e:	8f 3f       	cpi	r24, 0xFF	; 255
     730:	11 f0       	breq	.+4      	; 0x736 <_ZN13LiquidCrystal4sendEhh+0x1a>
     732:	60 e0       	ldi	r22, 0x00	; 0
     734:	75 d7       	rcall	.+3818   	; 0x1620 <digitalWrite>
     736:	8f 85       	ldd	r24, Y+15	; 0x0f
     738:	61 2f       	mov	r22, r17
     73a:	84 ff       	sbrs	r24, 4
     73c:	05 c0       	rjmp	.+10     	; 0x748 <_ZN13LiquidCrystal4sendEhh+0x2c>
     73e:	ce 01       	movw	r24, r28
     740:	df 91       	pop	r29
     742:	cf 91       	pop	r28
     744:	1f 91       	pop	r17
     746:	bf cf       	rjmp	.-130    	; 0x6c6 <_ZN13LiquidCrystal10write8bitsEh>
     748:	70 e0       	ldi	r23, 0x00	; 0
     74a:	84 e0       	ldi	r24, 0x04	; 4
     74c:	75 95       	asr	r23
     74e:	67 95       	ror	r22
     750:	8a 95       	dec	r24
     752:	e1 f7       	brne	.-8      	; 0x74c <_ZN13LiquidCrystal4sendEhh+0x30>
     754:	ce 01       	movw	r24, r28
     756:	8c df       	rcall	.-232    	; 0x670 <_ZN13LiquidCrystal10write4bitsEh>
     758:	61 2f       	mov	r22, r17
     75a:	ce 01       	movw	r24, r28
     75c:	df 91       	pop	r29
     75e:	cf 91       	pop	r28
     760:	1f 91       	pop	r17
     762:	86 cf       	rjmp	.-244    	; 0x670 <_ZN13LiquidCrystal10write4bitsEh>

00000764 <_ZN13LiquidCrystal7commandEh>:
     764:	40 e0       	ldi	r20, 0x00	; 0
     766:	da cf       	rjmp	.-76     	; 0x71c <_ZN13LiquidCrystal4sendEhh>

00000768 <_ZN13LiquidCrystal5clearEv>:
     768:	61 e0       	ldi	r22, 0x01	; 1
     76a:	fc df       	rcall	.-8      	; 0x764 <_ZN13LiquidCrystal7commandEh>
     76c:	80 ed       	ldi	r24, 0xD0	; 208
     76e:	97 e0       	ldi	r25, 0x07	; 7
     770:	34 c6       	rjmp	.+3176   	; 0x13da <delayMicroseconds>

00000772 <_ZN13LiquidCrystal9setCursorEhh>:
     772:	fc 01       	movw	r30, r24
     774:	44 30       	cpi	r20, 0x04	; 4
     776:	08 f0       	brcs	.+2      	; 0x77a <_ZN13LiquidCrystal9setCursorEhh+0x8>
     778:	43 e0       	ldi	r20, 0x03	; 3
     77a:	83 89       	ldd	r24, Z+19	; 0x13
     77c:	48 17       	cp	r20, r24
     77e:	10 f0       	brcs	.+4      	; 0x784 <_ZN13LiquidCrystal9setCursorEhh+0x12>
     780:	4f ef       	ldi	r20, 0xFF	; 255
     782:	48 0f       	add	r20, r24
     784:	df 01       	movw	r26, r30
     786:	a4 0f       	add	r26, r20
     788:	b1 1d       	adc	r27, r1
     78a:	54 96       	adiw	r26, 0x14	; 20
     78c:	9c 91       	ld	r25, X
     78e:	69 0f       	add	r22, r25
     790:	60 68       	ori	r22, 0x80	; 128
     792:	cf 01       	movw	r24, r30
     794:	e7 cf       	rjmp	.-50     	; 0x764 <_ZN13LiquidCrystal7commandEh>

00000796 <_ZN13LiquidCrystal7displayEv>:
     796:	fc 01       	movw	r30, r24
     798:	60 89       	ldd	r22, Z+16	; 0x10
     79a:	26 2f       	mov	r18, r22
     79c:	24 60       	ori	r18, 0x04	; 4
     79e:	20 8b       	std	Z+16, r18	; 0x10
     7a0:	6c 60       	ori	r22, 0x0C	; 12
     7a2:	e0 cf       	rjmp	.-64     	; 0x764 <_ZN13LiquidCrystal7commandEh>

000007a4 <_ZN13LiquidCrystal5beginEhhh>:
     7a4:	ef 92       	push	r14
     7a6:	ff 92       	push	r15
     7a8:	0f 93       	push	r16
     7aa:	1f 93       	push	r17
     7ac:	cf 93       	push	r28
     7ae:	df 93       	push	r29
     7b0:	ec 01       	movw	r28, r24
     7b2:	42 30       	cpi	r20, 0x02	; 2
     7b4:	18 f0       	brcs	.+6      	; 0x7bc <_ZN13LiquidCrystal5beginEhhh+0x18>
     7b6:	8f 85       	ldd	r24, Y+15	; 0x0f
     7b8:	88 60       	ori	r24, 0x08	; 8
     7ba:	8f 87       	std	Y+15, r24	; 0x0f
     7bc:	4b 8b       	std	Y+19, r20	; 0x13
     7be:	1c 8a       	std	Y+20, r1	; 0x14
     7c0:	80 e4       	ldi	r24, 0x40	; 64
     7c2:	8d 8b       	std	Y+21, r24	; 0x15
     7c4:	6e 8b       	std	Y+22, r22	; 0x16
     7c6:	70 e0       	ldi	r23, 0x00	; 0
     7c8:	60 5c       	subi	r22, 0xC0	; 192
     7ca:	7f 4f       	sbci	r23, 0xFF	; 255
     7cc:	6f 8b       	std	Y+23, r22	; 0x17
     7ce:	22 23       	and	r18, r18
     7d0:	29 f0       	breq	.+10     	; 0x7dc <_ZN13LiquidCrystal5beginEhhh+0x38>
     7d2:	41 30       	cpi	r20, 0x01	; 1
     7d4:	19 f4       	brne	.+6      	; 0x7dc <_ZN13LiquidCrystal5beginEhhh+0x38>
     7d6:	8f 85       	ldd	r24, Y+15	; 0x0f
     7d8:	84 60       	ori	r24, 0x04	; 4
     7da:	8f 87       	std	Y+15, r24	; 0x0f
     7dc:	61 e0       	ldi	r22, 0x01	; 1
     7de:	8c 81       	ldd	r24, Y+4	; 0x04
     7e0:	e3 d6       	rcall	.+3526   	; 0x15a8 <pinMode>
     7e2:	8d 81       	ldd	r24, Y+5	; 0x05
     7e4:	8f 3f       	cpi	r24, 0xFF	; 255
     7e6:	11 f0       	breq	.+4      	; 0x7ec <_ZN13LiquidCrystal5beginEhhh+0x48>
     7e8:	61 e0       	ldi	r22, 0x01	; 1
     7ea:	de d6       	rcall	.+3516   	; 0x15a8 <pinMode>
     7ec:	61 e0       	ldi	r22, 0x01	; 1
     7ee:	8e 81       	ldd	r24, Y+6	; 0x06
     7f0:	db d6       	rcall	.+3510   	; 0x15a8 <pinMode>
     7f2:	7e 01       	movw	r14, r28
     7f4:	87 e0       	ldi	r24, 0x07	; 7
     7f6:	e8 0e       	add	r14, r24
     7f8:	f1 1c       	adc	r15, r1
     7fa:	00 e0       	ldi	r16, 0x00	; 0
     7fc:	10 e0       	ldi	r17, 0x00	; 0
     7fe:	8f 85       	ldd	r24, Y+15	; 0x0f
     800:	84 fd       	sbrc	r24, 4
     802:	03 c0       	rjmp	.+6      	; 0x80a <_ZN13LiquidCrystal5beginEhhh+0x66>
     804:	84 e0       	ldi	r24, 0x04	; 4
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	02 c0       	rjmp	.+4      	; 0x80e <_ZN13LiquidCrystal5beginEhhh+0x6a>
     80a:	88 e0       	ldi	r24, 0x08	; 8
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	08 17       	cp	r16, r24
     810:	19 07       	cpc	r17, r25
     812:	44 f4       	brge	.+16     	; 0x824 <_ZN13LiquidCrystal5beginEhhh+0x80>
     814:	61 e0       	ldi	r22, 0x01	; 1
     816:	f7 01       	movw	r30, r14
     818:	81 91       	ld	r24, Z+
     81a:	7f 01       	movw	r14, r30
     81c:	c5 d6       	rcall	.+3466   	; 0x15a8 <pinMode>
     81e:	0f 5f       	subi	r16, 0xFF	; 255
     820:	1f 4f       	sbci	r17, 0xFF	; 255
     822:	ed cf       	rjmp	.-38     	; 0x7fe <_ZN13LiquidCrystal5beginEhhh+0x5a>
     824:	80 e5       	ldi	r24, 0x50	; 80
     826:	93 ec       	ldi	r25, 0xC3	; 195
     828:	d8 d5       	rcall	.+2992   	; 0x13da <delayMicroseconds>
     82a:	60 e0       	ldi	r22, 0x00	; 0
     82c:	8c 81       	ldd	r24, Y+4	; 0x04
     82e:	f8 d6       	rcall	.+3568   	; 0x1620 <digitalWrite>
     830:	60 e0       	ldi	r22, 0x00	; 0
     832:	8e 81       	ldd	r24, Y+6	; 0x06
     834:	f5 d6       	rcall	.+3562   	; 0x1620 <digitalWrite>
     836:	8d 81       	ldd	r24, Y+5	; 0x05
     838:	8f 3f       	cpi	r24, 0xFF	; 255
     83a:	11 f0       	breq	.+4      	; 0x840 <_ZN13LiquidCrystal5beginEhhh+0x9c>
     83c:	60 e0       	ldi	r22, 0x00	; 0
     83e:	f0 d6       	rcall	.+3552   	; 0x1620 <digitalWrite>
     840:	6f 85       	ldd	r22, Y+15	; 0x0f
     842:	64 fd       	sbrc	r22, 4
     844:	16 c0       	rjmp	.+44     	; 0x872 <_ZN13LiquidCrystal5beginEhhh+0xce>
     846:	63 e0       	ldi	r22, 0x03	; 3
     848:	ce 01       	movw	r24, r28
     84a:	12 df       	rcall	.-476    	; 0x670 <_ZN13LiquidCrystal10write4bitsEh>
     84c:	84 e9       	ldi	r24, 0x94	; 148
     84e:	91 e1       	ldi	r25, 0x11	; 17
     850:	c4 d5       	rcall	.+2952   	; 0x13da <delayMicroseconds>
     852:	63 e0       	ldi	r22, 0x03	; 3
     854:	ce 01       	movw	r24, r28
     856:	0c df       	rcall	.-488    	; 0x670 <_ZN13LiquidCrystal10write4bitsEh>
     858:	84 e9       	ldi	r24, 0x94	; 148
     85a:	91 e1       	ldi	r25, 0x11	; 17
     85c:	be d5       	rcall	.+2940   	; 0x13da <delayMicroseconds>
     85e:	63 e0       	ldi	r22, 0x03	; 3
     860:	ce 01       	movw	r24, r28
     862:	06 df       	rcall	.-500    	; 0x670 <_ZN13LiquidCrystal10write4bitsEh>
     864:	86 e9       	ldi	r24, 0x96	; 150
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	b8 d5       	rcall	.+2928   	; 0x13da <delayMicroseconds>
     86a:	62 e0       	ldi	r22, 0x02	; 2
     86c:	ce 01       	movw	r24, r28
     86e:	00 df       	rcall	.-512    	; 0x670 <_ZN13LiquidCrystal10write4bitsEh>
     870:	11 c0       	rjmp	.+34     	; 0x894 <_ZN13LiquidCrystal5beginEhhh+0xf0>
     872:	60 62       	ori	r22, 0x20	; 32
     874:	ce 01       	movw	r24, r28
     876:	76 df       	rcall	.-276    	; 0x764 <_ZN13LiquidCrystal7commandEh>
     878:	84 e9       	ldi	r24, 0x94	; 148
     87a:	91 e1       	ldi	r25, 0x11	; 17
     87c:	ae d5       	rcall	.+2908   	; 0x13da <delayMicroseconds>
     87e:	6f 85       	ldd	r22, Y+15	; 0x0f
     880:	60 62       	ori	r22, 0x20	; 32
     882:	ce 01       	movw	r24, r28
     884:	6f df       	rcall	.-290    	; 0x764 <_ZN13LiquidCrystal7commandEh>
     886:	86 e9       	ldi	r24, 0x96	; 150
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	a7 d5       	rcall	.+2894   	; 0x13da <delayMicroseconds>
     88c:	6f 85       	ldd	r22, Y+15	; 0x0f
     88e:	60 62       	ori	r22, 0x20	; 32
     890:	ce 01       	movw	r24, r28
     892:	68 df       	rcall	.-304    	; 0x764 <_ZN13LiquidCrystal7commandEh>
     894:	6f 85       	ldd	r22, Y+15	; 0x0f
     896:	60 62       	ori	r22, 0x20	; 32
     898:	ce 01       	movw	r24, r28
     89a:	64 df       	rcall	.-312    	; 0x764 <_ZN13LiquidCrystal7commandEh>
     89c:	84 e0       	ldi	r24, 0x04	; 4
     89e:	88 8b       	std	Y+16, r24	; 0x10
     8a0:	ce 01       	movw	r24, r28
     8a2:	79 df       	rcall	.-270    	; 0x796 <_ZN13LiquidCrystal7displayEv>
     8a4:	ce 01       	movw	r24, r28
     8a6:	60 df       	rcall	.-320    	; 0x768 <_ZN13LiquidCrystal5clearEv>
     8a8:	82 e0       	ldi	r24, 0x02	; 2
     8aa:	89 8b       	std	Y+17, r24	; 0x11
     8ac:	66 e0       	ldi	r22, 0x06	; 6
     8ae:	ce 01       	movw	r24, r28
     8b0:	df 91       	pop	r29
     8b2:	cf 91       	pop	r28
     8b4:	1f 91       	pop	r17
     8b6:	0f 91       	pop	r16
     8b8:	ff 90       	pop	r15
     8ba:	ef 90       	pop	r14
     8bc:	53 cf       	rjmp	.-346    	; 0x764 <_ZN13LiquidCrystal7commandEh>

000008be <_ZN13LiquidCrystalC1Ehhhhhh>:
     8be:	cf 92       	push	r12
     8c0:	ef 92       	push	r14
     8c2:	0f 93       	push	r16
     8c4:	fc 01       	movw	r30, r24
     8c6:	13 82       	std	Z+3, r1	; 0x03
     8c8:	12 82       	std	Z+2, r1	; 0x02
     8ca:	89 e7       	ldi	r24, 0x79	; 121
     8cc:	92 e0       	ldi	r25, 0x02	; 2
     8ce:	91 83       	std	Z+1, r25	; 0x01
     8d0:	80 83       	st	Z, r24
     8d2:	64 83       	std	Z+4, r22	; 0x04
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	85 83       	std	Z+5, r24	; 0x05
     8d8:	46 83       	std	Z+6, r20	; 0x06
     8da:	27 83       	std	Z+7, r18	; 0x07
     8dc:	00 87       	std	Z+8, r16	; 0x08
     8de:	e1 86       	std	Z+9, r14	; 0x09
     8e0:	c2 86       	std	Z+10, r12	; 0x0a
     8e2:	13 86       	std	Z+11, r1	; 0x0b
     8e4:	14 86       	std	Z+12, r1	; 0x0c
     8e6:	15 86       	std	Z+13, r1	; 0x0d
     8e8:	16 86       	std	Z+14, r1	; 0x0e
     8ea:	17 86       	std	Z+15, r1	; 0x0f
     8ec:	20 e0       	ldi	r18, 0x00	; 0
     8ee:	41 e0       	ldi	r20, 0x01	; 1
     8f0:	60 e1       	ldi	r22, 0x10	; 16
     8f2:	cf 01       	movw	r24, r30
     8f4:	0f 91       	pop	r16
     8f6:	ef 90       	pop	r14
     8f8:	cf 90       	pop	r12
     8fa:	54 cf       	rjmp	.-344    	; 0x7a4 <_ZN13LiquidCrystal5beginEhhh>

000008fc <_ZN13LiquidCrystal5writeEh>:
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
     8fc:	41 e0       	ldi	r20, 0x01	; 1
     8fe:	0e df       	rcall	.-484    	; 0x71c <_ZN13LiquidCrystal4sendEhh>
  return 1; // assume sucess
}
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	08 95       	ret

00000906 <lcd_get>:
		return new LiquidCrystal(rs, enable, d0, d1, d2, d3);
	 }

	 void lcd_free(LiquidCrystal * lcd)
	 {
		delete lcd;
     906:	bf 92       	push	r11
     908:	cf 92       	push	r12
     90a:	df 92       	push	r13
     90c:	ef 92       	push	r14
     90e:	ff 92       	push	r15
     910:	0f 93       	push	r16
     912:	1f 93       	push	r17
     914:	cf 93       	push	r28
     916:	df 93       	push	r29
     918:	18 2f       	mov	r17, r24
     91a:	f6 2e       	mov	r15, r22
     91c:	d4 2e       	mov	r13, r20
     91e:	b2 2e       	mov	r11, r18
     920:	88 e1       	ldi	r24, 0x18	; 24
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	92 d2       	rcall	.+1316   	; 0xe4a <_Znwj>
     926:	ec 01       	movw	r28, r24
     928:	ce 2c       	mov	r12, r14
     92a:	e0 2e       	mov	r14, r16
     92c:	0b 2d       	mov	r16, r11
     92e:	2d 2d       	mov	r18, r13
     930:	4f 2d       	mov	r20, r15
     932:	61 2f       	mov	r22, r17
     934:	c4 df       	rcall	.-120    	; 0x8be <_ZN13LiquidCrystalC1Ehhhhhh>
     936:	ce 01       	movw	r24, r28
     938:	df 91       	pop	r29
     93a:	cf 91       	pop	r28
     93c:	1f 91       	pop	r17
     93e:	0f 91       	pop	r16
     940:	ff 90       	pop	r15
     942:	ef 90       	pop	r14
     944:	df 90       	pop	r13
     946:	cf 90       	pop	r12
     948:	bf 90       	pop	r11
     94a:	08 95       	ret

0000094c <lcd_begin>:
	 }

	 void lcd_begin(LiquidCrystal *lcd, uint8_t cols, uint8_t rows)
	 {
		lcd->begin(cols, rows);
     94c:	20 e0       	ldi	r18, 0x00	; 0
     94e:	2a cf       	rjmp	.-428    	; 0x7a4 <_ZN13LiquidCrystal5beginEhhh>

00000950 <lcd_clear>:
     950:	0b cf       	rjmp	.-490    	; 0x768 <_ZN13LiquidCrystal5clearEv>

00000952 <lcd_set_cursor>:
     952:	0f cf       	rjmp	.-482    	; 0x772 <_ZN13LiquidCrystal9setCursorEhh>

00000954 <lcd_print>:
     954:	ba c2       	rjmp	.+1396   	; 0xeca <_ZN5Print5printEPKc>

00000956 <setup>:

controller rc_controller;

void setup() {
	// put your setup code here, to run once:
	controller_initialize(&rc_controller);
     956:	82 e4       	ldi	r24, 0x42	; 66
     958:	93 e0       	ldi	r25, 0x03	; 3
     95a:	d9 cc       	rjmp	.-1614   	; 0x30e <controller_initialize>

0000095c <loop>:
}

void loop() {
     95c:	08 95       	ret

0000095e <tact_switch_board_create>:
#include <tact_switch_board.h>

tact_switch_board *tact_switch_board_create(char data_pin, char interrupt_pin)
{
     95e:	0f 93       	push	r16
     960:	1f 93       	push	r17
     962:	cf 93       	push	r28
     964:	df 93       	push	r29
     966:	18 2f       	mov	r17, r24
     968:	06 2f       	mov	r16, r22
	tact_switch_board *circuit = malloc(sizeof(tact_switch_board));
     96a:	86 e1       	ldi	r24, 0x16	; 22
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	e7 d6       	rcall	.+3534   	; 0x173e <malloc>
     970:	ec 01       	movw	r28, r24
	circuit->data_pin = data_pin;
     972:	18 83       	st	Y, r17
	circuit->interrupt_pin = interrupt_pin;
     974:	09 83       	std	Y+1, r16	; 0x01
	
	circuit->buttons[0] = (analog_button){ .minimum = 692, .maximum = 702, .type = LIGHT_BUTTON};
     976:	85 e0       	ldi	r24, 0x05	; 5
     978:	e7 e1       	ldi	r30, 0x17	; 23
     97a:	f2 e0       	ldi	r31, 0x02	; 2
     97c:	de 01       	movw	r26, r28
     97e:	12 96       	adiw	r26, 0x02	; 2
     980:	01 90       	ld	r0, Z+
     982:	0d 92       	st	X+, r0
     984:	8a 95       	dec	r24
     986:	e1 f7       	brne	.-8      	; 0x980 <tact_switch_board_create+0x22>
	circuit->buttons[1] = (analog_button){ .minimum = 830, .maximum = 840, .type = BUTTON_2};
     988:	85 e0       	ldi	r24, 0x05	; 5
     98a:	ec e1       	ldi	r30, 0x1C	; 28
     98c:	f2 e0       	ldi	r31, 0x02	; 2
     98e:	de 01       	movw	r26, r28
     990:	17 96       	adiw	r26, 0x07	; 7
     992:	01 90       	ld	r0, Z+
     994:	0d 92       	st	X+, r0
     996:	8a 95       	dec	r24
     998:	e1 f7       	brne	.-8      	; 0x992 <tact_switch_board_create+0x34>
	circuit->buttons[2] = (analog_button){ .minimum = 922, .maximum = 932, .type = BUTTON_3};
     99a:	85 e0       	ldi	r24, 0x05	; 5
     99c:	e1 e2       	ldi	r30, 0x21	; 33
     99e:	f2 e0       	ldi	r31, 0x02	; 2
     9a0:	de 01       	movw	r26, r28
     9a2:	1c 96       	adiw	r26, 0x0c	; 12
     9a4:	01 90       	ld	r0, Z+
     9a6:	0d 92       	st	X+, r0
     9a8:	8a 95       	dec	r24
     9aa:	e1 f7       	brne	.-8      	; 0x9a4 <tact_switch_board_create+0x46>
	circuit->buttons[3] = (analog_button){ .minimum = 969, .maximum = 979, .type = OPTIONS_BUTTON};
     9ac:	85 e0       	ldi	r24, 0x05	; 5
     9ae:	e6 e2       	ldi	r30, 0x26	; 38
     9b0:	f2 e0       	ldi	r31, 0x02	; 2
     9b2:	de 01       	movw	r26, r28
     9b4:	51 96       	adiw	r26, 0x11	; 17
     9b6:	01 90       	ld	r0, Z+
     9b8:	0d 92       	st	X+, r0
     9ba:	8a 95       	dec	r24
     9bc:	e1 f7       	brne	.-8      	; 0x9b6 <tact_switch_board_create+0x58>

	pinMode(circuit->data_pin, INPUT);
     9be:	60 e0       	ldi	r22, 0x00	; 0
     9c0:	81 2f       	mov	r24, r17
     9c2:	f2 d5       	rcall	.+3044   	; 0x15a8 <pinMode>

	return circuit;
}
     9c4:	ce 01       	movw	r24, r28
     9c6:	df 91       	pop	r29
     9c8:	cf 91       	pop	r28
     9ca:	1f 91       	pop	r17
     9cc:	0f 91       	pop	r16
     9ce:	08 95       	ret

000009d0 <tact_switch_button_pressed>:

analog_button tact_switch_button_pressed(tact_switch_board *switches, int value)
{
     9d0:	0f 93       	push	r16
     9d2:	1f 93       	push	r17
     9d4:	cf 93       	push	r28
     9d6:	df 93       	push	r29
     9d8:	cd b7       	in	r28, 0x3d	; 61
     9da:	de b7       	in	r29, 0x3e	; 62
     9dc:	2a 97       	sbiw	r28, 0x0a	; 10
     9de:	0f b6       	in	r0, 0x3f	; 63
     9e0:	f8 94       	cli
     9e2:	de bf       	out	0x3e, r29	; 62
     9e4:	0f be       	out	0x3f, r0	; 63
     9e6:	cd bf       	out	0x3d, r28	; 61
     9e8:	8c 01       	movw	r16, r24
     9ea:	0c 5e       	subi	r16, 0xEC	; 236
     9ec:	1f 4f       	sbci	r17, 0xFF	; 255
    for(int index = 0; index < 4; ++index)
    {
	    analog_button button = switches->buttons[index];
     9ee:	25 e0       	ldi	r18, 0x05	; 5
     9f0:	fc 01       	movw	r30, r24
     9f2:	32 96       	adiw	r30, 0x02	; 2
     9f4:	de 01       	movw	r26, r28
     9f6:	16 96       	adiw	r26, 0x06	; 6
     9f8:	01 90       	ld	r0, Z+
     9fa:	0d 92       	st	X+, r0
     9fc:	2a 95       	dec	r18
     9fe:	e1 f7       	brne	.-8      	; 0x9f8 <tact_switch_button_pressed+0x28>
     a00:	fc 01       	movw	r30, r24
     a02:	42 81       	ldd	r20, Z+2	; 0x02
     a04:	53 81       	ldd	r21, Z+3	; 0x03
	    if(value > button.minimum && value < button.maximum)
     a06:	46 17       	cp	r20, r22
     a08:	57 07       	cpc	r21, r23
     a0a:	dc f4       	brge	.+54     	; 0xa42 <tact_switch_button_pressed+0x72>

analog_button tact_switch_button_pressed(tact_switch_board *switches, int value)
{
    for(int index = 0; index < 4; ++index)
    {
	    analog_button button = switches->buttons[index];
     a0c:	24 81       	ldd	r18, Z+4	; 0x04
     a0e:	35 81       	ldd	r19, Z+5	; 0x05
	    if(value > button.minimum && value < button.maximum)
     a10:	62 17       	cp	r22, r18
     a12:	73 07       	cpc	r23, r19
     a14:	b4 f4       	brge	.+44     	; 0xa42 <tact_switch_button_pressed+0x72>
	    {
		    return button;
     a16:	5f 83       	std	Y+7, r21	; 0x07
     a18:	4e 83       	std	Y+6, r20	; 0x06
     a1a:	39 87       	std	Y+9, r19	; 0x09
     a1c:	28 87       	std	Y+8, r18	; 0x08
     a1e:	85 e0       	ldi	r24, 0x05	; 5
     a20:	fe 01       	movw	r30, r28
     a22:	36 96       	adiw	r30, 0x06	; 6
     a24:	de 01       	movw	r26, r28
     a26:	11 96       	adiw	r26, 0x01	; 1
     a28:	01 90       	ld	r0, Z+
     a2a:	0d 92       	st	X+, r0
     a2c:	8a 95       	dec	r24
     a2e:	e1 f7       	brne	.-8      	; 0xa28 <tact_switch_button_pressed+0x58>
     a30:	29 81       	ldd	r18, Y+1	; 0x01
     a32:	3a 81       	ldd	r19, Y+2	; 0x02
     a34:	4b 81       	ldd	r20, Y+3	; 0x03
     a36:	5c 81       	ldd	r21, Y+4	; 0x04
     a38:	6d 81       	ldd	r22, Y+5	; 0x05
     a3a:	70 e0       	ldi	r23, 0x00	; 0
     a3c:	80 e0       	ldi	r24, 0x00	; 0
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <tact_switch_button_pressed+0x7a>
     a42:	05 96       	adiw	r24, 0x05	; 5
	return circuit;
}

analog_button tact_switch_button_pressed(tact_switch_board *switches, int value)
{
    for(int index = 0; index < 4; ++index)
     a44:	80 17       	cp	r24, r16
     a46:	91 07       	cpc	r25, r17
     a48:	91 f6       	brne	.-92     	; 0x9ee <tact_switch_button_pressed+0x1e>
	    if(value > button.minimum && value < button.maximum)
	    {
		    return button;
	    }
    }
}
     a4a:	2a 96       	adiw	r28, 0x0a	; 10
     a4c:	0f b6       	in	r0, 0x3f	; 63
     a4e:	f8 94       	cli
     a50:	de bf       	out	0x3e, r29	; 62
     a52:	0f be       	out	0x3f, r0	; 63
     a54:	cd bf       	out	0x3d, r28	; 61
     a56:	df 91       	pop	r29
     a58:	cf 91       	pop	r28
     a5a:	1f 91       	pop	r17
     a5c:	0f 91       	pop	r16
     a5e:	08 95       	ret

00000a60 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     a60:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     a62:	91 8d       	ldd	r25, Z+25	; 0x19
     a64:	22 8d       	ldd	r18, Z+26	; 0x1a
     a66:	89 2f       	mov	r24, r25
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	80 5c       	subi	r24, 0xC0	; 192
     a6c:	9f 4f       	sbci	r25, 0xFF	; 255
     a6e:	82 1b       	sub	r24, r18
     a70:	91 09       	sbc	r25, r1
}
     a72:	8f 73       	andi	r24, 0x3F	; 63
     a74:	99 27       	eor	r25, r25
     a76:	08 95       	ret

00000a78 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     a78:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     a7a:	91 8d       	ldd	r25, Z+25	; 0x19
     a7c:	82 8d       	ldd	r24, Z+26	; 0x1a
     a7e:	98 17       	cp	r25, r24
     a80:	31 f0       	breq	.+12     	; 0xa8e <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     a82:	82 8d       	ldd	r24, Z+26	; 0x1a
     a84:	e8 0f       	add	r30, r24
     a86:	f1 1d       	adc	r31, r1
     a88:	85 8d       	ldd	r24, Z+29	; 0x1d
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     a8e:	8f ef       	ldi	r24, 0xFF	; 255
     a90:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     a92:	08 95       	ret

00000a94 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     a94:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     a96:	91 8d       	ldd	r25, Z+25	; 0x19
     a98:	82 8d       	ldd	r24, Z+26	; 0x1a
     a9a:	98 17       	cp	r25, r24
     a9c:	61 f0       	breq	.+24     	; 0xab6 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     a9e:	82 8d       	ldd	r24, Z+26	; 0x1a
     aa0:	df 01       	movw	r26, r30
     aa2:	a8 0f       	add	r26, r24
     aa4:	b1 1d       	adc	r27, r1
     aa6:	5d 96       	adiw	r26, 0x1d	; 29
     aa8:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     aaa:	92 8d       	ldd	r25, Z+26	; 0x1a
     aac:	9f 5f       	subi	r25, 0xFF	; 255
     aae:	9f 73       	andi	r25, 0x3F	; 63
     ab0:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     ab6:	8f ef       	ldi	r24, 0xFF	; 255
     ab8:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     aba:	08 95       	ret

00000abc <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     abc:	84 ee       	ldi	r24, 0xE4	; 228
     abe:	96 e0       	ldi	r25, 0x06	; 6
     ac0:	89 2b       	or	r24, r25
     ac2:	39 f0       	breq	.+14     	; 0xad2 <_Z14serialEventRunv+0x16>
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	89 2b       	or	r24, r25
     aca:	19 f0       	breq	.+6      	; 0xad2 <_Z14serialEventRunv+0x16>
     acc:	7d d1       	rcall	.+762    	; 0xdc8 <_Z17Serial0_availablev>
     ace:	81 11       	cpse	r24, r1
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     ad0:	25 c0       	rjmp	.+74     	; 0xb1c <_Z14serialEventRunv+0x60>
     ad2:	80 e0       	ldi	r24, 0x00	; 0
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	89 2b       	or	r24, r25
     ad8:	41 f0       	breq	.+16     	; 0xaea <_Z14serialEventRunv+0x2e>
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	89 2b       	or	r24, r25
     ae0:	21 f0       	breq	.+8      	; 0xaea <_Z14serialEventRunv+0x2e>
     ae2:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     ae6:	81 11       	cpse	r24, r1
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     ae8:	1c c0       	rjmp	.+56     	; 0xb22 <_Z14serialEventRunv+0x66>
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	89 2b       	or	r24, r25
     af0:	41 f0       	breq	.+16     	; 0xb02 <_Z14serialEventRunv+0x46>
     af2:	80 e0       	ldi	r24, 0x00	; 0
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	89 2b       	or	r24, r25
     af8:	21 f0       	breq	.+8      	; 0xb02 <_Z14serialEventRunv+0x46>
     afa:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     afe:	81 11       	cpse	r24, r1
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     b00:	13 c0       	rjmp	.+38     	; 0xb28 <_Z14serialEventRunv+0x6c>
     b02:	80 e0       	ldi	r24, 0x00	; 0
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	89 2b       	or	r24, r25
     b08:	a1 f0       	breq	.+40     	; 0xb32 <_Z14serialEventRunv+0x76>
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	89 2b       	or	r24, r25
     b10:	81 f0       	breq	.+32     	; 0xb32 <_Z14serialEventRunv+0x76>
     b12:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     b16:	81 11       	cpse	r24, r1
     b18:	0a c0       	rjmp	.+20     	; 0xb2e <_Z14serialEventRunv+0x72>
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     b1a:	08 95       	ret
     b1c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     b20:	d8 cf       	rjmp	.-80     	; 0xad2 <_Z14serialEventRunv+0x16>
     b22:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     b26:	e1 cf       	rjmp	.-62     	; 0xaea <_Z14serialEventRunv+0x2e>
     b28:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     b2c:	ea cf       	rjmp	.-44     	; 0xb02 <_Z14serialEventRunv+0x46>
     b2e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     b32:	08 95       	ret

00000b34 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     b34:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     b36:	84 8d       	ldd	r24, Z+28	; 0x1c
     b38:	df 01       	movw	r26, r30
     b3a:	a8 0f       	add	r26, r24
     b3c:	b1 1d       	adc	r27, r1
     b3e:	a3 5a       	subi	r26, 0xA3	; 163
     b40:	bf 4f       	sbci	r27, 0xFF	; 255
     b42:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     b44:	84 8d       	ldd	r24, Z+28	; 0x1c
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	01 96       	adiw	r24, 0x01	; 1
     b4a:	8f 73       	andi	r24, 0x3F	; 63
     b4c:	99 27       	eor	r25, r25
     b4e:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     b50:	a6 89       	ldd	r26, Z+22	; 0x16
     b52:	b7 89       	ldd	r27, Z+23	; 0x17
     b54:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     b56:	a0 89       	ldd	r26, Z+16	; 0x10
     b58:	b1 89       	ldd	r27, Z+17	; 0x11
     b5a:	8c 91       	ld	r24, X
     b5c:	80 64       	ori	r24, 0x40	; 64
     b5e:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     b60:	93 8d       	ldd	r25, Z+27	; 0x1b
     b62:	84 8d       	ldd	r24, Z+28	; 0x1c
     b64:	98 13       	cpse	r25, r24
     b66:	06 c0       	rjmp	.+12     	; 0xb74 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     b68:	02 88       	ldd	r0, Z+18	; 0x12
     b6a:	f3 89       	ldd	r31, Z+19	; 0x13
     b6c:	e0 2d       	mov	r30, r0
     b6e:	80 81       	ld	r24, Z
     b70:	8f 7d       	andi	r24, 0xDF	; 223
     b72:	80 83       	st	Z, r24
     b74:	08 95       	ret

00000b76 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     b76:	ef 92       	push	r14
     b78:	ff 92       	push	r15
     b7a:	0f 93       	push	r16
     b7c:	1f 93       	push	r17
     b7e:	cf 93       	push	r28
     b80:	df 93       	push	r29
     b82:	ec 01       	movw	r28, r24
  _written = true;
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     b88:	9b 8d       	ldd	r25, Y+27	; 0x1b
     b8a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     b8c:	98 13       	cpse	r25, r24
     b8e:	05 c0       	rjmp	.+10     	; 0xb9a <_ZN14HardwareSerial5writeEh+0x24>
     b90:	e8 89       	ldd	r30, Y+16	; 0x10
     b92:	f9 89       	ldd	r31, Y+17	; 0x11
     b94:	80 81       	ld	r24, Z
     b96:	85 fd       	sbrc	r24, 5
     b98:	23 c0       	rjmp	.+70     	; 0xbe0 <_ZN14HardwareSerial5writeEh+0x6a>
     b9a:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     b9c:	0b 8d       	ldd	r16, Y+27	; 0x1b
     b9e:	10 e0       	ldi	r17, 0x00	; 0
     ba0:	0f 5f       	subi	r16, 0xFF	; 255
     ba2:	1f 4f       	sbci	r17, 0xFF	; 255
     ba4:	0f 73       	andi	r16, 0x3F	; 63
     ba6:	11 27       	eor	r17, r17
     ba8:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     baa:	8c 8d       	ldd	r24, Y+28	; 0x1c
     bac:	e8 12       	cpse	r14, r24
     bae:	0b c0       	rjmp	.+22     	; 0xbc6 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
     bb0:	0f b6       	in	r0, 0x3f	; 63
     bb2:	07 fc       	sbrc	r0, 7
     bb4:	fa cf       	rjmp	.-12     	; 0xbaa <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     bb6:	e8 89       	ldd	r30, Y+16	; 0x10
     bb8:	f9 89       	ldd	r31, Y+17	; 0x11
     bba:	80 81       	ld	r24, Z
     bbc:	85 ff       	sbrs	r24, 5
     bbe:	f5 cf       	rjmp	.-22     	; 0xbaa <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     bc0:	ce 01       	movw	r24, r28
     bc2:	b8 df       	rcall	.-144    	; 0xb34 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     bc4:	f2 cf       	rjmp	.-28     	; 0xbaa <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     bc6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bc8:	fe 01       	movw	r30, r28
     bca:	e8 0f       	add	r30, r24
     bcc:	f1 1d       	adc	r31, r1
     bce:	e3 5a       	subi	r30, 0xA3	; 163
     bd0:	ff 4f       	sbci	r31, 0xFF	; 255
     bd2:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
     bd4:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     bd6:	ea 89       	ldd	r30, Y+18	; 0x12
     bd8:	fb 89       	ldd	r31, Y+19	; 0x13
     bda:	80 81       	ld	r24, Z
     bdc:	80 62       	ori	r24, 0x20	; 32
     bde:	07 c0       	rjmp	.+14     	; 0xbee <_ZN14HardwareSerial5writeEh+0x78>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     be0:	ee 89       	ldd	r30, Y+22	; 0x16
     be2:	ff 89       	ldd	r31, Y+23	; 0x17
     be4:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
     be6:	e8 89       	ldd	r30, Y+16	; 0x10
     be8:	f9 89       	ldd	r31, Y+17	; 0x11
     bea:	80 81       	ld	r24, Z
     bec:	80 64       	ori	r24, 0x40	; 64
     bee:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	df 91       	pop	r29
     bf6:	cf 91       	pop	r28
     bf8:	1f 91       	pop	r17
     bfa:	0f 91       	pop	r16
     bfc:	ff 90       	pop	r15
     bfe:	ef 90       	pop	r14
     c00:	08 95       	ret

00000c02 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     c02:	cf 93       	push	r28
     c04:	df 93       	push	r29
     c06:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     c08:	88 8d       	ldd	r24, Y+24	; 0x18
     c0a:	88 23       	and	r24, r24
     c0c:	c1 f0       	breq	.+48     	; 0xc3e <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     c0e:	ea 89       	ldd	r30, Y+18	; 0x12
     c10:	fb 89       	ldd	r31, Y+19	; 0x13
     c12:	80 81       	ld	r24, Z
     c14:	85 fd       	sbrc	r24, 5
     c16:	05 c0       	rjmp	.+10     	; 0xc22 <_ZN14HardwareSerial5flushEv+0x20>
     c18:	a8 89       	ldd	r26, Y+16	; 0x10
     c1a:	b9 89       	ldd	r27, Y+17	; 0x11
     c1c:	8c 91       	ld	r24, X
     c1e:	86 fd       	sbrc	r24, 6
     c20:	0e c0       	rjmp	.+28     	; 0xc3e <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     c22:	0f b6       	in	r0, 0x3f	; 63
     c24:	07 fc       	sbrc	r0, 7
     c26:	f5 cf       	rjmp	.-22     	; 0xc12 <_ZN14HardwareSerial5flushEv+0x10>
     c28:	80 81       	ld	r24, Z
     c2a:	85 ff       	sbrs	r24, 5
     c2c:	f2 cf       	rjmp	.-28     	; 0xc12 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     c2e:	a8 89       	ldd	r26, Y+16	; 0x10
     c30:	b9 89       	ldd	r27, Y+17	; 0x11
     c32:	8c 91       	ld	r24, X
     c34:	85 ff       	sbrs	r24, 5
     c36:	ed cf       	rjmp	.-38     	; 0xc12 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     c38:	ce 01       	movw	r24, r28
     c3a:	7c df       	rcall	.-264    	; 0xb34 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     c3c:	e8 cf       	rjmp	.-48     	; 0xc0e <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     c3e:	df 91       	pop	r29
     c40:	cf 91       	pop	r28
     c42:	08 95       	ret

00000c44 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     c44:	cf 92       	push	r12
     c46:	df 92       	push	r13
     c48:	ef 92       	push	r14
     c4a:	ff 92       	push	r15
     c4c:	1f 93       	push	r17
     c4e:	cf 93       	push	r28
     c50:	df 93       	push	r29
     c52:	ec 01       	movw	r28, r24
     c54:	6a 01       	movw	r12, r20
     c56:	7b 01       	movw	r14, r22
     c58:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     c5a:	e8 89       	ldd	r30, Y+16	; 0x10
     c5c:	f9 89       	ldd	r31, Y+17	; 0x11
     c5e:	82 e0       	ldi	r24, 0x02	; 2
     c60:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     c62:	41 15       	cp	r20, r1
     c64:	51 4e       	sbci	r21, 0xE1	; 225
     c66:	61 05       	cpc	r22, r1
     c68:	71 05       	cpc	r23, r1
     c6a:	a9 f0       	breq	.+42     	; 0xc96 <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     c6c:	60 e0       	ldi	r22, 0x00	; 0
     c6e:	79 e0       	ldi	r23, 0x09	; 9
     c70:	8d e3       	ldi	r24, 0x3D	; 61
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	a7 01       	movw	r20, r14
     c76:	96 01       	movw	r18, r12
     c78:	38 d5       	rcall	.+2672   	; 0x16ea <__udivmodsi4>
     c7a:	da 01       	movw	r26, r20
     c7c:	c9 01       	movw	r24, r18
     c7e:	01 97       	sbiw	r24, 0x01	; 1
     c80:	a1 09       	sbc	r26, r1
     c82:	b1 09       	sbc	r27, r1
     c84:	b6 95       	lsr	r27
     c86:	a7 95       	ror	r26
     c88:	97 95       	ror	r25
     c8a:	87 95       	ror	r24
     c8c:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     c8e:	21 15       	cp	r18, r1
     c90:	80 e1       	ldi	r24, 0x10	; 16
     c92:	38 07       	cpc	r19, r24
     c94:	a0 f0       	brcs	.+40     	; 0xcbe <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
     c96:	e8 89       	ldd	r30, Y+16	; 0x10
     c98:	f9 89       	ldd	r31, Y+17	; 0x11
     c9a:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     c9c:	60 e8       	ldi	r22, 0x80	; 128
     c9e:	74 e8       	ldi	r23, 0x84	; 132
     ca0:	8e e1       	ldi	r24, 0x1E	; 30
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	a7 01       	movw	r20, r14
     ca6:	96 01       	movw	r18, r12
     ca8:	20 d5       	rcall	.+2624   	; 0x16ea <__udivmodsi4>
     caa:	da 01       	movw	r26, r20
     cac:	c9 01       	movw	r24, r18
     cae:	01 97       	sbiw	r24, 0x01	; 1
     cb0:	a1 09       	sbc	r26, r1
     cb2:	b1 09       	sbc	r27, r1
     cb4:	b6 95       	lsr	r27
     cb6:	a7 95       	ror	r26
     cb8:	97 95       	ror	r25
     cba:	87 95       	ror	r24
     cbc:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     cbe:	ec 85       	ldd	r30, Y+12	; 0x0c
     cc0:	fd 85       	ldd	r31, Y+13	; 0x0d
     cc2:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     cc4:	ee 85       	ldd	r30, Y+14	; 0x0e
     cc6:	ff 85       	ldd	r31, Y+15	; 0x0f
     cc8:	20 83       	st	Z, r18

  _written = false;
     cca:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     ccc:	ec 89       	ldd	r30, Y+20	; 0x14
     cce:	fd 89       	ldd	r31, Y+21	; 0x15
     cd0:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     cd2:	ea 89       	ldd	r30, Y+18	; 0x12
     cd4:	fb 89       	ldd	r31, Y+19	; 0x13
     cd6:	80 81       	ld	r24, Z
     cd8:	80 61       	ori	r24, 0x10	; 16
     cda:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     cdc:	ea 89       	ldd	r30, Y+18	; 0x12
     cde:	fb 89       	ldd	r31, Y+19	; 0x13
     ce0:	80 81       	ld	r24, Z
     ce2:	88 60       	ori	r24, 0x08	; 8
     ce4:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     ce6:	ea 89       	ldd	r30, Y+18	; 0x12
     ce8:	fb 89       	ldd	r31, Y+19	; 0x13
     cea:	80 81       	ld	r24, Z
     cec:	80 68       	ori	r24, 0x80	; 128
     cee:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     cf0:	ea 89       	ldd	r30, Y+18	; 0x12
     cf2:	fb 89       	ldd	r31, Y+19	; 0x13
     cf4:	80 81       	ld	r24, Z
     cf6:	8f 7d       	andi	r24, 0xDF	; 223
     cf8:	80 83       	st	Z, r24
}
     cfa:	df 91       	pop	r29
     cfc:	cf 91       	pop	r28
     cfe:	1f 91       	pop	r17
     d00:	ff 90       	pop	r15
     d02:	ef 90       	pop	r14
     d04:	df 90       	pop	r13
     d06:	cf 90       	pop	r12
     d08:	08 95       	ret

00000d0a <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     d0a:	1f 92       	push	r1
     d0c:	0f 92       	push	r0
     d0e:	0f b6       	in	r0, 0x3f	; 63
     d10:	0f 92       	push	r0
     d12:	11 24       	eor	r1, r1
     d14:	0b b6       	in	r0, 0x3b	; 59
     d16:	0f 92       	push	r0
     d18:	2f 93       	push	r18
     d1a:	8f 93       	push	r24
     d1c:	9f 93       	push	r25
     d1e:	ef 93       	push	r30
     d20:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     d22:	e0 91 ac 02 	lds	r30, 0x02AC	; 0x8002ac <__data_end+0x10>
     d26:	f0 91 ad 02 	lds	r31, 0x02AD	; 0x8002ad <__data_end+0x11>
     d2a:	80 81       	ld	r24, Z
     d2c:	e0 91 b2 02 	lds	r30, 0x02B2	; 0x8002b2 <__data_end+0x16>
     d30:	f0 91 b3 02 	lds	r31, 0x02B3	; 0x8002b3 <__data_end+0x17>
     d34:	82 fd       	sbrc	r24, 2
     d36:	12 c0       	rjmp	.+36     	; 0xd5c <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     d38:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     d3a:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <__data_end+0x19>
     d3e:	8f 5f       	subi	r24, 0xFF	; 255
     d40:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     d42:	20 91 b6 02 	lds	r18, 0x02B6	; 0x8002b6 <__data_end+0x1a>
     d46:	82 17       	cp	r24, r18
     d48:	51 f0       	breq	.+20     	; 0xd5e <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
     d4a:	e0 91 b5 02 	lds	r30, 0x02B5	; 0x8002b5 <__data_end+0x19>
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	e4 56       	subi	r30, 0x64	; 100
     d52:	fd 4f       	sbci	r31, 0xFD	; 253
     d54:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     d56:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <__data_end+0x19>
     d5a:	01 c0       	rjmp	.+2      	; 0xd5e <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     d5c:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     d5e:	ff 91       	pop	r31
     d60:	ef 91       	pop	r30
     d62:	9f 91       	pop	r25
     d64:	8f 91       	pop	r24
     d66:	2f 91       	pop	r18
     d68:	0f 90       	pop	r0
     d6a:	0b be       	out	0x3b, r0	; 59
     d6c:	0f 90       	pop	r0
     d6e:	0f be       	out	0x3f, r0	; 63
     d70:	0f 90       	pop	r0
     d72:	1f 90       	pop	r1
     d74:	18 95       	reti

00000d76 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     d76:	1f 92       	push	r1
     d78:	0f 92       	push	r0
     d7a:	0f b6       	in	r0, 0x3f	; 63
     d7c:	0f 92       	push	r0
     d7e:	11 24       	eor	r1, r1
     d80:	0b b6       	in	r0, 0x3b	; 59
     d82:	0f 92       	push	r0
     d84:	2f 93       	push	r18
     d86:	3f 93       	push	r19
     d88:	4f 93       	push	r20
     d8a:	5f 93       	push	r21
     d8c:	6f 93       	push	r22
     d8e:	7f 93       	push	r23
     d90:	8f 93       	push	r24
     d92:	9f 93       	push	r25
     d94:	af 93       	push	r26
     d96:	bf 93       	push	r27
     d98:	ef 93       	push	r30
     d9a:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     d9c:	8c e9       	ldi	r24, 0x9C	; 156
     d9e:	92 e0       	ldi	r25, 0x02	; 2
     da0:	c9 de       	rcall	.-622    	; 0xb34 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     da2:	ff 91       	pop	r31
     da4:	ef 91       	pop	r30
     da6:	bf 91       	pop	r27
     da8:	af 91       	pop	r26
     daa:	9f 91       	pop	r25
     dac:	8f 91       	pop	r24
     dae:	7f 91       	pop	r23
     db0:	6f 91       	pop	r22
     db2:	5f 91       	pop	r21
     db4:	4f 91       	pop	r20
     db6:	3f 91       	pop	r19
     db8:	2f 91       	pop	r18
     dba:	0f 90       	pop	r0
     dbc:	0b be       	out	0x3b, r0	; 59
     dbe:	0f 90       	pop	r0
     dc0:	0f be       	out	0x3f, r0	; 63
     dc2:	0f 90       	pop	r0
     dc4:	1f 90       	pop	r1
     dc6:	18 95       	reti

00000dc8 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     dc8:	8c e9       	ldi	r24, 0x9C	; 156
     dca:	92 e0       	ldi	r25, 0x02	; 2
     dcc:	49 de       	rcall	.-878    	; 0xa60 <_ZN14HardwareSerial9availableEv>
     dce:	21 e0       	ldi	r18, 0x01	; 1
     dd0:	89 2b       	or	r24, r25
     dd2:	09 f4       	brne	.+2      	; 0xdd6 <_Z17Serial0_availablev+0xe>
     dd4:	20 e0       	ldi	r18, 0x00	; 0
}
     dd6:	82 2f       	mov	r24, r18
     dd8:	08 95       	ret

00000dda <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     dda:	ec e9       	ldi	r30, 0x9C	; 156
     ddc:	f2 e0       	ldi	r31, 0x02	; 2
     dde:	13 82       	std	Z+3, r1	; 0x03
     de0:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     de2:	88 ee       	ldi	r24, 0xE8	; 232
     de4:	93 e0       	ldi	r25, 0x03	; 3
     de6:	a0 e0       	ldi	r26, 0x00	; 0
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	84 83       	std	Z+4, r24	; 0x04
     dec:	95 83       	std	Z+5, r25	; 0x05
     dee:	a6 83       	std	Z+6, r26	; 0x06
     df0:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     df2:	81 e8       	ldi	r24, 0x81	; 129
     df4:	92 e0       	ldi	r25, 0x02	; 2
     df6:	91 83       	std	Z+1, r25	; 0x01
     df8:	80 83       	st	Z, r24
     dfa:	85 ec       	ldi	r24, 0xC5	; 197
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	95 87       	std	Z+13, r25	; 0x0d
     e00:	84 87       	std	Z+12, r24	; 0x0c
     e02:	84 ec       	ldi	r24, 0xC4	; 196
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	97 87       	std	Z+15, r25	; 0x0f
     e08:	86 87       	std	Z+14, r24	; 0x0e
     e0a:	80 ec       	ldi	r24, 0xC0	; 192
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	91 8b       	std	Z+17, r25	; 0x11
     e10:	80 8b       	std	Z+16, r24	; 0x10
     e12:	81 ec       	ldi	r24, 0xC1	; 193
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	93 8b       	std	Z+19, r25	; 0x13
     e18:	82 8b       	std	Z+18, r24	; 0x12
     e1a:	82 ec       	ldi	r24, 0xC2	; 194
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	95 8b       	std	Z+21, r25	; 0x15
     e20:	84 8b       	std	Z+20, r24	; 0x14
     e22:	86 ec       	ldi	r24, 0xC6	; 198
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	97 8b       	std	Z+23, r25	; 0x17
     e28:	86 8b       	std	Z+22, r24	; 0x16
     e2a:	11 8e       	std	Z+25, r1	; 0x19
     e2c:	12 8e       	std	Z+26, r1	; 0x1a
     e2e:	13 8e       	std	Z+27, r1	; 0x1b
     e30:	14 8e       	std	Z+28, r1	; 0x1c
     e32:	08 95       	ret

00000e34 <initVariant>:
     e34:	08 95       	ret

00000e36 <main>:
     e36:	dc d2       	rcall	.+1464   	; 0x13f0 <init>
     e38:	fd df       	rcall	.-6      	; 0xe34 <initVariant>
     e3a:	8d dd       	rcall	.-1254   	; 0x956 <setup>
     e3c:	ce e5       	ldi	r28, 0x5E	; 94
     e3e:	d5 e0       	ldi	r29, 0x05	; 5
     e40:	8d dd       	rcall	.-1254   	; 0x95c <loop>
     e42:	20 97       	sbiw	r28, 0x00	; 0
     e44:	e9 f3       	breq	.-6      	; 0xe40 <main+0xa>
     e46:	3a de       	rcall	.-908    	; 0xabc <_Z14serialEventRunv>
     e48:	fb cf       	rjmp	.-10     	; 0xe40 <main+0xa>

00000e4a <_Znwj>:
     e4a:	79 c4       	rjmp	.+2290   	; 0x173e <malloc>

00000e4c <_ZN5Print5writeEPKhj>:
     e4c:	cf 92       	push	r12
     e4e:	df 92       	push	r13
     e50:	ef 92       	push	r14
     e52:	ff 92       	push	r15
     e54:	0f 93       	push	r16
     e56:	1f 93       	push	r17
     e58:	cf 93       	push	r28
     e5a:	df 93       	push	r29
     e5c:	6c 01       	movw	r12, r24
     e5e:	7a 01       	movw	r14, r20
     e60:	8b 01       	movw	r16, r22
     e62:	c0 e0       	ldi	r28, 0x00	; 0
     e64:	d0 e0       	ldi	r29, 0x00	; 0
     e66:	ce 15       	cp	r28, r14
     e68:	df 05       	cpc	r29, r15
     e6a:	81 f0       	breq	.+32     	; 0xe8c <_ZN5Print5writeEPKhj+0x40>
     e6c:	d8 01       	movw	r26, r16
     e6e:	6d 91       	ld	r22, X+
     e70:	8d 01       	movw	r16, r26
     e72:	d6 01       	movw	r26, r12
     e74:	ed 91       	ld	r30, X+
     e76:	fc 91       	ld	r31, X
     e78:	01 90       	ld	r0, Z+
     e7a:	f0 81       	ld	r31, Z
     e7c:	e0 2d       	mov	r30, r0
     e7e:	c6 01       	movw	r24, r12
     e80:	19 95       	eicall
     e82:	89 2b       	or	r24, r25
     e84:	11 f0       	breq	.+4      	; 0xe8a <_ZN5Print5writeEPKhj+0x3e>
     e86:	21 96       	adiw	r28, 0x01	; 1
     e88:	ee cf       	rjmp	.-36     	; 0xe66 <_ZN5Print5writeEPKhj+0x1a>
     e8a:	7e 01       	movw	r14, r28
     e8c:	c7 01       	movw	r24, r14
     e8e:	df 91       	pop	r29
     e90:	cf 91       	pop	r28
     e92:	1f 91       	pop	r17
     e94:	0f 91       	pop	r16
     e96:	ff 90       	pop	r15
     e98:	ef 90       	pop	r14
     e9a:	df 90       	pop	r13
     e9c:	cf 90       	pop	r12
     e9e:	08 95       	ret

00000ea0 <_ZN5Print5writeEPKc>:
     ea0:	61 15       	cp	r22, r1
     ea2:	71 05       	cpc	r23, r1
     ea4:	79 f0       	breq	.+30     	; 0xec4 <_ZN5Print5writeEPKc+0x24>
     ea6:	fb 01       	movw	r30, r22
     ea8:	01 90       	ld	r0, Z+
     eaa:	00 20       	and	r0, r0
     eac:	e9 f7       	brne	.-6      	; 0xea8 <_ZN5Print5writeEPKc+0x8>
     eae:	31 97       	sbiw	r30, 0x01	; 1
     eb0:	af 01       	movw	r20, r30
     eb2:	46 1b       	sub	r20, r22
     eb4:	57 0b       	sbc	r21, r23
     eb6:	dc 01       	movw	r26, r24
     eb8:	ed 91       	ld	r30, X+
     eba:	fc 91       	ld	r31, X
     ebc:	02 80       	ldd	r0, Z+2	; 0x02
     ebe:	f3 81       	ldd	r31, Z+3	; 0x03
     ec0:	e0 2d       	mov	r30, r0
     ec2:	19 94       	eijmp
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	08 95       	ret

00000eca <_ZN5Print5printEPKc>:
     eca:	ea cf       	rjmp	.-44     	; 0xea0 <_ZN5Print5writeEPKc>

00000ecc <_ZN5Print7printlnEv>:
     ecc:	6d e8       	ldi	r22, 0x8D	; 141
     ece:	72 e0       	ldi	r23, 0x02	; 2
     ed0:	e7 cf       	rjmp	.-50     	; 0xea0 <_ZN5Print5writeEPKc>

00000ed2 <_ZN5Print7printlnEPKc>:
     ed2:	0f 93       	push	r16
     ed4:	1f 93       	push	r17
     ed6:	cf 93       	push	r28
     ed8:	df 93       	push	r29
     eda:	ec 01       	movw	r28, r24
     edc:	e1 df       	rcall	.-62     	; 0xea0 <_ZN5Print5writeEPKc>
     ede:	8c 01       	movw	r16, r24
     ee0:	ce 01       	movw	r24, r28
     ee2:	f4 df       	rcall	.-24     	; 0xecc <_ZN5Print7printlnEv>
     ee4:	80 0f       	add	r24, r16
     ee6:	91 1f       	adc	r25, r17
     ee8:	df 91       	pop	r29
     eea:	cf 91       	pop	r28
     eec:	1f 91       	pop	r17
     eee:	0f 91       	pop	r16
     ef0:	08 95       	ret

00000ef2 <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
     ef2:	08 95       	ret

00000ef4 <attachInterrupt>:
     ef4:	88 30       	cpi	r24, 0x08	; 8
     ef6:	08 f0       	brcs	.+2      	; 0xefa <attachInterrupt+0x6>
     ef8:	6f c0       	rjmp	.+222    	; 0xfd8 <attachInterrupt+0xe4>
     efa:	a8 2f       	mov	r26, r24
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	aa 0f       	add	r26, r26
     f00:	bb 1f       	adc	r27, r27
     f02:	aa 5f       	subi	r26, 0xFA	; 250
     f04:	bd 4f       	sbci	r27, 0xFD	; 253
     f06:	11 96       	adiw	r26, 0x01	; 1
     f08:	7c 93       	st	X, r23
     f0a:	6e 93       	st	-X, r22
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	fc 01       	movw	r30, r24
     f10:	31 97       	sbiw	r30, 0x01	; 1
     f12:	e7 30       	cpi	r30, 0x07	; 7
     f14:	f1 05       	cpc	r31, r1
     f16:	98 f5       	brcc	.+102    	; 0xf7e <attachInterrupt+0x8a>
     f18:	88 27       	eor	r24, r24
     f1a:	ee 58       	subi	r30, 0x8E	; 142
     f1c:	ff 4f       	sbci	r31, 0xFF	; 255
     f1e:	8f 4f       	sbci	r24, 0xFF	; 255
     f20:	06 c4       	rjmp	.+2060   	; 0x172e <__tablejump2__>
     f22:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
     f26:	8c 7f       	andi	r24, 0xFC	; 252
     f28:	48 2b       	or	r20, r24
     f2a:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
     f2e:	e8 9a       	sbi	0x1d, 0	; 29
     f30:	08 95       	ret
     f32:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
     f36:	83 7f       	andi	r24, 0xF3	; 243
     f38:	44 0f       	add	r20, r20
     f3a:	55 1f       	adc	r21, r21
     f3c:	44 0f       	add	r20, r20
     f3e:	55 1f       	adc	r21, r21
     f40:	48 2b       	or	r20, r24
     f42:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
     f46:	e9 9a       	sbi	0x1d, 1	; 29
     f48:	08 95       	ret
     f4a:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
     f4e:	8f 7c       	andi	r24, 0xCF	; 207
     f50:	74 e0       	ldi	r23, 0x04	; 4
     f52:	44 0f       	add	r20, r20
     f54:	55 1f       	adc	r21, r21
     f56:	7a 95       	dec	r23
     f58:	e1 f7       	brne	.-8      	; 0xf52 <attachInterrupt+0x5e>
     f5a:	48 2b       	or	r20, r24
     f5c:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
     f60:	ea 9a       	sbi	0x1d, 2	; 29
     f62:	08 95       	ret
     f64:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
     f68:	8f 73       	andi	r24, 0x3F	; 63
     f6a:	66 e0       	ldi	r22, 0x06	; 6
     f6c:	44 0f       	add	r20, r20
     f6e:	55 1f       	adc	r21, r21
     f70:	6a 95       	dec	r22
     f72:	e1 f7       	brne	.-8      	; 0xf6c <attachInterrupt+0x78>
     f74:	48 2b       	or	r20, r24
     f76:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
     f7a:	eb 9a       	sbi	0x1d, 3	; 29
     f7c:	08 95       	ret
     f7e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     f82:	8c 7f       	andi	r24, 0xFC	; 252
     f84:	48 2b       	or	r20, r24
     f86:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     f8a:	ec 9a       	sbi	0x1d, 4	; 29
     f8c:	08 95       	ret
     f8e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     f92:	83 7f       	andi	r24, 0xF3	; 243
     f94:	44 0f       	add	r20, r20
     f96:	55 1f       	adc	r21, r21
     f98:	44 0f       	add	r20, r20
     f9a:	55 1f       	adc	r21, r21
     f9c:	48 2b       	or	r20, r24
     f9e:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     fa2:	ed 9a       	sbi	0x1d, 5	; 29
     fa4:	08 95       	ret
     fa6:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     faa:	8f 7c       	andi	r24, 0xCF	; 207
     fac:	24 e0       	ldi	r18, 0x04	; 4
     fae:	44 0f       	add	r20, r20
     fb0:	55 1f       	adc	r21, r21
     fb2:	2a 95       	dec	r18
     fb4:	e1 f7       	brne	.-8      	; 0xfae <attachInterrupt+0xba>
     fb6:	48 2b       	or	r20, r24
     fb8:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     fbc:	ee 9a       	sbi	0x1d, 6	; 29
     fbe:	08 95       	ret
     fc0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     fc4:	8f 73       	andi	r24, 0x3F	; 63
     fc6:	96 e0       	ldi	r25, 0x06	; 6
     fc8:	44 0f       	add	r20, r20
     fca:	55 1f       	adc	r21, r21
     fcc:	9a 95       	dec	r25
     fce:	e1 f7       	brne	.-8      	; 0xfc8 <attachInterrupt+0xd4>
     fd0:	48 2b       	or	r20, r24
     fd2:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     fd6:	ef 9a       	sbi	0x1d, 7	; 29
     fd8:	08 95       	ret

00000fda <__vector_1>:
IMPLEMENT_ISR(INT3_vect, EXTERNAL_INT_3)
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_4)

#elif defined(EICRA) && defined(EICRB)

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_2)
     fda:	1f 92       	push	r1
     fdc:	0f 92       	push	r0
     fde:	0f b6       	in	r0, 0x3f	; 63
     fe0:	0f 92       	push	r0
     fe2:	11 24       	eor	r1, r1
     fe4:	0b b6       	in	r0, 0x3b	; 59
     fe6:	0f 92       	push	r0
     fe8:	2f 93       	push	r18
     fea:	3f 93       	push	r19
     fec:	4f 93       	push	r20
     fee:	5f 93       	push	r21
     ff0:	6f 93       	push	r22
     ff2:	7f 93       	push	r23
     ff4:	8f 93       	push	r24
     ff6:	9f 93       	push	r25
     ff8:	af 93       	push	r26
     ffa:	bf 93       	push	r27
     ffc:	ef 93       	push	r30
     ffe:	ff 93       	push	r31
    1000:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <intFunc+0x4>
    1004:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <intFunc+0x5>
    1008:	19 95       	eicall
    100a:	ff 91       	pop	r31
    100c:	ef 91       	pop	r30
    100e:	bf 91       	pop	r27
    1010:	af 91       	pop	r26
    1012:	9f 91       	pop	r25
    1014:	8f 91       	pop	r24
    1016:	7f 91       	pop	r23
    1018:	6f 91       	pop	r22
    101a:	5f 91       	pop	r21
    101c:	4f 91       	pop	r20
    101e:	3f 91       	pop	r19
    1020:	2f 91       	pop	r18
    1022:	0f 90       	pop	r0
    1024:	0b be       	out	0x3b, r0	; 59
    1026:	0f 90       	pop	r0
    1028:	0f be       	out	0x3f, r0	; 63
    102a:	0f 90       	pop	r0
    102c:	1f 90       	pop	r1
    102e:	18 95       	reti

00001030 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_3)
    1030:	1f 92       	push	r1
    1032:	0f 92       	push	r0
    1034:	0f b6       	in	r0, 0x3f	; 63
    1036:	0f 92       	push	r0
    1038:	11 24       	eor	r1, r1
    103a:	0b b6       	in	r0, 0x3b	; 59
    103c:	0f 92       	push	r0
    103e:	2f 93       	push	r18
    1040:	3f 93       	push	r19
    1042:	4f 93       	push	r20
    1044:	5f 93       	push	r21
    1046:	6f 93       	push	r22
    1048:	7f 93       	push	r23
    104a:	8f 93       	push	r24
    104c:	9f 93       	push	r25
    104e:	af 93       	push	r26
    1050:	bf 93       	push	r27
    1052:	ef 93       	push	r30
    1054:	ff 93       	push	r31
    1056:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <intFunc+0x6>
    105a:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <intFunc+0x7>
    105e:	19 95       	eicall
    1060:	ff 91       	pop	r31
    1062:	ef 91       	pop	r30
    1064:	bf 91       	pop	r27
    1066:	af 91       	pop	r26
    1068:	9f 91       	pop	r25
    106a:	8f 91       	pop	r24
    106c:	7f 91       	pop	r23
    106e:	6f 91       	pop	r22
    1070:	5f 91       	pop	r21
    1072:	4f 91       	pop	r20
    1074:	3f 91       	pop	r19
    1076:	2f 91       	pop	r18
    1078:	0f 90       	pop	r0
    107a:	0b be       	out	0x3b, r0	; 59
    107c:	0f 90       	pop	r0
    107e:	0f be       	out	0x3f, r0	; 63
    1080:	0f 90       	pop	r0
    1082:	1f 90       	pop	r1
    1084:	18 95       	reti

00001086 <__vector_3>:
IMPLEMENT_ISR(INT2_vect, EXTERNAL_INT_4)
    1086:	1f 92       	push	r1
    1088:	0f 92       	push	r0
    108a:	0f b6       	in	r0, 0x3f	; 63
    108c:	0f 92       	push	r0
    108e:	11 24       	eor	r1, r1
    1090:	0b b6       	in	r0, 0x3b	; 59
    1092:	0f 92       	push	r0
    1094:	2f 93       	push	r18
    1096:	3f 93       	push	r19
    1098:	4f 93       	push	r20
    109a:	5f 93       	push	r21
    109c:	6f 93       	push	r22
    109e:	7f 93       	push	r23
    10a0:	8f 93       	push	r24
    10a2:	9f 93       	push	r25
    10a4:	af 93       	push	r26
    10a6:	bf 93       	push	r27
    10a8:	ef 93       	push	r30
    10aa:	ff 93       	push	r31
    10ac:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <intFunc+0x8>
    10b0:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <intFunc+0x9>
    10b4:	19 95       	eicall
    10b6:	ff 91       	pop	r31
    10b8:	ef 91       	pop	r30
    10ba:	bf 91       	pop	r27
    10bc:	af 91       	pop	r26
    10be:	9f 91       	pop	r25
    10c0:	8f 91       	pop	r24
    10c2:	7f 91       	pop	r23
    10c4:	6f 91       	pop	r22
    10c6:	5f 91       	pop	r21
    10c8:	4f 91       	pop	r20
    10ca:	3f 91       	pop	r19
    10cc:	2f 91       	pop	r18
    10ce:	0f 90       	pop	r0
    10d0:	0b be       	out	0x3b, r0	; 59
    10d2:	0f 90       	pop	r0
    10d4:	0f be       	out	0x3f, r0	; 63
    10d6:	0f 90       	pop	r0
    10d8:	1f 90       	pop	r1
    10da:	18 95       	reti

000010dc <__vector_4>:
IMPLEMENT_ISR(INT3_vect, EXTERNAL_INT_5)
    10dc:	1f 92       	push	r1
    10de:	0f 92       	push	r0
    10e0:	0f b6       	in	r0, 0x3f	; 63
    10e2:	0f 92       	push	r0
    10e4:	11 24       	eor	r1, r1
    10e6:	0b b6       	in	r0, 0x3b	; 59
    10e8:	0f 92       	push	r0
    10ea:	2f 93       	push	r18
    10ec:	3f 93       	push	r19
    10ee:	4f 93       	push	r20
    10f0:	5f 93       	push	r21
    10f2:	6f 93       	push	r22
    10f4:	7f 93       	push	r23
    10f6:	8f 93       	push	r24
    10f8:	9f 93       	push	r25
    10fa:	af 93       	push	r26
    10fc:	bf 93       	push	r27
    10fe:	ef 93       	push	r30
    1100:	ff 93       	push	r31
    1102:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <intFunc+0xa>
    1106:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <intFunc+0xb>
    110a:	19 95       	eicall
    110c:	ff 91       	pop	r31
    110e:	ef 91       	pop	r30
    1110:	bf 91       	pop	r27
    1112:	af 91       	pop	r26
    1114:	9f 91       	pop	r25
    1116:	8f 91       	pop	r24
    1118:	7f 91       	pop	r23
    111a:	6f 91       	pop	r22
    111c:	5f 91       	pop	r21
    111e:	4f 91       	pop	r20
    1120:	3f 91       	pop	r19
    1122:	2f 91       	pop	r18
    1124:	0f 90       	pop	r0
    1126:	0b be       	out	0x3b, r0	; 59
    1128:	0f 90       	pop	r0
    112a:	0f be       	out	0x3f, r0	; 63
    112c:	0f 90       	pop	r0
    112e:	1f 90       	pop	r1
    1130:	18 95       	reti

00001132 <__vector_5>:
IMPLEMENT_ISR(INT4_vect, EXTERNAL_INT_0)
    1132:	1f 92       	push	r1
    1134:	0f 92       	push	r0
    1136:	0f b6       	in	r0, 0x3f	; 63
    1138:	0f 92       	push	r0
    113a:	11 24       	eor	r1, r1
    113c:	0b b6       	in	r0, 0x3b	; 59
    113e:	0f 92       	push	r0
    1140:	2f 93       	push	r18
    1142:	3f 93       	push	r19
    1144:	4f 93       	push	r20
    1146:	5f 93       	push	r21
    1148:	6f 93       	push	r22
    114a:	7f 93       	push	r23
    114c:	8f 93       	push	r24
    114e:	9f 93       	push	r25
    1150:	af 93       	push	r26
    1152:	bf 93       	push	r27
    1154:	ef 93       	push	r30
    1156:	ff 93       	push	r31
    1158:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <intFunc>
    115c:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <intFunc+0x1>
    1160:	19 95       	eicall
    1162:	ff 91       	pop	r31
    1164:	ef 91       	pop	r30
    1166:	bf 91       	pop	r27
    1168:	af 91       	pop	r26
    116a:	9f 91       	pop	r25
    116c:	8f 91       	pop	r24
    116e:	7f 91       	pop	r23
    1170:	6f 91       	pop	r22
    1172:	5f 91       	pop	r21
    1174:	4f 91       	pop	r20
    1176:	3f 91       	pop	r19
    1178:	2f 91       	pop	r18
    117a:	0f 90       	pop	r0
    117c:	0b be       	out	0x3b, r0	; 59
    117e:	0f 90       	pop	r0
    1180:	0f be       	out	0x3f, r0	; 63
    1182:	0f 90       	pop	r0
    1184:	1f 90       	pop	r1
    1186:	18 95       	reti

00001188 <__vector_6>:
IMPLEMENT_ISR(INT5_vect, EXTERNAL_INT_1)
    1188:	1f 92       	push	r1
    118a:	0f 92       	push	r0
    118c:	0f b6       	in	r0, 0x3f	; 63
    118e:	0f 92       	push	r0
    1190:	11 24       	eor	r1, r1
    1192:	0b b6       	in	r0, 0x3b	; 59
    1194:	0f 92       	push	r0
    1196:	2f 93       	push	r18
    1198:	3f 93       	push	r19
    119a:	4f 93       	push	r20
    119c:	5f 93       	push	r21
    119e:	6f 93       	push	r22
    11a0:	7f 93       	push	r23
    11a2:	8f 93       	push	r24
    11a4:	9f 93       	push	r25
    11a6:	af 93       	push	r26
    11a8:	bf 93       	push	r27
    11aa:	ef 93       	push	r30
    11ac:	ff 93       	push	r31
    11ae:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <intFunc+0x2>
    11b2:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <intFunc+0x3>
    11b6:	19 95       	eicall
    11b8:	ff 91       	pop	r31
    11ba:	ef 91       	pop	r30
    11bc:	bf 91       	pop	r27
    11be:	af 91       	pop	r26
    11c0:	9f 91       	pop	r25
    11c2:	8f 91       	pop	r24
    11c4:	7f 91       	pop	r23
    11c6:	6f 91       	pop	r22
    11c8:	5f 91       	pop	r21
    11ca:	4f 91       	pop	r20
    11cc:	3f 91       	pop	r19
    11ce:	2f 91       	pop	r18
    11d0:	0f 90       	pop	r0
    11d2:	0b be       	out	0x3b, r0	; 59
    11d4:	0f 90       	pop	r0
    11d6:	0f be       	out	0x3f, r0	; 63
    11d8:	0f 90       	pop	r0
    11da:	1f 90       	pop	r1
    11dc:	18 95       	reti

000011de <__vector_7>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
    11de:	1f 92       	push	r1
    11e0:	0f 92       	push	r0
    11e2:	0f b6       	in	r0, 0x3f	; 63
    11e4:	0f 92       	push	r0
    11e6:	11 24       	eor	r1, r1
    11e8:	0b b6       	in	r0, 0x3b	; 59
    11ea:	0f 92       	push	r0
    11ec:	2f 93       	push	r18
    11ee:	3f 93       	push	r19
    11f0:	4f 93       	push	r20
    11f2:	5f 93       	push	r21
    11f4:	6f 93       	push	r22
    11f6:	7f 93       	push	r23
    11f8:	8f 93       	push	r24
    11fa:	9f 93       	push	r25
    11fc:	af 93       	push	r26
    11fe:	bf 93       	push	r27
    1200:	ef 93       	push	r30
    1202:	ff 93       	push	r31
    1204:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <intFunc+0xc>
    1208:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <intFunc+0xd>
    120c:	19 95       	eicall
    120e:	ff 91       	pop	r31
    1210:	ef 91       	pop	r30
    1212:	bf 91       	pop	r27
    1214:	af 91       	pop	r26
    1216:	9f 91       	pop	r25
    1218:	8f 91       	pop	r24
    121a:	7f 91       	pop	r23
    121c:	6f 91       	pop	r22
    121e:	5f 91       	pop	r21
    1220:	4f 91       	pop	r20
    1222:	3f 91       	pop	r19
    1224:	2f 91       	pop	r18
    1226:	0f 90       	pop	r0
    1228:	0b be       	out	0x3b, r0	; 59
    122a:	0f 90       	pop	r0
    122c:	0f be       	out	0x3f, r0	; 63
    122e:	0f 90       	pop	r0
    1230:	1f 90       	pop	r1
    1232:	18 95       	reti

00001234 <__vector_8>:
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)
    1234:	1f 92       	push	r1
    1236:	0f 92       	push	r0
    1238:	0f b6       	in	r0, 0x3f	; 63
    123a:	0f 92       	push	r0
    123c:	11 24       	eor	r1, r1
    123e:	0b b6       	in	r0, 0x3b	; 59
    1240:	0f 92       	push	r0
    1242:	2f 93       	push	r18
    1244:	3f 93       	push	r19
    1246:	4f 93       	push	r20
    1248:	5f 93       	push	r21
    124a:	6f 93       	push	r22
    124c:	7f 93       	push	r23
    124e:	8f 93       	push	r24
    1250:	9f 93       	push	r25
    1252:	af 93       	push	r26
    1254:	bf 93       	push	r27
    1256:	ef 93       	push	r30
    1258:	ff 93       	push	r31
    125a:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <intFunc+0xe>
    125e:	f0 91 15 02 	lds	r31, 0x0215	; 0x800215 <intFunc+0xf>
    1262:	19 95       	eicall
    1264:	ff 91       	pop	r31
    1266:	ef 91       	pop	r30
    1268:	bf 91       	pop	r27
    126a:	af 91       	pop	r26
    126c:	9f 91       	pop	r25
    126e:	8f 91       	pop	r24
    1270:	7f 91       	pop	r23
    1272:	6f 91       	pop	r22
    1274:	5f 91       	pop	r21
    1276:	4f 91       	pop	r20
    1278:	3f 91       	pop	r19
    127a:	2f 91       	pop	r18
    127c:	0f 90       	pop	r0
    127e:	0b be       	out	0x3b, r0	; 59
    1280:	0f 90       	pop	r0
    1282:	0f be       	out	0x3f, r0	; 63
    1284:	0f 90       	pop	r0
    1286:	1f 90       	pop	r1
    1288:	18 95       	reti

0000128a <__vector_23>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
    128a:	1f 92       	push	r1
    128c:	0f 92       	push	r0
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	0f 92       	push	r0
    1292:	11 24       	eor	r1, r1
    1294:	2f 93       	push	r18
    1296:	3f 93       	push	r19
    1298:	8f 93       	push	r24
    129a:	9f 93       	push	r25
    129c:	af 93       	push	r26
    129e:	bf 93       	push	r27
    12a0:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <timer0_millis>
    12a4:	90 91 3b 03 	lds	r25, 0x033B	; 0x80033b <timer0_millis+0x1>
    12a8:	a0 91 3c 03 	lds	r26, 0x033C	; 0x80033c <timer0_millis+0x2>
    12ac:	b0 91 3d 03 	lds	r27, 0x033D	; 0x80033d <timer0_millis+0x3>
    12b0:	30 91 39 03 	lds	r19, 0x0339	; 0x800339 <timer0_fract>
    12b4:	23 e0       	ldi	r18, 0x03	; 3
    12b6:	23 0f       	add	r18, r19
    12b8:	2d 37       	cpi	r18, 0x7D	; 125
    12ba:	20 f4       	brcc	.+8      	; 0x12c4 <__vector_23+0x3a>
    12bc:	01 96       	adiw	r24, 0x01	; 1
    12be:	a1 1d       	adc	r26, r1
    12c0:	b1 1d       	adc	r27, r1
    12c2:	05 c0       	rjmp	.+10     	; 0x12ce <__vector_23+0x44>
    12c4:	26 e8       	ldi	r18, 0x86	; 134
    12c6:	23 0f       	add	r18, r19
    12c8:	02 96       	adiw	r24, 0x02	; 2
    12ca:	a1 1d       	adc	r26, r1
    12cc:	b1 1d       	adc	r27, r1
    12ce:	20 93 39 03 	sts	0x0339, r18	; 0x800339 <timer0_fract>
    12d2:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <timer0_millis>
    12d6:	90 93 3b 03 	sts	0x033B, r25	; 0x80033b <timer0_millis+0x1>
    12da:	a0 93 3c 03 	sts	0x033C, r26	; 0x80033c <timer0_millis+0x2>
    12de:	b0 93 3d 03 	sts	0x033D, r27	; 0x80033d <timer0_millis+0x3>
    12e2:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <timer0_overflow_count>
    12e6:	90 91 3f 03 	lds	r25, 0x033F	; 0x80033f <timer0_overflow_count+0x1>
    12ea:	a0 91 40 03 	lds	r26, 0x0340	; 0x800340 <timer0_overflow_count+0x2>
    12ee:	b0 91 41 03 	lds	r27, 0x0341	; 0x800341 <timer0_overflow_count+0x3>
    12f2:	01 96       	adiw	r24, 0x01	; 1
    12f4:	a1 1d       	adc	r26, r1
    12f6:	b1 1d       	adc	r27, r1
    12f8:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <timer0_overflow_count>
    12fc:	90 93 3f 03 	sts	0x033F, r25	; 0x80033f <timer0_overflow_count+0x1>
    1300:	a0 93 40 03 	sts	0x0340, r26	; 0x800340 <timer0_overflow_count+0x2>
    1304:	b0 93 41 03 	sts	0x0341, r27	; 0x800341 <timer0_overflow_count+0x3>
    1308:	bf 91       	pop	r27
    130a:	af 91       	pop	r26
    130c:	9f 91       	pop	r25
    130e:	8f 91       	pop	r24
    1310:	3f 91       	pop	r19
    1312:	2f 91       	pop	r18
    1314:	0f 90       	pop	r0
    1316:	0f be       	out	0x3f, r0	; 63
    1318:	0f 90       	pop	r0
    131a:	1f 90       	pop	r1
    131c:	18 95       	reti

0000131e <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    131e:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    1320:	f8 94       	cli
	m = timer0_overflow_count;
    1322:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <timer0_overflow_count>
    1326:	90 91 3f 03 	lds	r25, 0x033F	; 0x80033f <timer0_overflow_count+0x1>
    132a:	a0 91 40 03 	lds	r26, 0x0340	; 0x800340 <timer0_overflow_count+0x2>
    132e:	b0 91 41 03 	lds	r27, 0x0341	; 0x800341 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    1332:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    1334:	a8 9b       	sbis	0x15, 0	; 21
    1336:	05 c0       	rjmp	.+10     	; 0x1342 <micros+0x24>
    1338:	2f 3f       	cpi	r18, 0xFF	; 255
    133a:	19 f0       	breq	.+6      	; 0x1342 <micros+0x24>
		m++;
    133c:	01 96       	adiw	r24, 0x01	; 1
    133e:	a1 1d       	adc	r26, r1
    1340:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    1342:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    1344:	ba 2f       	mov	r27, r26
    1346:	a9 2f       	mov	r26, r25
    1348:	98 2f       	mov	r25, r24
    134a:	88 27       	eor	r24, r24
    134c:	82 0f       	add	r24, r18
    134e:	91 1d       	adc	r25, r1
    1350:	a1 1d       	adc	r26, r1
    1352:	b1 1d       	adc	r27, r1
    1354:	bc 01       	movw	r22, r24
    1356:	cd 01       	movw	r24, r26
    1358:	42 e0       	ldi	r20, 0x02	; 2
    135a:	66 0f       	add	r22, r22
    135c:	77 1f       	adc	r23, r23
    135e:	88 1f       	adc	r24, r24
    1360:	99 1f       	adc	r25, r25
    1362:	4a 95       	dec	r20
    1364:	d1 f7       	brne	.-12     	; 0x135a <micros+0x3c>
}
    1366:	08 95       	ret

00001368 <delay>:

void delay(unsigned long ms)
{
    1368:	8f 92       	push	r8
    136a:	9f 92       	push	r9
    136c:	af 92       	push	r10
    136e:	bf 92       	push	r11
    1370:	cf 92       	push	r12
    1372:	df 92       	push	r13
    1374:	ef 92       	push	r14
    1376:	ff 92       	push	r15
    1378:	6b 01       	movw	r12, r22
	uint32_t start = micros();
    137a:	7c 01       	movw	r14, r24
    137c:	d0 df       	rcall	.-96     	; 0x131e <micros>
    137e:	4b 01       	movw	r8, r22

	while (ms > 0) {
    1380:	5c 01       	movw	r10, r24
    1382:	c1 14       	cp	r12, r1
    1384:	d1 04       	cpc	r13, r1
		yield();
    1386:	e1 04       	cpc	r14, r1
		while ( ms > 0 && (micros() - start) >= 1000) {
    1388:	f1 04       	cpc	r15, r1
    138a:	f1 f0       	breq	.+60     	; 0x13c8 <delay+0x60>
    138c:	ad d1       	rcall	.+858    	; 0x16e8 <yield>
    138e:	c7 df       	rcall	.-114    	; 0x131e <micros>
    1390:	dc 01       	movw	r26, r24
    1392:	cb 01       	movw	r24, r22
    1394:	88 19       	sub	r24, r8
    1396:	99 09       	sbc	r25, r9
    1398:	aa 09       	sbc	r26, r10
    139a:	bb 09       	sbc	r27, r11
    139c:	88 3e       	cpi	r24, 0xE8	; 232
    139e:	93 40       	sbci	r25, 0x03	; 3
    13a0:	a1 05       	cpc	r26, r1
			ms--;
    13a2:	b1 05       	cpc	r27, r1
    13a4:	70 f3       	brcs	.-36     	; 0x1382 <delay+0x1a>
    13a6:	21 e0       	ldi	r18, 0x01	; 1
    13a8:	c2 1a       	sub	r12, r18
    13aa:	d1 08       	sbc	r13, r1
			start += 1000;
    13ac:	e1 08       	sbc	r14, r1
    13ae:	f1 08       	sbc	r15, r1
    13b0:	88 ee       	ldi	r24, 0xE8	; 232
    13b2:	88 0e       	add	r8, r24
    13b4:	83 e0       	ldi	r24, 0x03	; 3
    13b6:	98 1e       	adc	r9, r24
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    13b8:	a1 1c       	adc	r10, r1
    13ba:	b1 1c       	adc	r11, r1
    13bc:	c1 14       	cp	r12, r1
    13be:	d1 04       	cpc	r13, r1
    13c0:	e1 04       	cpc	r14, r1
    13c2:	f1 04       	cpc	r15, r1
			ms--;
			start += 1000;
		}
	}
}
    13c4:	21 f7       	brne	.-56     	; 0x138e <delay+0x26>
    13c6:	dd cf       	rjmp	.-70     	; 0x1382 <delay+0x1a>
    13c8:	ff 90       	pop	r15
    13ca:	ef 90       	pop	r14
    13cc:	df 90       	pop	r13
    13ce:	cf 90       	pop	r12
    13d0:	bf 90       	pop	r11
    13d2:	af 90       	pop	r10
    13d4:	9f 90       	pop	r9
    13d6:	8f 90       	pop	r8
    13d8:	08 95       	ret

000013da <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    13da:	82 30       	cpi	r24, 0x02	; 2
    13dc:	91 05       	cpc	r25, r1
    13de:	38 f0       	brcs	.+14     	; 0x13ee <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    13e0:	88 0f       	add	r24, r24
    13e2:	99 1f       	adc	r25, r25
    13e4:	88 0f       	add	r24, r24
    13e6:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    13e8:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    13ea:	01 97       	sbiw	r24, 0x01	; 1
    13ec:	f1 f7       	brne	.-4      	; 0x13ea <delayMicroseconds+0x10>
    13ee:	08 95       	ret

000013f0 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    13f0:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    13f2:	84 b5       	in	r24, 0x24	; 36
    13f4:	82 60       	ori	r24, 0x02	; 2
    13f6:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    13f8:	84 b5       	in	r24, 0x24	; 36
    13fa:	81 60       	ori	r24, 0x01	; 1
    13fc:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    13fe:	85 b5       	in	r24, 0x25	; 37
    1400:	82 60       	ori	r24, 0x02	; 2
    1402:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1404:	85 b5       	in	r24, 0x25	; 37
    1406:	81 60       	ori	r24, 0x01	; 1
    1408:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    140a:	ee e6       	ldi	r30, 0x6E	; 110
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	81 60       	ori	r24, 0x01	; 1
    1412:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1414:	e1 e8       	ldi	r30, 0x81	; 129
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    141a:	80 81       	ld	r24, Z
    141c:	82 60       	ori	r24, 0x02	; 2
    141e:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1420:	80 81       	ld	r24, Z
    1422:	81 60       	ori	r24, 0x01	; 1
    1424:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1426:	e0 e8       	ldi	r30, 0x80	; 128
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	81 60       	ori	r24, 0x01	; 1
    142e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1430:	e1 eb       	ldi	r30, 0xB1	; 177
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	84 60       	ori	r24, 0x04	; 4
    1438:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    143a:	e0 eb       	ldi	r30, 0xB0	; 176
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	81 60       	ori	r24, 0x01	; 1
    1442:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    1444:	e1 e9       	ldi	r30, 0x91	; 145
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	82 60       	ori	r24, 0x02	; 2
    144c:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    144e:	80 81       	ld	r24, Z
    1450:	81 60       	ori	r24, 0x01	; 1
    1452:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    1454:	e0 e9       	ldi	r30, 0x90	; 144
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	81 60       	ori	r24, 0x01	; 1
    145c:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    145e:	e1 ea       	ldi	r30, 0xA1	; 161
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	82 60       	ori	r24, 0x02	; 2
    1466:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    1468:	80 81       	ld	r24, Z
    146a:	81 60       	ori	r24, 0x01	; 1
    146c:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    146e:	e0 ea       	ldi	r30, 0xA0	; 160
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	81 60       	ori	r24, 0x01	; 1
    1476:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    1478:	e1 e2       	ldi	r30, 0x21	; 33
    147a:	f1 e0       	ldi	r31, 0x01	; 1
    147c:	80 81       	ld	r24, Z
    147e:	82 60       	ori	r24, 0x02	; 2
    1480:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    1482:	80 81       	ld	r24, Z
    1484:	81 60       	ori	r24, 0x01	; 1
    1486:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    1488:	e0 e2       	ldi	r30, 0x20	; 32
    148a:	f1 e0       	ldi	r31, 0x01	; 1
    148c:	80 81       	ld	r24, Z
    148e:	81 60       	ori	r24, 0x01	; 1
    1490:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1492:	ea e7       	ldi	r30, 0x7A	; 122
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	84 60       	ori	r24, 0x04	; 4
    149a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    149c:	80 81       	ld	r24, Z
    149e:	82 60       	ori	r24, 0x02	; 2
    14a0:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    14a2:	80 81       	ld	r24, Z
    14a4:	81 60       	ori	r24, 0x01	; 1
    14a6:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    14a8:	80 81       	ld	r24, Z
    14aa:	80 68       	ori	r24, 0x80	; 128
    14ac:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    14ae:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    14b2:	08 95       	ret

000014b4 <analogRead>:
#if defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#endif
	pin = analogPinToChannel(pin);
#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
    14b4:	86 33       	cpi	r24, 0x36	; 54
    14b6:	08 f0       	brcs	.+2      	; 0x14ba <analogRead+0x6>
    14b8:	86 53       	subi	r24, 0x36	; 54
#endif

#if defined(ADCSRB) && defined(MUX5)
	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
    14ba:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    14be:	28 2f       	mov	r18, r24
    14c0:	28 70       	andi	r18, 0x08	; 8
    14c2:	97 7f       	andi	r25, 0xF7	; 247
    14c4:	92 2b       	or	r25, r18
    14c6:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    14ca:	20 91 16 02 	lds	r18, 0x0216	; 0x800216 <analog_reference>
    14ce:	90 e4       	ldi	r25, 0x40	; 64
    14d0:	29 9f       	mul	r18, r25
    14d2:	90 01       	movw	r18, r0
    14d4:	11 24       	eor	r1, r1
    14d6:	87 70       	andi	r24, 0x07	; 7
    14d8:	82 2b       	or	r24, r18
    14da:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    14de:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    14e2:	80 64       	ori	r24, 0x40	; 64
    14e4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    14e8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    14ec:	86 fd       	sbrc	r24, 6
    14ee:	fc cf       	rjmp	.-8      	; 0x14e8 <analogRead+0x34>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    14f0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
	high = ADCH;
    14f4:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    14f8:	90 e0       	ldi	r25, 0x00	; 0
}
    14fa:	92 2b       	or	r25, r18
    14fc:	08 95       	ret

000014fe <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	fc 01       	movw	r30, r24
    1502:	31 97       	sbiw	r30, 0x01	; 1
    1504:	e2 31       	cpi	r30, 0x12	; 18
    1506:	f1 05       	cpc	r31, r1
    1508:	08 f0       	brcs	.+2      	; 0x150c <turnOffPWM+0xe>
    150a:	4d c0       	rjmp	.+154    	; 0x15a6 <turnOffPWM+0xa8>
    150c:	88 27       	eor	r24, r24
    150e:	e7 58       	subi	r30, 0x87	; 135
    1510:	ff 4f       	sbci	r31, 0xFF	; 255
    1512:	8f 4f       	sbci	r24, 0xFF	; 255
    1514:	0c c1       	rjmp	.+536    	; 0x172e <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1516:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    151a:	8f 77       	andi	r24, 0x7F	; 127
    151c:	03 c0       	rjmp	.+6      	; 0x1524 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    151e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1522:	8f 7d       	andi	r24, 0xDF	; 223
    1524:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1528:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    152a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    152e:	87 7f       	andi	r24, 0xF7	; 247
    1530:	f9 cf       	rjmp	.-14     	; 0x1524 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1532:	84 b5       	in	r24, 0x24	; 36
    1534:	8f 77       	andi	r24, 0x7F	; 127
    1536:	02 c0       	rjmp	.+4      	; 0x153c <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1538:	84 b5       	in	r24, 0x24	; 36
    153a:	8f 7d       	andi	r24, 0xDF	; 223
    153c:	84 bd       	out	0x24, r24	; 36
    153e:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1540:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    1544:	8f 77       	andi	r24, 0x7F	; 127
    1546:	03 c0       	rjmp	.+6      	; 0x154e <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1548:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    154c:	8f 7d       	andi	r24, 0xDF	; 223
    154e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    1552:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    1554:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1558:	8f 77       	andi	r24, 0x7F	; 127
    155a:	07 c0       	rjmp	.+14     	; 0x156a <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    155c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1560:	8f 7d       	andi	r24, 0xDF	; 223
    1562:	03 c0       	rjmp	.+6      	; 0x156a <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    1564:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1568:	87 7f       	andi	r24, 0xF7	; 247
    156a:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    156e:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    1570:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1574:	8f 77       	andi	r24, 0x7F	; 127
    1576:	07 c0       	rjmp	.+14     	; 0x1586 <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    1578:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    157c:	8f 7d       	andi	r24, 0xDF	; 223
    157e:	03 c0       	rjmp	.+6      	; 0x1586 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    1580:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1584:	87 7f       	andi	r24, 0xF7	; 247
    1586:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    158a:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    158c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1590:	8f 77       	andi	r24, 0x7F	; 127
    1592:	07 c0       	rjmp	.+14     	; 0x15a2 <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    1594:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1598:	8f 7d       	andi	r24, 0xDF	; 223
    159a:	03 c0       	rjmp	.+6      	; 0x15a2 <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    159c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    15a0:	87 7f       	andi	r24, 0xF7	; 247
    15a2:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    15a6:	08 95       	ret

000015a8 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    15a8:	cf 93       	push	r28
    15aa:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	fc 01       	movw	r30, r24
    15b0:	e4 5a       	subi	r30, 0xA4	; 164
    15b2:	fe 4f       	sbci	r31, 0xFE	; 254
    15b4:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    15b6:	fc 01       	movw	r30, r24
    15b8:	ee 55       	subi	r30, 0x5E	; 94
    15ba:	fe 4f       	sbci	r31, 0xFE	; 254
    15bc:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    15be:	88 23       	and	r24, r24
    15c0:	61 f1       	breq	.+88     	; 0x161a <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	88 0f       	add	r24, r24
    15c6:	99 1f       	adc	r25, r25
    15c8:	fc 01       	movw	r30, r24
    15ca:	ee 5f       	subi	r30, 0xFE	; 254
    15cc:	fd 4f       	sbci	r31, 0xFD	; 253
    15ce:	c5 91       	lpm	r28, Z+
    15d0:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    15d2:	fc 01       	movw	r30, r24
    15d4:	e8 51       	subi	r30, 0x18	; 24
    15d6:	fe 4f       	sbci	r31, 0xFE	; 254
    15d8:	a5 91       	lpm	r26, Z+
    15da:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    15dc:	61 11       	cpse	r22, r1
    15de:	09 c0       	rjmp	.+18     	; 0x15f2 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    15e0:	9f b7       	in	r25, 0x3f	; 63
                cli();
    15e2:	f8 94       	cli
		*reg &= ~bit;
    15e4:	88 81       	ld	r24, Y
    15e6:	20 95       	com	r18
    15e8:	82 23       	and	r24, r18
    15ea:	88 83       	st	Y, r24
		*out &= ~bit;
    15ec:	ec 91       	ld	r30, X
    15ee:	2e 23       	and	r18, r30
    15f0:	0b c0       	rjmp	.+22     	; 0x1608 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    15f2:	62 30       	cpi	r22, 0x02	; 2
    15f4:	61 f4       	brne	.+24     	; 0x160e <pinMode+0x66>
		uint8_t oldSREG = SREG;
    15f6:	9f b7       	in	r25, 0x3f	; 63
                cli();
    15f8:	f8 94       	cli
		*reg &= ~bit;
    15fa:	88 81       	ld	r24, Y
    15fc:	32 2f       	mov	r19, r18
    15fe:	30 95       	com	r19
    1600:	83 23       	and	r24, r19
    1602:	88 83       	st	Y, r24
		*out |= bit;
    1604:	ec 91       	ld	r30, X
    1606:	2e 2b       	or	r18, r30
    1608:	2c 93       	st	X, r18
		SREG = oldSREG;
    160a:	9f bf       	out	0x3f, r25	; 63
    160c:	06 c0       	rjmp	.+12     	; 0x161a <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    160e:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1610:	f8 94       	cli
		*reg |= bit;
    1612:	e8 81       	ld	r30, Y
    1614:	2e 2b       	or	r18, r30
    1616:	28 83       	st	Y, r18
		SREG = oldSREG;
    1618:	8f bf       	out	0x3f, r24	; 63
	}
}
    161a:	df 91       	pop	r29
    161c:	cf 91       	pop	r28
    161e:	08 95       	ret

00001620 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1620:	1f 93       	push	r17
    1622:	cf 93       	push	r28
    1624:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1626:	28 2f       	mov	r18, r24
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	f9 01       	movw	r30, r18
    162c:	ea 5e       	subi	r30, 0xEA	; 234
    162e:	fe 4f       	sbci	r31, 0xFE	; 254
    1630:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1632:	f9 01       	movw	r30, r18
    1634:	e4 5a       	subi	r30, 0xA4	; 164
    1636:	fe 4f       	sbci	r31, 0xFE	; 254
    1638:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    163a:	f9 01       	movw	r30, r18
    163c:	ee 55       	subi	r30, 0x5E	; 94
    163e:	fe 4f       	sbci	r31, 0xFE	; 254
    1640:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1642:	cc 23       	and	r28, r28
    1644:	b9 f0       	breq	.+46     	; 0x1674 <digitalWrite+0x54>
    1646:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1648:	81 11       	cpse	r24, r1

	out = portOutputRegister(port);
    164a:	59 df       	rcall	.-334    	; 0x14fe <turnOffPWM>
    164c:	ec 2f       	mov	r30, r28
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	ee 0f       	add	r30, r30
    1652:	ff 1f       	adc	r31, r31
    1654:	e8 51       	subi	r30, 0x18	; 24
    1656:	fe 4f       	sbci	r31, 0xFE	; 254
    1658:	a5 91       	lpm	r26, Z+

	uint8_t oldSREG = SREG;
    165a:	b4 91       	lpm	r27, Z
	cli();
    165c:	9f b7       	in	r25, 0x3f	; 63

	if (val == LOW) {
    165e:	f8 94       	cli
    1660:	11 11       	cpse	r17, r1
		*out &= ~bit;
    1662:	04 c0       	rjmp	.+8      	; 0x166c <digitalWrite+0x4c>
    1664:	8c 91       	ld	r24, X
    1666:	d0 95       	com	r29
    1668:	d8 23       	and	r29, r24
	} else {
		*out |= bit;
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <digitalWrite+0x50>
    166c:	ec 91       	ld	r30, X
    166e:	de 2b       	or	r29, r30
	}

	SREG = oldSREG;
    1670:	dc 93       	st	X, r29
}
    1672:	9f bf       	out	0x3f, r25	; 63
    1674:	df 91       	pop	r29
    1676:	cf 91       	pop	r28
    1678:	1f 91       	pop	r17
    167a:	08 95       	ret

0000167c <shiftOut>:
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
    167c:	bf 92       	push	r11
    167e:	cf 92       	push	r12
    1680:	df 92       	push	r13
    1682:	ef 92       	push	r14
    1684:	ff 92       	push	r15
    1686:	0f 93       	push	r16
    1688:	1f 93       	push	r17
    168a:	cf 93       	push	r28
    168c:	df 93       	push	r29
    168e:	c8 2e       	mov	r12, r24
    1690:	d6 2e       	mov	r13, r22
    1692:	b4 2e       	mov	r11, r20
    1694:	c7 e0       	ldi	r28, 0x07	; 7
    1696:	d0 e0       	ldi	r29, 0x00	; 0
    1698:	02 2f       	mov	r16, r18
    169a:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
			digitalWrite(dataPin, !!(val & (1 << i)));
    169c:	87 e0       	ldi	r24, 0x07	; 7
    169e:	e8 2e       	mov	r14, r24
    16a0:	f1 2c       	mov	r15, r1
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
    16a2:	b1 10       	cpse	r11, r1
    16a4:	05 c0       	rjmp	.+10     	; 0x16b0 <shiftOut+0x34>
			digitalWrite(dataPin, !!(val & (1 << i)));
    16a6:	c7 01       	movw	r24, r14
    16a8:	8c 1b       	sub	r24, r28
    16aa:	9d 0b       	sbc	r25, r29
    16ac:	b8 01       	movw	r22, r16
    16ae:	02 c0       	rjmp	.+4      	; 0x16b4 <shiftOut+0x38>
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
    16b0:	b8 01       	movw	r22, r16
    16b2:	8c 2f       	mov	r24, r28
    16b4:	02 c0       	rjmp	.+4      	; 0x16ba <shiftOut+0x3e>
    16b6:	75 95       	asr	r23
    16b8:	67 95       	ror	r22
    16ba:	8a 95       	dec	r24
    16bc:	e2 f7       	brpl	.-8      	; 0x16b6 <shiftOut+0x3a>
    16be:	61 70       	andi	r22, 0x01	; 1
    16c0:	8c 2d       	mov	r24, r12
    16c2:	ae df       	rcall	.-164    	; 0x1620 <digitalWrite>
			
		digitalWrite(clockPin, HIGH);
    16c4:	61 e0       	ldi	r22, 0x01	; 1
    16c6:	8d 2d       	mov	r24, r13
		digitalWrite(clockPin, LOW);		
    16c8:	ab df       	rcall	.-170    	; 0x1620 <digitalWrite>
    16ca:	60 e0       	ldi	r22, 0x00	; 0
    16cc:	8d 2d       	mov	r24, r13
    16ce:	a8 df       	rcall	.-176    	; 0x1620 <digitalWrite>
    16d0:	21 97       	sbiw	r28, 0x01	; 1
	}
}
    16d2:	38 f7       	brcc	.-50     	; 0x16a2 <shiftOut+0x26>
    16d4:	df 91       	pop	r29
    16d6:	cf 91       	pop	r28
    16d8:	1f 91       	pop	r17
    16da:	0f 91       	pop	r16
    16dc:	ff 90       	pop	r15
    16de:	ef 90       	pop	r14
    16e0:	df 90       	pop	r13
    16e2:	cf 90       	pop	r12
    16e4:	bf 90       	pop	r11
    16e6:	08 95       	ret

000016e8 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    16e8:	08 95       	ret

000016ea <__udivmodsi4>:
    16ea:	a1 e2       	ldi	r26, 0x21	; 33
    16ec:	1a 2e       	mov	r1, r26
    16ee:	aa 1b       	sub	r26, r26
    16f0:	bb 1b       	sub	r27, r27
    16f2:	fd 01       	movw	r30, r26
    16f4:	0d c0       	rjmp	.+26     	; 0x1710 <__udivmodsi4_ep>

000016f6 <__udivmodsi4_loop>:
    16f6:	aa 1f       	adc	r26, r26
    16f8:	bb 1f       	adc	r27, r27
    16fa:	ee 1f       	adc	r30, r30
    16fc:	ff 1f       	adc	r31, r31
    16fe:	a2 17       	cp	r26, r18
    1700:	b3 07       	cpc	r27, r19
    1702:	e4 07       	cpc	r30, r20
    1704:	f5 07       	cpc	r31, r21
    1706:	20 f0       	brcs	.+8      	; 0x1710 <__udivmodsi4_ep>
    1708:	a2 1b       	sub	r26, r18
    170a:	b3 0b       	sbc	r27, r19
    170c:	e4 0b       	sbc	r30, r20
    170e:	f5 0b       	sbc	r31, r21

00001710 <__udivmodsi4_ep>:
    1710:	66 1f       	adc	r22, r22
    1712:	77 1f       	adc	r23, r23
    1714:	88 1f       	adc	r24, r24
    1716:	99 1f       	adc	r25, r25
    1718:	1a 94       	dec	r1
    171a:	69 f7       	brne	.-38     	; 0x16f6 <__udivmodsi4_loop>
    171c:	60 95       	com	r22
    171e:	70 95       	com	r23
    1720:	80 95       	com	r24
    1722:	90 95       	com	r25
    1724:	9b 01       	movw	r18, r22
    1726:	ac 01       	movw	r20, r24
    1728:	bd 01       	movw	r22, r26
    172a:	cf 01       	movw	r24, r30
    172c:	08 95       	ret

0000172e <__tablejump2__>:
    172e:	ee 0f       	add	r30, r30
    1730:	ff 1f       	adc	r31, r31
    1732:	88 1f       	adc	r24, r24
    1734:	8b bf       	out	0x3b, r24	; 59
    1736:	07 90       	elpm	r0, Z+
    1738:	f6 91       	elpm	r31, Z
    173a:	e0 2d       	mov	r30, r0
    173c:	19 94       	eijmp

0000173e <malloc>:
    173e:	0f 93       	push	r16
    1740:	1f 93       	push	r17
    1742:	cf 93       	push	r28
    1744:	df 93       	push	r29
    1746:	82 30       	cpi	r24, 0x02	; 2
    1748:	91 05       	cpc	r25, r1
    174a:	10 f4       	brcc	.+4      	; 0x1750 <malloc+0x12>
    174c:	82 e0       	ldi	r24, 0x02	; 2
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	e0 91 52 03 	lds	r30, 0x0352	; 0x800352 <__flp>
    1754:	f0 91 53 03 	lds	r31, 0x0353	; 0x800353 <__flp+0x1>
    1758:	20 e0       	ldi	r18, 0x00	; 0
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	a0 e0       	ldi	r26, 0x00	; 0
    175e:	b0 e0       	ldi	r27, 0x00	; 0
    1760:	30 97       	sbiw	r30, 0x00	; 0
    1762:	19 f1       	breq	.+70     	; 0x17aa <malloc+0x6c>
    1764:	40 81       	ld	r20, Z
    1766:	51 81       	ldd	r21, Z+1	; 0x01
    1768:	02 81       	ldd	r16, Z+2	; 0x02
    176a:	13 81       	ldd	r17, Z+3	; 0x03
    176c:	48 17       	cp	r20, r24
    176e:	59 07       	cpc	r21, r25
    1770:	c8 f0       	brcs	.+50     	; 0x17a4 <malloc+0x66>
    1772:	84 17       	cp	r24, r20
    1774:	95 07       	cpc	r25, r21
    1776:	69 f4       	brne	.+26     	; 0x1792 <malloc+0x54>
    1778:	10 97       	sbiw	r26, 0x00	; 0
    177a:	31 f0       	breq	.+12     	; 0x1788 <malloc+0x4a>
    177c:	12 96       	adiw	r26, 0x02	; 2
    177e:	0c 93       	st	X, r16
    1780:	12 97       	sbiw	r26, 0x02	; 2
    1782:	13 96       	adiw	r26, 0x03	; 3
    1784:	1c 93       	st	X, r17
    1786:	27 c0       	rjmp	.+78     	; 0x17d6 <malloc+0x98>
    1788:	00 93 52 03 	sts	0x0352, r16	; 0x800352 <__flp>
    178c:	10 93 53 03 	sts	0x0353, r17	; 0x800353 <__flp+0x1>
    1790:	22 c0       	rjmp	.+68     	; 0x17d6 <malloc+0x98>
    1792:	21 15       	cp	r18, r1
    1794:	31 05       	cpc	r19, r1
    1796:	19 f0       	breq	.+6      	; 0x179e <malloc+0x60>
    1798:	42 17       	cp	r20, r18
    179a:	53 07       	cpc	r21, r19
    179c:	18 f4       	brcc	.+6      	; 0x17a4 <malloc+0x66>
    179e:	9a 01       	movw	r18, r20
    17a0:	bd 01       	movw	r22, r26
    17a2:	ef 01       	movw	r28, r30
    17a4:	df 01       	movw	r26, r30
    17a6:	f8 01       	movw	r30, r16
    17a8:	db cf       	rjmp	.-74     	; 0x1760 <malloc+0x22>
    17aa:	21 15       	cp	r18, r1
    17ac:	31 05       	cpc	r19, r1
    17ae:	f9 f0       	breq	.+62     	; 0x17ee <malloc+0xb0>
    17b0:	28 1b       	sub	r18, r24
    17b2:	39 0b       	sbc	r19, r25
    17b4:	24 30       	cpi	r18, 0x04	; 4
    17b6:	31 05       	cpc	r19, r1
    17b8:	80 f4       	brcc	.+32     	; 0x17da <malloc+0x9c>
    17ba:	8a 81       	ldd	r24, Y+2	; 0x02
    17bc:	9b 81       	ldd	r25, Y+3	; 0x03
    17be:	61 15       	cp	r22, r1
    17c0:	71 05       	cpc	r23, r1
    17c2:	21 f0       	breq	.+8      	; 0x17cc <malloc+0x8e>
    17c4:	fb 01       	movw	r30, r22
    17c6:	93 83       	std	Z+3, r25	; 0x03
    17c8:	82 83       	std	Z+2, r24	; 0x02
    17ca:	04 c0       	rjmp	.+8      	; 0x17d4 <malloc+0x96>
    17cc:	90 93 53 03 	sts	0x0353, r25	; 0x800353 <__flp+0x1>
    17d0:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <__flp>
    17d4:	fe 01       	movw	r30, r28
    17d6:	32 96       	adiw	r30, 0x02	; 2
    17d8:	44 c0       	rjmp	.+136    	; 0x1862 <malloc+0x124>
    17da:	fe 01       	movw	r30, r28
    17dc:	e2 0f       	add	r30, r18
    17de:	f3 1f       	adc	r31, r19
    17e0:	81 93       	st	Z+, r24
    17e2:	91 93       	st	Z+, r25
    17e4:	22 50       	subi	r18, 0x02	; 2
    17e6:	31 09       	sbc	r19, r1
    17e8:	39 83       	std	Y+1, r19	; 0x01
    17ea:	28 83       	st	Y, r18
    17ec:	3a c0       	rjmp	.+116    	; 0x1862 <malloc+0x124>
    17ee:	20 91 50 03 	lds	r18, 0x0350	; 0x800350 <__brkval>
    17f2:	30 91 51 03 	lds	r19, 0x0351	; 0x800351 <__brkval+0x1>
    17f6:	23 2b       	or	r18, r19
    17f8:	41 f4       	brne	.+16     	; 0x180a <malloc+0xcc>
    17fa:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    17fe:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    1802:	30 93 51 03 	sts	0x0351, r19	; 0x800351 <__brkval+0x1>
    1806:	20 93 50 03 	sts	0x0350, r18	; 0x800350 <__brkval>
    180a:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    180e:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    1812:	21 15       	cp	r18, r1
    1814:	31 05       	cpc	r19, r1
    1816:	41 f4       	brne	.+16     	; 0x1828 <malloc+0xea>
    1818:	2d b7       	in	r18, 0x3d	; 61
    181a:	3e b7       	in	r19, 0x3e	; 62
    181c:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    1820:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    1824:	24 1b       	sub	r18, r20
    1826:	35 0b       	sbc	r19, r21
    1828:	e0 91 50 03 	lds	r30, 0x0350	; 0x800350 <__brkval>
    182c:	f0 91 51 03 	lds	r31, 0x0351	; 0x800351 <__brkval+0x1>
    1830:	e2 17       	cp	r30, r18
    1832:	f3 07       	cpc	r31, r19
    1834:	a0 f4       	brcc	.+40     	; 0x185e <malloc+0x120>
    1836:	2e 1b       	sub	r18, r30
    1838:	3f 0b       	sbc	r19, r31
    183a:	28 17       	cp	r18, r24
    183c:	39 07       	cpc	r19, r25
    183e:	78 f0       	brcs	.+30     	; 0x185e <malloc+0x120>
    1840:	ac 01       	movw	r20, r24
    1842:	4e 5f       	subi	r20, 0xFE	; 254
    1844:	5f 4f       	sbci	r21, 0xFF	; 255
    1846:	24 17       	cp	r18, r20
    1848:	35 07       	cpc	r19, r21
    184a:	48 f0       	brcs	.+18     	; 0x185e <malloc+0x120>
    184c:	4e 0f       	add	r20, r30
    184e:	5f 1f       	adc	r21, r31
    1850:	50 93 51 03 	sts	0x0351, r21	; 0x800351 <__brkval+0x1>
    1854:	40 93 50 03 	sts	0x0350, r20	; 0x800350 <__brkval>
    1858:	81 93       	st	Z+, r24
    185a:	91 93       	st	Z+, r25
    185c:	02 c0       	rjmp	.+4      	; 0x1862 <malloc+0x124>
    185e:	e0 e0       	ldi	r30, 0x00	; 0
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	cf 01       	movw	r24, r30
    1864:	df 91       	pop	r29
    1866:	cf 91       	pop	r28
    1868:	1f 91       	pop	r17
    186a:	0f 91       	pop	r16
    186c:	08 95       	ret

0000186e <free>:
    186e:	cf 93       	push	r28
    1870:	df 93       	push	r29
    1872:	00 97       	sbiw	r24, 0x00	; 0
    1874:	09 f4       	brne	.+2      	; 0x1878 <free+0xa>
    1876:	81 c0       	rjmp	.+258    	; 0x197a <free+0x10c>
    1878:	fc 01       	movw	r30, r24
    187a:	32 97       	sbiw	r30, 0x02	; 2
    187c:	13 82       	std	Z+3, r1	; 0x03
    187e:	12 82       	std	Z+2, r1	; 0x02
    1880:	a0 91 52 03 	lds	r26, 0x0352	; 0x800352 <__flp>
    1884:	b0 91 53 03 	lds	r27, 0x0353	; 0x800353 <__flp+0x1>
    1888:	10 97       	sbiw	r26, 0x00	; 0
    188a:	81 f4       	brne	.+32     	; 0x18ac <free+0x3e>
    188c:	20 81       	ld	r18, Z
    188e:	31 81       	ldd	r19, Z+1	; 0x01
    1890:	82 0f       	add	r24, r18
    1892:	93 1f       	adc	r25, r19
    1894:	20 91 50 03 	lds	r18, 0x0350	; 0x800350 <__brkval>
    1898:	30 91 51 03 	lds	r19, 0x0351	; 0x800351 <__brkval+0x1>
    189c:	28 17       	cp	r18, r24
    189e:	39 07       	cpc	r19, r25
    18a0:	51 f5       	brne	.+84     	; 0x18f6 <free+0x88>
    18a2:	f0 93 51 03 	sts	0x0351, r31	; 0x800351 <__brkval+0x1>
    18a6:	e0 93 50 03 	sts	0x0350, r30	; 0x800350 <__brkval>
    18aa:	67 c0       	rjmp	.+206    	; 0x197a <free+0x10c>
    18ac:	ed 01       	movw	r28, r26
    18ae:	20 e0       	ldi	r18, 0x00	; 0
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	ce 17       	cp	r28, r30
    18b4:	df 07       	cpc	r29, r31
    18b6:	40 f4       	brcc	.+16     	; 0x18c8 <free+0x5a>
    18b8:	4a 81       	ldd	r20, Y+2	; 0x02
    18ba:	5b 81       	ldd	r21, Y+3	; 0x03
    18bc:	9e 01       	movw	r18, r28
    18be:	41 15       	cp	r20, r1
    18c0:	51 05       	cpc	r21, r1
    18c2:	f1 f0       	breq	.+60     	; 0x1900 <free+0x92>
    18c4:	ea 01       	movw	r28, r20
    18c6:	f5 cf       	rjmp	.-22     	; 0x18b2 <free+0x44>
    18c8:	d3 83       	std	Z+3, r29	; 0x03
    18ca:	c2 83       	std	Z+2, r28	; 0x02
    18cc:	40 81       	ld	r20, Z
    18ce:	51 81       	ldd	r21, Z+1	; 0x01
    18d0:	84 0f       	add	r24, r20
    18d2:	95 1f       	adc	r25, r21
    18d4:	c8 17       	cp	r28, r24
    18d6:	d9 07       	cpc	r29, r25
    18d8:	59 f4       	brne	.+22     	; 0x18f0 <free+0x82>
    18da:	88 81       	ld	r24, Y
    18dc:	99 81       	ldd	r25, Y+1	; 0x01
    18de:	84 0f       	add	r24, r20
    18e0:	95 1f       	adc	r25, r21
    18e2:	02 96       	adiw	r24, 0x02	; 2
    18e4:	91 83       	std	Z+1, r25	; 0x01
    18e6:	80 83       	st	Z, r24
    18e8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ea:	9b 81       	ldd	r25, Y+3	; 0x03
    18ec:	93 83       	std	Z+3, r25	; 0x03
    18ee:	82 83       	std	Z+2, r24	; 0x02
    18f0:	21 15       	cp	r18, r1
    18f2:	31 05       	cpc	r19, r1
    18f4:	29 f4       	brne	.+10     	; 0x1900 <free+0x92>
    18f6:	f0 93 53 03 	sts	0x0353, r31	; 0x800353 <__flp+0x1>
    18fa:	e0 93 52 03 	sts	0x0352, r30	; 0x800352 <__flp>
    18fe:	3d c0       	rjmp	.+122    	; 0x197a <free+0x10c>
    1900:	e9 01       	movw	r28, r18
    1902:	fb 83       	std	Y+3, r31	; 0x03
    1904:	ea 83       	std	Y+2, r30	; 0x02
    1906:	49 91       	ld	r20, Y+
    1908:	59 91       	ld	r21, Y+
    190a:	c4 0f       	add	r28, r20
    190c:	d5 1f       	adc	r29, r21
    190e:	ec 17       	cp	r30, r28
    1910:	fd 07       	cpc	r31, r29
    1912:	61 f4       	brne	.+24     	; 0x192c <free+0xbe>
    1914:	80 81       	ld	r24, Z
    1916:	91 81       	ldd	r25, Z+1	; 0x01
    1918:	84 0f       	add	r24, r20
    191a:	95 1f       	adc	r25, r21
    191c:	02 96       	adiw	r24, 0x02	; 2
    191e:	e9 01       	movw	r28, r18
    1920:	99 83       	std	Y+1, r25	; 0x01
    1922:	88 83       	st	Y, r24
    1924:	82 81       	ldd	r24, Z+2	; 0x02
    1926:	93 81       	ldd	r25, Z+3	; 0x03
    1928:	9b 83       	std	Y+3, r25	; 0x03
    192a:	8a 83       	std	Y+2, r24	; 0x02
    192c:	e0 e0       	ldi	r30, 0x00	; 0
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	12 96       	adiw	r26, 0x02	; 2
    1932:	8d 91       	ld	r24, X+
    1934:	9c 91       	ld	r25, X
    1936:	13 97       	sbiw	r26, 0x03	; 3
    1938:	00 97       	sbiw	r24, 0x00	; 0
    193a:	19 f0       	breq	.+6      	; 0x1942 <free+0xd4>
    193c:	fd 01       	movw	r30, r26
    193e:	dc 01       	movw	r26, r24
    1940:	f7 cf       	rjmp	.-18     	; 0x1930 <free+0xc2>
    1942:	8d 91       	ld	r24, X+
    1944:	9c 91       	ld	r25, X
    1946:	11 97       	sbiw	r26, 0x01	; 1
    1948:	9d 01       	movw	r18, r26
    194a:	2e 5f       	subi	r18, 0xFE	; 254
    194c:	3f 4f       	sbci	r19, 0xFF	; 255
    194e:	82 0f       	add	r24, r18
    1950:	93 1f       	adc	r25, r19
    1952:	20 91 50 03 	lds	r18, 0x0350	; 0x800350 <__brkval>
    1956:	30 91 51 03 	lds	r19, 0x0351	; 0x800351 <__brkval+0x1>
    195a:	28 17       	cp	r18, r24
    195c:	39 07       	cpc	r19, r25
    195e:	69 f4       	brne	.+26     	; 0x197a <free+0x10c>
    1960:	30 97       	sbiw	r30, 0x00	; 0
    1962:	29 f4       	brne	.+10     	; 0x196e <free+0x100>
    1964:	10 92 53 03 	sts	0x0353, r1	; 0x800353 <__flp+0x1>
    1968:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <__flp>
    196c:	02 c0       	rjmp	.+4      	; 0x1972 <free+0x104>
    196e:	13 82       	std	Z+3, r1	; 0x03
    1970:	12 82       	std	Z+2, r1	; 0x02
    1972:	b0 93 51 03 	sts	0x0351, r27	; 0x800351 <__brkval+0x1>
    1976:	a0 93 50 03 	sts	0x0350, r26	; 0x800350 <__brkval>
    197a:	df 91       	pop	r29
    197c:	cf 91       	pop	r28
    197e:	08 95       	ret

00001980 <_exit>:
    1980:	f8 94       	cli

00001982 <__stop_program>:
    1982:	ff cf       	rjmp	.-2      	; 0x1982 <__stop_program>
