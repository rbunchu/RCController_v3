
RCController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000064  00800200  000011be  00001252  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800264  00800264  000012b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000012b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000012e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000488  00000000  00000000  00001328  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000784b  00000000  00000000  000017b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001fe6  00000000  00000000  00008ffb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002494  00000000  00000000  0000afe1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e8c  00000000  00000000  0000d478  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000234c  00000000  00000000  0000e304  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005245  00000000  00000000  00010650  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000450  00000000  00000000  00015895  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0d c1       	rjmp	.+538    	; 0x21c <__ctors_end>
       2:	00 00       	nop
       4:	4e c4       	rjmp	.+2204   	; 0x8a2 <__vector_1>
       6:	00 00       	nop
       8:	77 c4       	rjmp	.+2286   	; 0x8f8 <__vector_2>
       a:	00 00       	nop
       c:	a0 c4       	rjmp	.+2368   	; 0x94e <__vector_3>
       e:	00 00       	nop
      10:	c9 c4       	rjmp	.+2450   	; 0x9a4 <__vector_4>
      12:	00 00       	nop
      14:	f2 c4       	rjmp	.+2532   	; 0x9fa <__vector_5>
      16:	00 00       	nop
      18:	1b c5       	rjmp	.+2614   	; 0xa50 <__vector_6>
      1a:	00 00       	nop
      1c:	44 c5       	rjmp	.+2696   	; 0xaa6 <__vector_7>
      1e:	00 00       	nop
      20:	6d c5       	rjmp	.+2778   	; 0xafc <__vector_8>
      22:	00 00       	nop
      24:	1a c1       	rjmp	.+564    	; 0x25a <__bad_interrupt>
      26:	00 00       	nop
      28:	18 c1       	rjmp	.+560    	; 0x25a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	16 c1       	rjmp	.+556    	; 0x25a <__bad_interrupt>
      2e:	00 00       	nop
      30:	14 c1       	rjmp	.+552    	; 0x25a <__bad_interrupt>
      32:	00 00       	nop
      34:	12 c1       	rjmp	.+548    	; 0x25a <__bad_interrupt>
      36:	00 00       	nop
      38:	10 c1       	rjmp	.+544    	; 0x25a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	0e c1       	rjmp	.+540    	; 0x25a <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c c1       	rjmp	.+536    	; 0x25a <__bad_interrupt>
      42:	00 00       	nop
      44:	0a c1       	rjmp	.+532    	; 0x25a <__bad_interrupt>
      46:	00 00       	nop
      48:	08 c1       	rjmp	.+528    	; 0x25a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	06 c1       	rjmp	.+524    	; 0x25a <__bad_interrupt>
      4e:	00 00       	nop
      50:	04 c1       	rjmp	.+520    	; 0x25a <__bad_interrupt>
      52:	00 00       	nop
      54:	02 c1       	rjmp	.+516    	; 0x25a <__bad_interrupt>
      56:	00 00       	nop
      58:	00 c1       	rjmp	.+512    	; 0x25a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	7a c5       	rjmp	.+2804   	; 0xb52 <__vector_23>
      5e:	00 00       	nop
      60:	fc c0       	rjmp	.+504    	; 0x25a <__bad_interrupt>
      62:	00 00       	nop
      64:	fa c0       	rjmp	.+500    	; 0x25a <__bad_interrupt>
      66:	00 00       	nop
      68:	f8 c0       	rjmp	.+496    	; 0x25a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	f6 c0       	rjmp	.+492    	; 0x25a <__bad_interrupt>
      6e:	00 00       	nop
      70:	f4 c0       	rjmp	.+488    	; 0x25a <__bad_interrupt>
      72:	00 00       	nop
      74:	f2 c0       	rjmp	.+484    	; 0x25a <__bad_interrupt>
      76:	00 00       	nop
      78:	f0 c0       	rjmp	.+480    	; 0x25a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ee c0       	rjmp	.+476    	; 0x25a <__bad_interrupt>
      7e:	00 00       	nop
      80:	ec c0       	rjmp	.+472    	; 0x25a <__bad_interrupt>
      82:	00 00       	nop
      84:	ea c0       	rjmp	.+468    	; 0x25a <__bad_interrupt>
      86:	00 00       	nop
      88:	e8 c0       	rjmp	.+464    	; 0x25a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e6 c0       	rjmp	.+460    	; 0x25a <__bad_interrupt>
      8e:	00 00       	nop
      90:	e4 c0       	rjmp	.+456    	; 0x25a <__bad_interrupt>
      92:	00 00       	nop
      94:	e2 c0       	rjmp	.+452    	; 0x25a <__bad_interrupt>
      96:	00 00       	nop
      98:	e0 c0       	rjmp	.+448    	; 0x25a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	de c0       	rjmp	.+444    	; 0x25a <__bad_interrupt>
      9e:	00 00       	nop
      a0:	dc c0       	rjmp	.+440    	; 0x25a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	da c0       	rjmp	.+436    	; 0x25a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d8 c0       	rjmp	.+432    	; 0x25a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d6 c0       	rjmp	.+428    	; 0x25a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	d4 c0       	rjmp	.+424    	; 0x25a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	d2 c0       	rjmp	.+420    	; 0x25a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	d0 c0       	rjmp	.+416    	; 0x25a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	ce c0       	rjmp	.+412    	; 0x25a <__bad_interrupt>
      be:	00 00       	nop
      c0:	cc c0       	rjmp	.+408    	; 0x25a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	ca c0       	rjmp	.+404    	; 0x25a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	c8 c0       	rjmp	.+400    	; 0x25a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	c6 c0       	rjmp	.+396    	; 0x25a <__bad_interrupt>
      ce:	00 00       	nop
      d0:	c4 c0       	rjmp	.+392    	; 0x25a <__bad_interrupt>
      d2:	00 00       	nop
      d4:	c2 c0       	rjmp	.+388    	; 0x25a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	c0 c0       	rjmp	.+384    	; 0x25a <__bad_interrupt>
      da:	00 00       	nop
      dc:	be c0       	rjmp	.+380    	; 0x25a <__bad_interrupt>
      de:	00 00       	nop
      e0:	bc c0       	rjmp	.+376    	; 0x25a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	2b 04       	cpc	r2, r11
      e6:	f5 03       	fmuls	r23, r21
      e8:	fd 03       	fmulsu	r23, r21
      ea:	09 04       	cpc	r0, r9
      ec:	16 04       	cpc	r1, r6
      ee:	37 04       	cpc	r3, r7
      f0:	44 04       	cpc	r4, r4
      f2:	d8 06       	cpc	r13, r24
      f4:	db 06       	cpc	r13, r27
      f6:	ca 06       	cpc	r12, r26
      f8:	ce 06       	cpc	r12, r30
      fa:	d4 06       	cpc	r13, r20
      fc:	12 07       	cpc	r17, r18
      fe:	df 06       	cpc	r13, r31
     100:	e3 06       	cpc	r14, r19
     102:	e9 06       	cpc	r14, r25
     104:	ed 06       	cpc	r14, r29
     106:	f1 06       	cpc	r15, r17
     108:	f7 06       	cpc	r15, r23
     10a:	fb 06       	cpc	r15, r27
     10c:	ff 06       	cpc	r15, r31
     10e:	12 07       	cpc	r17, r18
     110:	05 07       	cpc	r16, r21
     112:	09 07       	cpc	r16, r25
     114:	0d 07       	cpc	r16, r29

00000116 <__trampolines_end>:
     116:	00 00       	nop
     118:	0a 0b       	sbc	r16, r26
     11a:	02 09       	sbc	r16, r2
     11c:	0c 0d       	add	r16, r12
     11e:	0e 08       	sbc	r0, r14
     120:	07 03       	mulsu	r16, r23
     122:	04 01       	movw	r0, r8
	...
     140:	00 00       	nop
     142:	12 11       	cpse	r17, r2
     144:	10 00       	.word	0x0010	; ????
	...

0000015c <digital_pin_to_bit_mask_PGM>:
     15c:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     16c:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     17c:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     18c:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     19c:	04 08 10 20 40 80                                   ... @.

000001a2 <digital_pin_to_port_PGM>:
     1a2:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1b2:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1c2:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1d2:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1e2:	0b 0b 0b 0b 0b 0b                                   ......

000001e8 <port_to_output_PGM>:
     1e8:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     1f8:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000202 <port_to_mode_PGM>:
     202:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     212:	01 01 00 00 04 01 07 01 0a 01                       ..........

0000021c <__ctors_end>:
     21c:	11 24       	eor	r1, r1
     21e:	1f be       	out	0x3f, r1	; 63
     220:	cf ef       	ldi	r28, 0xFF	; 255
     222:	d1 e2       	ldi	r29, 0x21	; 33
     224:	de bf       	out	0x3e, r29	; 62
     226:	cd bf       	out	0x3d, r28	; 61
     228:	00 e0       	ldi	r16, 0x00	; 0
     22a:	0c bf       	out	0x3c, r16	; 60

0000022c <__do_copy_data>:
     22c:	12 e0       	ldi	r17, 0x02	; 2
     22e:	a0 e0       	ldi	r26, 0x00	; 0
     230:	b2 e0       	ldi	r27, 0x02	; 2
     232:	ee eb       	ldi	r30, 0xBE	; 190
     234:	f1 e1       	ldi	r31, 0x11	; 17
     236:	00 e0       	ldi	r16, 0x00	; 0
     238:	0b bf       	out	0x3b, r16	; 59
     23a:	02 c0       	rjmp	.+4      	; 0x240 <__do_copy_data+0x14>
     23c:	07 90       	elpm	r0, Z+
     23e:	0d 92       	st	X+, r0
     240:	a4 36       	cpi	r26, 0x64	; 100
     242:	b1 07       	cpc	r27, r17
     244:	d9 f7       	brne	.-10     	; 0x23c <__do_copy_data+0x10>

00000246 <__do_clear_bss>:
     246:	22 e0       	ldi	r18, 0x02	; 2
     248:	a4 e6       	ldi	r26, 0x64	; 100
     24a:	b2 e0       	ldi	r27, 0x02	; 2
     24c:	01 c0       	rjmp	.+2      	; 0x250 <.do_clear_bss_start>

0000024e <.do_clear_bss_loop>:
     24e:	1d 92       	st	X+, r1

00000250 <.do_clear_bss_start>:
     250:	a7 37       	cpi	r26, 0x77	; 119
     252:	b2 07       	cpc	r27, r18
     254:	e1 f7       	brne	.-8      	; 0x24e <.do_clear_bss_loop>
     256:	65 d2       	rcall	.+1226   	; 0x722 <main>
     258:	b0 c7       	rjmp	.+3936   	; 0x11ba <_exit>

0000025a <__bad_interrupt>:
     25a:	d2 ce       	rjmp	.-604    	; 0x0 <__vectors>

0000025c <controller_interrupt_buttons>:
	lcd_clear(self->lcd);
	lcd_print(self->lcd, "WELCOME");
}

void controller_interrupt_buttons()
{
     25c:	08 95       	ret

0000025e <controller_initialize>:
#include "controller.h"

tact_switch_board controller_tact_switches;

void controller_initialize(controller *self)
{   
     25e:	ef 92       	push	r14
     260:	0f 93       	push	r16
     262:	cf 93       	push	r28
     264:	df 93       	push	r29
     266:	ec 01       	movw	r28, r24
    self->switches = &controller_tact_switches;
     268:	e6 e0       	ldi	r30, 0x06	; 6
     26a:	f2 e0       	ldi	r31, 0x02	; 2
     26c:	f9 83       	std	Y+1, r31	; 0x01
     26e:	e8 83       	st	Y, r30
    self->switches->data_pin = 1;
     270:	81 e0       	ldi	r24, 0x01	; 1
     272:	80 83       	st	Z, r24
    self->switches->interrupt_pin = 2;
     274:	e8 81       	ld	r30, Y
     276:	f9 81       	ldd	r31, Y+1	; 0x01
     278:	82 e0       	ldi	r24, 0x02	; 2
     27a:	81 83       	std	Z+1, r24	; 0x01
  
    self->leds = malloc(sizeof(led_shift_register));
     27c:	88 e0       	ldi	r24, 0x08	; 8
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	7b d6       	rcall	.+3318   	; 0xf78 <malloc>
     282:	fc 01       	movw	r30, r24
     284:	9b 83       	std	Y+3, r25	; 0x03
     286:	8a 83       	std	Y+2, r24	; 0x02
    self->leds->data_pin = 53;
     288:	85 e3       	ldi	r24, 0x35	; 53
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	91 83       	std	Z+1, r25	; 0x01
     28e:	80 83       	st	Z, r24
    self->leds->clock_pin = 49;
     290:	81 e3       	ldi	r24, 0x31	; 49
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	93 83       	std	Z+3, r25	; 0x03
     296:	82 83       	std	Z+2, r24	; 0x02
    self->leds->latch_pin = 51;
     298:	83 e3       	ldi	r24, 0x33	; 51
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	95 83       	std	Z+5, r25	; 0x05
     29e:	84 83       	std	Z+4, r24	; 0x04

	pinMode(47, OUTPUT);
     2a0:	61 e0       	ldi	r22, 0x01	; 1
     2a2:	8f e2       	ldi	r24, 0x2F	; 47
	digitalWrite(47, HIGH);
     2a4:	c0 d5       	rcall	.+2944   	; 0xe26 <pinMode>
     2a6:	61 e0       	ldi	r22, 0x01	; 1
     2a8:	8f e2       	ldi	r24, 0x2F	; 47

	pinMode(self->leds->data_pin, OUTPUT);
     2aa:	f9 d5       	rcall	.+3058   	; 0xe9e <digitalWrite>
     2ac:	ea 81       	ldd	r30, Y+2	; 0x02
     2ae:	fb 81       	ldd	r31, Y+3	; 0x03
     2b0:	61 e0       	ldi	r22, 0x01	; 1
	pinMode(self->leds->clock_pin, OUTPUT);
     2b2:	80 81       	ld	r24, Z
     2b4:	b8 d5       	rcall	.+2928   	; 0xe26 <pinMode>
     2b6:	ea 81       	ldd	r30, Y+2	; 0x02
     2b8:	fb 81       	ldd	r31, Y+3	; 0x03
	pinMode(self->leds->latch_pin, OUTPUT);
     2ba:	61 e0       	ldi	r22, 0x01	; 1
     2bc:	82 81       	ldd	r24, Z+2	; 0x02
     2be:	b3 d5       	rcall	.+2918   	; 0xe26 <pinMode>
     2c0:	ea 81       	ldd	r30, Y+2	; 0x02
     2c2:	fb 81       	ldd	r31, Y+3	; 0x03
	pinMode(self->switches->interrupt_pin, OUTPUT);
     2c4:	61 e0       	ldi	r22, 0x01	; 1
     2c6:	84 81       	ldd	r24, Z+4	; 0x04
     2c8:	ae d5       	rcall	.+2908   	; 0xe26 <pinMode>
     2ca:	e8 81       	ld	r30, Y
     2cc:	f9 81       	ldd	r31, Y+1	; 0x01

	digitalWrite(self->leds->data_pin, LOW);
     2ce:	61 e0       	ldi	r22, 0x01	; 1
     2d0:	81 81       	ldd	r24, Z+1	; 0x01
     2d2:	a9 d5       	rcall	.+2898   	; 0xe26 <pinMode>
     2d4:	ea 81       	ldd	r30, Y+2	; 0x02
     2d6:	fb 81       	ldd	r31, Y+3	; 0x03
	digitalWrite(self->leds->clock_pin, LOW);
     2d8:	60 e0       	ldi	r22, 0x00	; 0
     2da:	80 81       	ld	r24, Z
     2dc:	e0 d5       	rcall	.+3008   	; 0xe9e <digitalWrite>
     2de:	ea 81       	ldd	r30, Y+2	; 0x02
     2e0:	fb 81       	ldd	r31, Y+3	; 0x03
	digitalWrite(self->leds->latch_pin, LOW);
     2e2:	60 e0       	ldi	r22, 0x00	; 0
     2e4:	82 81       	ldd	r24, Z+2	; 0x02
     2e6:	db d5       	rcall	.+2998   	; 0xe9e <digitalWrite>
     2e8:	ea 81       	ldd	r30, Y+2	; 0x02
     2ea:	fb 81       	ldd	r31, Y+3	; 0x03

	attachInterrupt(self->switches->interrupt_pin, controller_interrupt_buttons, RISING);
     2ec:	60 e0       	ldi	r22, 0x00	; 0
     2ee:	84 81       	ldd	r24, Z+4	; 0x04
     2f0:	d6 d5       	rcall	.+2988   	; 0xe9e <digitalWrite>
     2f2:	e8 81       	ld	r30, Y
     2f4:	f9 81       	ldd	r31, Y+1	; 0x01
     2f6:	43 e0       	ldi	r20, 0x03	; 3
     2f8:	50 e0       	ldi	r21, 0x00	; 0
     2fa:	6e e2       	ldi	r22, 0x2E	; 46
  
	self->lcd = lcd_get(8, 9, 4, 5, 6, 7);
     2fc:	71 e0       	ldi	r23, 0x01	; 1
     2fe:	81 81       	ldd	r24, Z+1	; 0x01
     300:	5d d2       	rcall	.+1210   	; 0x7bc <attachInterrupt>
     302:	87 e0       	ldi	r24, 0x07	; 7
     304:	e8 2e       	mov	r14, r24
     306:	06 e0       	ldi	r16, 0x06	; 6
     308:	25 e0       	ldi	r18, 0x05	; 5
     30a:	44 e0       	ldi	r20, 0x04	; 4
	lcd_begin(self->lcd, 16, 2);
     30c:	69 e0       	ldi	r22, 0x09	; 9
     30e:	88 e0       	ldi	r24, 0x08	; 8
     310:	db d1       	rcall	.+950    	; 0x6c8 <lcd_get>
	lcd_set_cursor(self->lcd, 0, 0);
     312:	9d 83       	std	Y+5, r25	; 0x05
     314:	8c 83       	std	Y+4, r24	; 0x04
     316:	42 e0       	ldi	r20, 0x02	; 2
     318:	60 e1       	ldi	r22, 0x10	; 16
	lcd_print(self->lcd, "RC Controller");
     31a:	f9 d1       	rcall	.+1010   	; 0x70e <lcd_begin>
     31c:	40 e0       	ldi	r20, 0x00	; 0
     31e:	60 e0       	ldi	r22, 0x00	; 0
     320:	8c 81       	ldd	r24, Y+4	; 0x04
	lcd_set_cursor(self->lcd, 0, 1);
     322:	9d 81       	ldd	r25, Y+5	; 0x05
     324:	f7 d1       	rcall	.+1006   	; 0x714 <lcd_set_cursor>
     326:	6c e2       	ldi	r22, 0x2C	; 44
     328:	72 e0       	ldi	r23, 0x02	; 2
     32a:	8c 81       	ldd	r24, Y+4	; 0x04
	lcd_print(self->lcd, "ver. 1.0");
     32c:	9d 81       	ldd	r25, Y+5	; 0x05
     32e:	f3 d1       	rcall	.+998    	; 0x716 <lcd_print>
     330:	41 e0       	ldi	r20, 0x01	; 1
     332:	60 e0       	ldi	r22, 0x00	; 0
    delay(2000);
     334:	8c 81       	ldd	r24, Y+4	; 0x04
     336:	9d 81       	ldd	r25, Y+5	; 0x05
     338:	ed d1       	rcall	.+986    	; 0x714 <lcd_set_cursor>
	lcd_clear(self->lcd);
     33a:	6a e3       	ldi	r22, 0x3A	; 58
     33c:	72 e0       	ldi	r23, 0x02	; 2
     33e:	8c 81       	ldd	r24, Y+4	; 0x04
	lcd_set_cursor(self->lcd, 0, 0);
     340:	9d 81       	ldd	r25, Y+5	; 0x05
     342:	e9 d1       	rcall	.+978    	; 0x716 <lcd_print>
     344:	60 ed       	ldi	r22, 0xD0	; 208
     346:	77 e0       	ldi	r23, 0x07	; 7
	delay(1000);
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	71 d4       	rcall	.+2274   	; 0xc30 <delay>
     34e:	8c 81       	ldd	r24, Y+4	; 0x04
     350:	9d 81       	ldd	r25, Y+5	; 0x05
	led_shift_register_reset(self->leds);
     352:	df d1       	rcall	.+958    	; 0x712 <lcd_clear>
     354:	40 e0       	ldi	r20, 0x00	; 0
     356:	60 e0       	ldi	r22, 0x00	; 0
	digitalWrite(47, LOW);
     358:	8c 81       	ldd	r24, Y+4	; 0x04
     35a:	9d 81       	ldd	r25, Y+5	; 0x05
     35c:	db d1       	rcall	.+950    	; 0x714 <lcd_set_cursor>
	lcd_print(self->lcd, "Testing LEDs...");
     35e:	68 ee       	ldi	r22, 0xE8	; 232
     360:	73 e0       	ldi	r23, 0x03	; 3
     362:	80 e0       	ldi	r24, 0x00	; 0
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	64 d4       	rcall	.+2248   	; 0xc30 <delay>
     368:	8a 81       	ldd	r24, Y+2	; 0x02
    //Testing controller info leds
    led_shift_register_test(self->leds);
     36a:	9b 81       	ldd	r25, Y+3	; 0x03
     36c:	2a d0       	rcall	.+84     	; 0x3c2 <led_shift_register_reset>
     36e:	60 e0       	ldi	r22, 0x00	; 0
     370:	8f e2       	ldi	r24, 0x2F	; 47
	lcd_clear(self->lcd);
     372:	95 d5       	rcall	.+2858   	; 0xe9e <digitalWrite>
     374:	63 e4       	ldi	r22, 0x43	; 67
     376:	72 e0       	ldi	r23, 0x02	; 2
     378:	8c 81       	ldd	r24, Y+4	; 0x04
	lcd_print(self->lcd, "WELCOME");
     37a:	9d 81       	ldd	r25, Y+5	; 0x05
     37c:	cc d1       	rcall	.+920    	; 0x716 <lcd_print>
     37e:	8a 81       	ldd	r24, Y+2	; 0x02
     380:	9b 81       	ldd	r25, Y+3	; 0x03
}
     382:	25 d0       	rcall	.+74     	; 0x3ce <led_shift_register_test>
     384:	8c 81       	ldd	r24, Y+4	; 0x04
     386:	9d 81       	ldd	r25, Y+5	; 0x05
     388:	c4 d1       	rcall	.+904    	; 0x712 <lcd_clear>
	digitalWrite(47, LOW);
	lcd_print(self->lcd, "Testing LEDs...");
    //Testing controller info leds
    led_shift_register_test(self->leds);
	lcd_clear(self->lcd);
	lcd_print(self->lcd, "WELCOME");
     38a:	63 e5       	ldi	r22, 0x53	; 83
     38c:	72 e0       	ldi	r23, 0x02	; 2
     38e:	8c 81       	ldd	r24, Y+4	; 0x04
     390:	9d 81       	ldd	r25, Y+5	; 0x05
     392:	df 91       	pop	r29
     394:	cf 91       	pop	r28
     396:	0f 91       	pop	r16
     398:	ef 90       	pop	r14
     39a:	bd c1       	rjmp	.+890    	; 0x716 <lcd_print>

0000039c <led_shift_register_write>:
  shift_register->led_state = shift_register->led_state & (!(short)led);
  led_shift_register_write(shift_register, shift_register->led_state);
}

void led_shift_register_write(led_shift_register *shift_register, short value)
{
     39c:	1f 93       	push	r17
     39e:	cf 93       	push	r28
     3a0:	df 93       	push	r29
     3a2:	ec 01       	movw	r28, r24
     3a4:	16 2f       	mov	r17, r22
    digitalWrite(shift_register->latch_pin, LOW);
     3a6:	60 e0       	ldi	r22, 0x00	; 0
     3a8:	8c 81       	ldd	r24, Y+4	; 0x04
     3aa:	79 d5       	rcall	.+2802   	; 0xe9e <digitalWrite>
    shiftOut(shift_register->data_pin, shift_register->clock_pin, MSBFIRST, value);
     3ac:	21 2f       	mov	r18, r17
     3ae:	41 e0       	ldi	r20, 0x01	; 1
     3b0:	6a 81       	ldd	r22, Y+2	; 0x02
     3b2:	88 81       	ld	r24, Y
     3b4:	a2 d5       	rcall	.+2884   	; 0xefa <shiftOut>
    digitalWrite(shift_register->latch_pin, HIGH);
     3b6:	61 e0       	ldi	r22, 0x01	; 1
     3b8:	8c 81       	ldd	r24, Y+4	; 0x04
     3ba:	df 91       	pop	r29
     3bc:	cf 91       	pop	r28

void led_shift_register_write(led_shift_register *shift_register, short value)
{
    digitalWrite(shift_register->latch_pin, LOW);
    shiftOut(shift_register->data_pin, shift_register->clock_pin, MSBFIRST, value);
    digitalWrite(shift_register->latch_pin, HIGH);
     3be:	1f 91       	pop	r17
     3c0:	6e c5       	rjmp	.+2780   	; 0xe9e <digitalWrite>

000003c2 <led_shift_register_reset>:
    led_shift_register_reset(shift_register);
}

void led_shift_register_reset(led_shift_register *shift_register)
{
    shift_register->led_state = 0;
     3c2:	fc 01       	movw	r30, r24
     3c4:	17 82       	std	Z+7, r1	; 0x07
     3c6:	16 82       	std	Z+6, r1	; 0x06
    led_shift_register_write(shift_register, shift_register->led_state);
     3c8:	60 e0       	ldi	r22, 0x00	; 0
     3ca:	70 e0       	ldi	r23, 0x00	; 0
     3cc:	e7 cf       	rjmp	.-50     	; 0x39c <led_shift_register_write>

000003ce <led_shift_register_test>:

static void led_shift_register_write(led_shift_register *, short);


void led_shift_register_test(led_shift_register *shift_register)
{
     3ce:	cf 93       	push	r28
     3d0:	df 93       	push	r29
     3d2:	ec 01       	movw	r28, r24
	shift_register->led_state = 1;
     3d4:	81 e0       	ldi	r24, 0x01	; 1
     3d6:	90 e0       	ldi	r25, 0x00	; 0
    for(shift_register->led_state; shift_register->led_state <= 128; shift_register->led_state = shift_register->led_state * 2)
     3d8:	9f 83       	std	Y+7, r25	; 0x07
     3da:	8e 83       	std	Y+6, r24	; 0x06
     3dc:	6e 81       	ldd	r22, Y+6	; 0x06
     3de:	7f 81       	ldd	r23, Y+7	; 0x07
    {
      led_shift_register_write(shift_register, shift_register->led_state);
     3e0:	ce 01       	movw	r24, r28


void led_shift_register_test(led_shift_register *shift_register)
{
	shift_register->led_state = 1;
    for(shift_register->led_state; shift_register->led_state <= 128; shift_register->led_state = shift_register->led_state * 2)
     3e2:	61 38       	cpi	r22, 0x81	; 129
     3e4:	71 05       	cpc	r23, r1
    {
      led_shift_register_write(shift_register, shift_register->led_state);
     3e6:	5c f4       	brge	.+22     	; 0x3fe <led_shift_register_test+0x30>
	  delay(200);
     3e8:	d9 df       	rcall	.-78     	; 0x39c <led_shift_register_write>
     3ea:	68 ec       	ldi	r22, 0xC8	; 200
     3ec:	70 e0       	ldi	r23, 0x00	; 0
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	90 e0       	ldi	r25, 0x00	; 0


void led_shift_register_test(led_shift_register *shift_register)
{
	shift_register->led_state = 1;
    for(shift_register->led_state; shift_register->led_state <= 128; shift_register->led_state = shift_register->led_state * 2)
     3f2:	1e d4       	rcall	.+2108   	; 0xc30 <delay>
     3f4:	8e 81       	ldd	r24, Y+6	; 0x06
     3f6:	9f 81       	ldd	r25, Y+7	; 0x07
     3f8:	88 0f       	add	r24, r24
      led_shift_register_write(shift_register, shift_register->led_state);
	  delay(200);
    }
    
    led_shift_register_reset(shift_register);
}
     3fa:	99 1f       	adc	r25, r25
    {
      led_shift_register_write(shift_register, shift_register->led_state);
	  delay(200);
    }
    
    led_shift_register_reset(shift_register);
     3fc:	ed cf       	rjmp	.-38     	; 0x3d8 <led_shift_register_test+0xa>
     3fe:	df 91       	pop	r29
     400:	cf 91       	pop	r28
     402:	df cf       	rjmp	.-66     	; 0x3c2 <led_shift_register_reset>

00000404 <_ZN13LiquidCrystal11pulseEnableEv>:
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
}
     404:	cf 93       	push	r28
     406:	df 93       	push	r29
     408:	ec 01       	movw	r28, r24
     40a:	60 e0       	ldi	r22, 0x00	; 0
     40c:	8e 81       	ldd	r24, Y+6	; 0x06
     40e:	47 d5       	rcall	.+2702   	; 0xe9e <digitalWrite>
     410:	81 e0       	ldi	r24, 0x01	; 1
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	46 d4       	rcall	.+2188   	; 0xca2 <delayMicroseconds>
     416:	61 e0       	ldi	r22, 0x01	; 1
     418:	8e 81       	ldd	r24, Y+6	; 0x06
     41a:	41 d5       	rcall	.+2690   	; 0xe9e <digitalWrite>
     41c:	81 e0       	ldi	r24, 0x01	; 1
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	40 d4       	rcall	.+2176   	; 0xca2 <delayMicroseconds>
     422:	60 e0       	ldi	r22, 0x00	; 0
     424:	8e 81       	ldd	r24, Y+6	; 0x06
     426:	3b d5       	rcall	.+2678   	; 0xe9e <digitalWrite>
     428:	84 e6       	ldi	r24, 0x64	; 100
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	df 91       	pop	r29
     42e:	cf 91       	pop	r28
     430:	38 c4       	rjmp	.+2160   	; 0xca2 <delayMicroseconds>

00000432 <_ZN13LiquidCrystal10write4bitsEh>:
     432:	cf 92       	push	r12
     434:	df 92       	push	r13
     436:	ef 92       	push	r14
     438:	ff 92       	push	r15
     43a:	0f 93       	push	r16
     43c:	1f 93       	push	r17
     43e:	cf 93       	push	r28
     440:	df 93       	push	r29
     442:	6c 01       	movw	r12, r24
     444:	7c 01       	movw	r14, r24
     446:	87 e0       	ldi	r24, 0x07	; 7
     448:	e8 0e       	add	r14, r24
     44a:	f1 1c       	adc	r15, r1
     44c:	c0 e0       	ldi	r28, 0x00	; 0
     44e:	d0 e0       	ldi	r29, 0x00	; 0
     450:	06 2f       	mov	r16, r22
     452:	10 e0       	ldi	r17, 0x00	; 0
     454:	b8 01       	movw	r22, r16
     456:	0c 2e       	mov	r0, r28
     458:	02 c0       	rjmp	.+4      	; 0x45e <_ZN13LiquidCrystal10write4bitsEh+0x2c>
     45a:	75 95       	asr	r23
     45c:	67 95       	ror	r22
     45e:	0a 94       	dec	r0
     460:	e2 f7       	brpl	.-8      	; 0x45a <_ZN13LiquidCrystal10write4bitsEh+0x28>
     462:	61 70       	andi	r22, 0x01	; 1
     464:	f7 01       	movw	r30, r14
     466:	81 91       	ld	r24, Z+
     468:	7f 01       	movw	r14, r30
     46a:	19 d5       	rcall	.+2610   	; 0xe9e <digitalWrite>
     46c:	21 96       	adiw	r28, 0x01	; 1
     46e:	c4 30       	cpi	r28, 0x04	; 4
     470:	d1 05       	cpc	r29, r1
     472:	81 f7       	brne	.-32     	; 0x454 <_ZN13LiquidCrystal10write4bitsEh+0x22>
     474:	c6 01       	movw	r24, r12
     476:	df 91       	pop	r29
     478:	cf 91       	pop	r28
     47a:	1f 91       	pop	r17
     47c:	0f 91       	pop	r16
     47e:	ff 90       	pop	r15
     480:	ef 90       	pop	r14
     482:	df 90       	pop	r13
     484:	cf 90       	pop	r12
     486:	be cf       	rjmp	.-132    	; 0x404 <_ZN13LiquidCrystal11pulseEnableEv>

00000488 <_ZN13LiquidCrystal10write8bitsEh>:
     488:	cf 92       	push	r12
     48a:	df 92       	push	r13
     48c:	ef 92       	push	r14
     48e:	ff 92       	push	r15
     490:	0f 93       	push	r16
     492:	1f 93       	push	r17
     494:	cf 93       	push	r28
     496:	df 93       	push	r29
     498:	6c 01       	movw	r12, r24
     49a:	7c 01       	movw	r14, r24
     49c:	87 e0       	ldi	r24, 0x07	; 7
     49e:	e8 0e       	add	r14, r24
     4a0:	f1 1c       	adc	r15, r1
     4a2:	c0 e0       	ldi	r28, 0x00	; 0
     4a4:	d0 e0       	ldi	r29, 0x00	; 0
     4a6:	06 2f       	mov	r16, r22
     4a8:	10 e0       	ldi	r17, 0x00	; 0
     4aa:	b8 01       	movw	r22, r16
     4ac:	0c 2e       	mov	r0, r28
     4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <_ZN13LiquidCrystal10write8bitsEh+0x2c>
     4b0:	75 95       	asr	r23
     4b2:	67 95       	ror	r22
     4b4:	0a 94       	dec	r0
     4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <_ZN13LiquidCrystal10write8bitsEh+0x28>
     4b8:	61 70       	andi	r22, 0x01	; 1
     4ba:	f7 01       	movw	r30, r14
     4bc:	81 91       	ld	r24, Z+
     4be:	7f 01       	movw	r14, r30
     4c0:	ee d4       	rcall	.+2524   	; 0xe9e <digitalWrite>
     4c2:	21 96       	adiw	r28, 0x01	; 1
     4c4:	c8 30       	cpi	r28, 0x08	; 8
     4c6:	d1 05       	cpc	r29, r1
     4c8:	81 f7       	brne	.-32     	; 0x4aa <_ZN13LiquidCrystal10write8bitsEh+0x22>
     4ca:	c6 01       	movw	r24, r12
     4cc:	df 91       	pop	r29
     4ce:	cf 91       	pop	r28
     4d0:	1f 91       	pop	r17
     4d2:	0f 91       	pop	r16
     4d4:	ff 90       	pop	r15
     4d6:	ef 90       	pop	r14
     4d8:	df 90       	pop	r13
     4da:	cf 90       	pop	r12
     4dc:	93 cf       	rjmp	.-218    	; 0x404 <_ZN13LiquidCrystal11pulseEnableEv>

000004de <_ZN13LiquidCrystal4sendEhh>:
     4de:	1f 93       	push	r17
     4e0:	cf 93       	push	r28
     4e2:	df 93       	push	r29
     4e4:	ec 01       	movw	r28, r24
     4e6:	16 2f       	mov	r17, r22
     4e8:	64 2f       	mov	r22, r20
     4ea:	8c 81       	ldd	r24, Y+4	; 0x04
     4ec:	d8 d4       	rcall	.+2480   	; 0xe9e <digitalWrite>
     4ee:	8d 81       	ldd	r24, Y+5	; 0x05
     4f0:	8f 3f       	cpi	r24, 0xFF	; 255
     4f2:	11 f0       	breq	.+4      	; 0x4f8 <_ZN13LiquidCrystal4sendEhh+0x1a>
     4f4:	60 e0       	ldi	r22, 0x00	; 0
     4f6:	d3 d4       	rcall	.+2470   	; 0xe9e <digitalWrite>
     4f8:	8f 85       	ldd	r24, Y+15	; 0x0f
     4fa:	61 2f       	mov	r22, r17
     4fc:	84 ff       	sbrs	r24, 4
     4fe:	05 c0       	rjmp	.+10     	; 0x50a <_ZN13LiquidCrystal4sendEhh+0x2c>
     500:	ce 01       	movw	r24, r28
     502:	df 91       	pop	r29
     504:	cf 91       	pop	r28
     506:	1f 91       	pop	r17
     508:	bf cf       	rjmp	.-130    	; 0x488 <_ZN13LiquidCrystal10write8bitsEh>
     50a:	70 e0       	ldi	r23, 0x00	; 0
     50c:	84 e0       	ldi	r24, 0x04	; 4
     50e:	75 95       	asr	r23
     510:	67 95       	ror	r22
     512:	8a 95       	dec	r24
     514:	e1 f7       	brne	.-8      	; 0x50e <_ZN13LiquidCrystal4sendEhh+0x30>
     516:	ce 01       	movw	r24, r28
     518:	8c df       	rcall	.-232    	; 0x432 <_ZN13LiquidCrystal10write4bitsEh>
     51a:	61 2f       	mov	r22, r17
     51c:	ce 01       	movw	r24, r28
     51e:	df 91       	pop	r29
     520:	cf 91       	pop	r28
     522:	1f 91       	pop	r17
     524:	86 cf       	rjmp	.-244    	; 0x432 <_ZN13LiquidCrystal10write4bitsEh>

00000526 <_ZN13LiquidCrystal7commandEh>:
     526:	40 e0       	ldi	r20, 0x00	; 0
     528:	da cf       	rjmp	.-76     	; 0x4de <_ZN13LiquidCrystal4sendEhh>

0000052a <_ZN13LiquidCrystal5clearEv>:
     52a:	61 e0       	ldi	r22, 0x01	; 1
     52c:	fc df       	rcall	.-8      	; 0x526 <_ZN13LiquidCrystal7commandEh>
     52e:	80 ed       	ldi	r24, 0xD0	; 208
     530:	97 e0       	ldi	r25, 0x07	; 7
     532:	b7 c3       	rjmp	.+1902   	; 0xca2 <delayMicroseconds>

00000534 <_ZN13LiquidCrystal9setCursorEhh>:
     534:	fc 01       	movw	r30, r24
     536:	44 30       	cpi	r20, 0x04	; 4
     538:	08 f0       	brcs	.+2      	; 0x53c <_ZN13LiquidCrystal9setCursorEhh+0x8>
     53a:	43 e0       	ldi	r20, 0x03	; 3
     53c:	83 89       	ldd	r24, Z+19	; 0x13
     53e:	48 17       	cp	r20, r24
     540:	10 f0       	brcs	.+4      	; 0x546 <_ZN13LiquidCrystal9setCursorEhh+0x12>
     542:	4f ef       	ldi	r20, 0xFF	; 255
     544:	48 0f       	add	r20, r24
     546:	df 01       	movw	r26, r30
     548:	a4 0f       	add	r26, r20
     54a:	b1 1d       	adc	r27, r1
     54c:	54 96       	adiw	r26, 0x14	; 20
     54e:	9c 91       	ld	r25, X
     550:	69 0f       	add	r22, r25
     552:	60 68       	ori	r22, 0x80	; 128
     554:	cf 01       	movw	r24, r30
     556:	e7 cf       	rjmp	.-50     	; 0x526 <_ZN13LiquidCrystal7commandEh>

00000558 <_ZN13LiquidCrystal7displayEv>:
     558:	fc 01       	movw	r30, r24
     55a:	60 89       	ldd	r22, Z+16	; 0x10
     55c:	26 2f       	mov	r18, r22
     55e:	24 60       	ori	r18, 0x04	; 4
     560:	20 8b       	std	Z+16, r18	; 0x10
     562:	6c 60       	ori	r22, 0x0C	; 12
     564:	e0 cf       	rjmp	.-64     	; 0x526 <_ZN13LiquidCrystal7commandEh>

00000566 <_ZN13LiquidCrystal5beginEhhh>:
     566:	ef 92       	push	r14
     568:	ff 92       	push	r15
     56a:	0f 93       	push	r16
     56c:	1f 93       	push	r17
     56e:	cf 93       	push	r28
     570:	df 93       	push	r29
     572:	ec 01       	movw	r28, r24
     574:	42 30       	cpi	r20, 0x02	; 2
     576:	18 f0       	brcs	.+6      	; 0x57e <_ZN13LiquidCrystal5beginEhhh+0x18>
     578:	8f 85       	ldd	r24, Y+15	; 0x0f
     57a:	88 60       	ori	r24, 0x08	; 8
     57c:	8f 87       	std	Y+15, r24	; 0x0f
     57e:	4b 8b       	std	Y+19, r20	; 0x13
     580:	1c 8a       	std	Y+20, r1	; 0x14
     582:	80 e4       	ldi	r24, 0x40	; 64
     584:	8d 8b       	std	Y+21, r24	; 0x15
     586:	6e 8b       	std	Y+22, r22	; 0x16
     588:	70 e0       	ldi	r23, 0x00	; 0
     58a:	60 5c       	subi	r22, 0xC0	; 192
     58c:	7f 4f       	sbci	r23, 0xFF	; 255
     58e:	6f 8b       	std	Y+23, r22	; 0x17
     590:	22 23       	and	r18, r18
     592:	29 f0       	breq	.+10     	; 0x59e <_ZN13LiquidCrystal5beginEhhh+0x38>
     594:	41 30       	cpi	r20, 0x01	; 1
     596:	19 f4       	brne	.+6      	; 0x59e <_ZN13LiquidCrystal5beginEhhh+0x38>
     598:	8f 85       	ldd	r24, Y+15	; 0x0f
     59a:	84 60       	ori	r24, 0x04	; 4
     59c:	8f 87       	std	Y+15, r24	; 0x0f
     59e:	61 e0       	ldi	r22, 0x01	; 1
     5a0:	8c 81       	ldd	r24, Y+4	; 0x04
     5a2:	41 d4       	rcall	.+2178   	; 0xe26 <pinMode>
     5a4:	8d 81       	ldd	r24, Y+5	; 0x05
     5a6:	8f 3f       	cpi	r24, 0xFF	; 255
     5a8:	11 f0       	breq	.+4      	; 0x5ae <_ZN13LiquidCrystal5beginEhhh+0x48>
     5aa:	61 e0       	ldi	r22, 0x01	; 1
     5ac:	3c d4       	rcall	.+2168   	; 0xe26 <pinMode>
     5ae:	61 e0       	ldi	r22, 0x01	; 1
     5b0:	8e 81       	ldd	r24, Y+6	; 0x06
     5b2:	39 d4       	rcall	.+2162   	; 0xe26 <pinMode>
     5b4:	7e 01       	movw	r14, r28
     5b6:	87 e0       	ldi	r24, 0x07	; 7
     5b8:	e8 0e       	add	r14, r24
     5ba:	f1 1c       	adc	r15, r1
     5bc:	00 e0       	ldi	r16, 0x00	; 0
     5be:	10 e0       	ldi	r17, 0x00	; 0
     5c0:	8f 85       	ldd	r24, Y+15	; 0x0f
     5c2:	84 fd       	sbrc	r24, 4
     5c4:	03 c0       	rjmp	.+6      	; 0x5cc <_ZN13LiquidCrystal5beginEhhh+0x66>
     5c6:	84 e0       	ldi	r24, 0x04	; 4
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <_ZN13LiquidCrystal5beginEhhh+0x6a>
     5cc:	88 e0       	ldi	r24, 0x08	; 8
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	08 17       	cp	r16, r24
     5d2:	19 07       	cpc	r17, r25
     5d4:	44 f4       	brge	.+16     	; 0x5e6 <_ZN13LiquidCrystal5beginEhhh+0x80>
     5d6:	61 e0       	ldi	r22, 0x01	; 1
     5d8:	f7 01       	movw	r30, r14
     5da:	81 91       	ld	r24, Z+
     5dc:	7f 01       	movw	r14, r30
     5de:	23 d4       	rcall	.+2118   	; 0xe26 <pinMode>
     5e0:	0f 5f       	subi	r16, 0xFF	; 255
     5e2:	1f 4f       	sbci	r17, 0xFF	; 255
     5e4:	ed cf       	rjmp	.-38     	; 0x5c0 <_ZN13LiquidCrystal5beginEhhh+0x5a>
     5e6:	80 e5       	ldi	r24, 0x50	; 80
     5e8:	93 ec       	ldi	r25, 0xC3	; 195
     5ea:	5b d3       	rcall	.+1718   	; 0xca2 <delayMicroseconds>
     5ec:	60 e0       	ldi	r22, 0x00	; 0
     5ee:	8c 81       	ldd	r24, Y+4	; 0x04
     5f0:	56 d4       	rcall	.+2220   	; 0xe9e <digitalWrite>
     5f2:	60 e0       	ldi	r22, 0x00	; 0
     5f4:	8e 81       	ldd	r24, Y+6	; 0x06
     5f6:	53 d4       	rcall	.+2214   	; 0xe9e <digitalWrite>
     5f8:	8d 81       	ldd	r24, Y+5	; 0x05
     5fa:	8f 3f       	cpi	r24, 0xFF	; 255
     5fc:	11 f0       	breq	.+4      	; 0x602 <_ZN13LiquidCrystal5beginEhhh+0x9c>
     5fe:	60 e0       	ldi	r22, 0x00	; 0
     600:	4e d4       	rcall	.+2204   	; 0xe9e <digitalWrite>
     602:	6f 85       	ldd	r22, Y+15	; 0x0f
     604:	64 fd       	sbrc	r22, 4
     606:	16 c0       	rjmp	.+44     	; 0x634 <_ZN13LiquidCrystal5beginEhhh+0xce>
     608:	63 e0       	ldi	r22, 0x03	; 3
     60a:	ce 01       	movw	r24, r28
     60c:	12 df       	rcall	.-476    	; 0x432 <_ZN13LiquidCrystal10write4bitsEh>
     60e:	84 e9       	ldi	r24, 0x94	; 148
     610:	91 e1       	ldi	r25, 0x11	; 17
     612:	47 d3       	rcall	.+1678   	; 0xca2 <delayMicroseconds>
     614:	63 e0       	ldi	r22, 0x03	; 3
     616:	ce 01       	movw	r24, r28
     618:	0c df       	rcall	.-488    	; 0x432 <_ZN13LiquidCrystal10write4bitsEh>
     61a:	84 e9       	ldi	r24, 0x94	; 148
     61c:	91 e1       	ldi	r25, 0x11	; 17
     61e:	41 d3       	rcall	.+1666   	; 0xca2 <delayMicroseconds>
     620:	63 e0       	ldi	r22, 0x03	; 3
     622:	ce 01       	movw	r24, r28
     624:	06 df       	rcall	.-500    	; 0x432 <_ZN13LiquidCrystal10write4bitsEh>
     626:	86 e9       	ldi	r24, 0x96	; 150
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	3b d3       	rcall	.+1654   	; 0xca2 <delayMicroseconds>
     62c:	62 e0       	ldi	r22, 0x02	; 2
     62e:	ce 01       	movw	r24, r28
     630:	00 df       	rcall	.-512    	; 0x432 <_ZN13LiquidCrystal10write4bitsEh>
     632:	11 c0       	rjmp	.+34     	; 0x656 <_ZN13LiquidCrystal5beginEhhh+0xf0>
     634:	60 62       	ori	r22, 0x20	; 32
     636:	ce 01       	movw	r24, r28
     638:	76 df       	rcall	.-276    	; 0x526 <_ZN13LiquidCrystal7commandEh>
     63a:	84 e9       	ldi	r24, 0x94	; 148
     63c:	91 e1       	ldi	r25, 0x11	; 17
     63e:	31 d3       	rcall	.+1634   	; 0xca2 <delayMicroseconds>
     640:	6f 85       	ldd	r22, Y+15	; 0x0f
     642:	60 62       	ori	r22, 0x20	; 32
     644:	ce 01       	movw	r24, r28
     646:	6f df       	rcall	.-290    	; 0x526 <_ZN13LiquidCrystal7commandEh>
     648:	86 e9       	ldi	r24, 0x96	; 150
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	2a d3       	rcall	.+1620   	; 0xca2 <delayMicroseconds>
     64e:	6f 85       	ldd	r22, Y+15	; 0x0f
     650:	60 62       	ori	r22, 0x20	; 32
     652:	ce 01       	movw	r24, r28
     654:	68 df       	rcall	.-304    	; 0x526 <_ZN13LiquidCrystal7commandEh>
     656:	6f 85       	ldd	r22, Y+15	; 0x0f
     658:	60 62       	ori	r22, 0x20	; 32
     65a:	ce 01       	movw	r24, r28
     65c:	64 df       	rcall	.-312    	; 0x526 <_ZN13LiquidCrystal7commandEh>
     65e:	84 e0       	ldi	r24, 0x04	; 4
     660:	88 8b       	std	Y+16, r24	; 0x10
     662:	ce 01       	movw	r24, r28
     664:	79 df       	rcall	.-270    	; 0x558 <_ZN13LiquidCrystal7displayEv>
     666:	ce 01       	movw	r24, r28
     668:	60 df       	rcall	.-320    	; 0x52a <_ZN13LiquidCrystal5clearEv>
     66a:	82 e0       	ldi	r24, 0x02	; 2
     66c:	89 8b       	std	Y+17, r24	; 0x11
     66e:	66 e0       	ldi	r22, 0x06	; 6
     670:	ce 01       	movw	r24, r28
     672:	df 91       	pop	r29
     674:	cf 91       	pop	r28
     676:	1f 91       	pop	r17
     678:	0f 91       	pop	r16
     67a:	ff 90       	pop	r15
     67c:	ef 90       	pop	r14
     67e:	53 cf       	rjmp	.-346    	; 0x526 <_ZN13LiquidCrystal7commandEh>

00000680 <_ZN13LiquidCrystalC1Ehhhhhh>:
     680:	cf 92       	push	r12
     682:	ef 92       	push	r14
     684:	0f 93       	push	r16
     686:	fc 01       	movw	r30, r24
     688:	13 82       	std	Z+3, r1	; 0x03
     68a:	12 82       	std	Z+2, r1	; 0x02
     68c:	8f e5       	ldi	r24, 0x5F	; 95
     68e:	92 e0       	ldi	r25, 0x02	; 2
     690:	91 83       	std	Z+1, r25	; 0x01
     692:	80 83       	st	Z, r24
     694:	64 83       	std	Z+4, r22	; 0x04
     696:	8f ef       	ldi	r24, 0xFF	; 255
     698:	85 83       	std	Z+5, r24	; 0x05
     69a:	46 83       	std	Z+6, r20	; 0x06
     69c:	27 83       	std	Z+7, r18	; 0x07
     69e:	00 87       	std	Z+8, r16	; 0x08
     6a0:	e1 86       	std	Z+9, r14	; 0x09
     6a2:	c2 86       	std	Z+10, r12	; 0x0a
     6a4:	13 86       	std	Z+11, r1	; 0x0b
     6a6:	14 86       	std	Z+12, r1	; 0x0c
     6a8:	15 86       	std	Z+13, r1	; 0x0d
     6aa:	16 86       	std	Z+14, r1	; 0x0e
     6ac:	17 86       	std	Z+15, r1	; 0x0f
     6ae:	20 e0       	ldi	r18, 0x00	; 0
     6b0:	41 e0       	ldi	r20, 0x01	; 1
     6b2:	60 e1       	ldi	r22, 0x10	; 16
     6b4:	cf 01       	movw	r24, r30
     6b6:	0f 91       	pop	r16
     6b8:	ef 90       	pop	r14
     6ba:	cf 90       	pop	r12
     6bc:	54 cf       	rjmp	.-344    	; 0x566 <_ZN13LiquidCrystal5beginEhhh>

000006be <_ZN13LiquidCrystal5writeEh>:
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
     6be:	41 e0       	ldi	r20, 0x01	; 1
     6c0:	0e df       	rcall	.-484    	; 0x4de <_ZN13LiquidCrystal4sendEhh>
  return 1; // assume sucess
}
     6c2:	81 e0       	ldi	r24, 0x01	; 1
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	08 95       	ret

000006c8 <lcd_get>:
		return new LiquidCrystal(rs, enable, d0, d1, d2, d3);
	 }

	 void lcd_free(LiquidCrystal * lcd)
	 {
		delete lcd;
     6c8:	bf 92       	push	r11
     6ca:	cf 92       	push	r12
     6cc:	df 92       	push	r13
     6ce:	ef 92       	push	r14
     6d0:	ff 92       	push	r15
     6d2:	0f 93       	push	r16
     6d4:	1f 93       	push	r17
     6d6:	cf 93       	push	r28
     6d8:	df 93       	push	r29
     6da:	18 2f       	mov	r17, r24
     6dc:	f6 2e       	mov	r15, r22
     6de:	d4 2e       	mov	r13, r20
     6e0:	b2 2e       	mov	r11, r18
     6e2:	88 e1       	ldi	r24, 0x18	; 24
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	28 d0       	rcall	.+80     	; 0x738 <_Znwj>
     6e8:	ec 01       	movw	r28, r24
     6ea:	ce 2c       	mov	r12, r14
     6ec:	e0 2e       	mov	r14, r16
     6ee:	0b 2d       	mov	r16, r11
     6f0:	2d 2d       	mov	r18, r13
     6f2:	4f 2d       	mov	r20, r15
     6f4:	61 2f       	mov	r22, r17
     6f6:	c4 df       	rcall	.-120    	; 0x680 <_ZN13LiquidCrystalC1Ehhhhhh>
     6f8:	ce 01       	movw	r24, r28
     6fa:	df 91       	pop	r29
     6fc:	cf 91       	pop	r28
     6fe:	1f 91       	pop	r17
     700:	0f 91       	pop	r16
     702:	ff 90       	pop	r15
     704:	ef 90       	pop	r14
     706:	df 90       	pop	r13
     708:	cf 90       	pop	r12
     70a:	bf 90       	pop	r11
     70c:	08 95       	ret

0000070e <lcd_begin>:
	 }

	 void lcd_begin(LiquidCrystal *lcd, uint8_t cols, uint8_t rows)
	 {
		lcd->begin(cols, rows);
     70e:	20 e0       	ldi	r18, 0x00	; 0
     710:	2a cf       	rjmp	.-428    	; 0x566 <_ZN13LiquidCrystal5beginEhhh>

00000712 <lcd_clear>:
	 }

	 void lcd_clear(LiquidCrystal *lcd)
	 {
     712:	0b cf       	rjmp	.-490    	; 0x52a <_ZN13LiquidCrystal5clearEv>

00000714 <lcd_set_cursor>:
     714:	0f cf       	rjmp	.-482    	; 0x534 <_ZN13LiquidCrystal9setCursorEhh>

00000716 <lcd_print>:
     716:	50 c0       	rjmp	.+160    	; 0x7b8 <_ZN5Print5printEPKc>

00000718 <setup>:

controller rc_controller;

void setup() {
  // put your setup code here, to run once:
  controller_initialize(&rc_controller);
     718:	8d e6       	ldi	r24, 0x6D	; 109
     71a:	92 e0       	ldi	r25, 0x02	; 2
     71c:	a0 cd       	rjmp	.-1216   	; 0x25e <controller_initialize>

0000071e <loop>:
}

void loop() {
     71e:	08 95       	ret

00000720 <initVariant>:
     720:	08 95       	ret

00000722 <main>:
     722:	ca d2       	rcall	.+1428   	; 0xcb8 <init>
     724:	fd df       	rcall	.-6      	; 0x720 <initVariant>
     726:	f8 df       	rcall	.-16     	; 0x718 <setup>
     728:	c0 e0       	ldi	r28, 0x00	; 0
     72a:	d0 e0       	ldi	r29, 0x00	; 0
     72c:	f8 df       	rcall	.-16     	; 0x71e <loop>
     72e:	20 97       	sbiw	r28, 0x00	; 0
     730:	e9 f3       	breq	.-6      	; 0x72c <main+0xa>
     732:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     736:	fa cf       	rjmp	.-12     	; 0x72c <main+0xa>

00000738 <_Znwj>:
     738:	1f c4       	rjmp	.+2110   	; 0xf78 <malloc>

0000073a <_ZN5Print5writeEPKhj>:
     73a:	cf 92       	push	r12
     73c:	df 92       	push	r13
     73e:	ef 92       	push	r14
     740:	ff 92       	push	r15
     742:	0f 93       	push	r16
     744:	1f 93       	push	r17
     746:	cf 93       	push	r28
     748:	df 93       	push	r29
     74a:	6c 01       	movw	r12, r24
     74c:	7a 01       	movw	r14, r20
     74e:	8b 01       	movw	r16, r22
     750:	c0 e0       	ldi	r28, 0x00	; 0
     752:	d0 e0       	ldi	r29, 0x00	; 0
     754:	ce 15       	cp	r28, r14
     756:	df 05       	cpc	r29, r15
     758:	81 f0       	breq	.+32     	; 0x77a <_ZN5Print5writeEPKhj+0x40>
     75a:	d8 01       	movw	r26, r16
     75c:	6d 91       	ld	r22, X+
     75e:	8d 01       	movw	r16, r26
     760:	d6 01       	movw	r26, r12
     762:	ed 91       	ld	r30, X+
     764:	fc 91       	ld	r31, X
     766:	01 90       	ld	r0, Z+
     768:	f0 81       	ld	r31, Z
     76a:	e0 2d       	mov	r30, r0
     76c:	c6 01       	movw	r24, r12
     76e:	19 95       	eicall
     770:	89 2b       	or	r24, r25
     772:	11 f0       	breq	.+4      	; 0x778 <_ZN5Print5writeEPKhj+0x3e>
     774:	21 96       	adiw	r28, 0x01	; 1
     776:	ee cf       	rjmp	.-36     	; 0x754 <_ZN5Print5writeEPKhj+0x1a>
     778:	7e 01       	movw	r14, r28
     77a:	c7 01       	movw	r24, r14
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	1f 91       	pop	r17
     782:	0f 91       	pop	r16
     784:	ff 90       	pop	r15
     786:	ef 90       	pop	r14
     788:	df 90       	pop	r13
     78a:	cf 90       	pop	r12
     78c:	08 95       	ret

0000078e <_ZN5Print5writeEPKc>:
     78e:	61 15       	cp	r22, r1
     790:	71 05       	cpc	r23, r1
     792:	79 f0       	breq	.+30     	; 0x7b2 <_ZN5Print5writeEPKc+0x24>
     794:	fb 01       	movw	r30, r22
     796:	01 90       	ld	r0, Z+
     798:	00 20       	and	r0, r0
     79a:	e9 f7       	brne	.-6      	; 0x796 <_ZN5Print5writeEPKc+0x8>
     79c:	31 97       	sbiw	r30, 0x01	; 1
     79e:	af 01       	movw	r20, r30
     7a0:	46 1b       	sub	r20, r22
     7a2:	57 0b       	sbc	r21, r23
     7a4:	dc 01       	movw	r26, r24
     7a6:	ed 91       	ld	r30, X+
     7a8:	fc 91       	ld	r31, X
     7aa:	02 80       	ldd	r0, Z+2	; 0x02
     7ac:	f3 81       	ldd	r31, Z+3	; 0x03
     7ae:	e0 2d       	mov	r30, r0
     7b0:	19 94       	eijmp
     7b2:	80 e0       	ldi	r24, 0x00	; 0
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	08 95       	ret

000007b8 <_ZN5Print5printEPKc>:
     7b8:	ea cf       	rjmp	.-44     	; 0x78e <_ZN5Print5writeEPKc>

000007ba <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
     7ba:	08 95       	ret

000007bc <attachInterrupt>:
     7bc:	88 30       	cpi	r24, 0x08	; 8
     7be:	08 f0       	brcs	.+2      	; 0x7c2 <attachInterrupt+0x6>
     7c0:	6f c0       	rjmp	.+222    	; 0x8a0 <attachInterrupt+0xe4>
     7c2:	a8 2f       	mov	r26, r24
     7c4:	b0 e0       	ldi	r27, 0x00	; 0
     7c6:	aa 0f       	add	r26, r26
     7c8:	bb 1f       	adc	r27, r27
     7ca:	a4 5e       	subi	r26, 0xE4	; 228
     7cc:	bd 4f       	sbci	r27, 0xFD	; 253
     7ce:	11 96       	adiw	r26, 0x01	; 1
     7d0:	7c 93       	st	X, r23
     7d2:	6e 93       	st	-X, r22
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	fc 01       	movw	r30, r24
     7d8:	31 97       	sbiw	r30, 0x01	; 1
     7da:	e7 30       	cpi	r30, 0x07	; 7
     7dc:	f1 05       	cpc	r31, r1
     7de:	98 f5       	brcc	.+102    	; 0x846 <attachInterrupt+0x8a>
     7e0:	88 27       	eor	r24, r24
     7e2:	ee 58       	subi	r30, 0x8E	; 142
     7e4:	ff 4f       	sbci	r31, 0xFF	; 255
     7e6:	8f 4f       	sbci	r24, 0xFF	; 255
     7e8:	bf c3       	rjmp	.+1918   	; 0xf68 <__tablejump2__>
     7ea:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
     7ee:	8c 7f       	andi	r24, 0xFC	; 252
     7f0:	48 2b       	or	r20, r24
     7f2:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
     7f6:	e8 9a       	sbi	0x1d, 0	; 29
     7f8:	08 95       	ret
     7fa:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
     7fe:	83 7f       	andi	r24, 0xF3	; 243
     800:	44 0f       	add	r20, r20
     802:	55 1f       	adc	r21, r21
     804:	44 0f       	add	r20, r20
     806:	55 1f       	adc	r21, r21
     808:	48 2b       	or	r20, r24
     80a:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
     80e:	e9 9a       	sbi	0x1d, 1	; 29
     810:	08 95       	ret
     812:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
     816:	8f 7c       	andi	r24, 0xCF	; 207
     818:	74 e0       	ldi	r23, 0x04	; 4
     81a:	44 0f       	add	r20, r20
     81c:	55 1f       	adc	r21, r21
     81e:	7a 95       	dec	r23
     820:	e1 f7       	brne	.-8      	; 0x81a <attachInterrupt+0x5e>
     822:	48 2b       	or	r20, r24
     824:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
     828:	ea 9a       	sbi	0x1d, 2	; 29
     82a:	08 95       	ret
     82c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
     830:	8f 73       	andi	r24, 0x3F	; 63
     832:	66 e0       	ldi	r22, 0x06	; 6
     834:	44 0f       	add	r20, r20
     836:	55 1f       	adc	r21, r21
     838:	6a 95       	dec	r22
     83a:	e1 f7       	brne	.-8      	; 0x834 <attachInterrupt+0x78>
     83c:	48 2b       	or	r20, r24
     83e:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
     842:	eb 9a       	sbi	0x1d, 3	; 29
     844:	08 95       	ret
     846:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     84a:	8c 7f       	andi	r24, 0xFC	; 252
     84c:	48 2b       	or	r20, r24
     84e:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     852:	ec 9a       	sbi	0x1d, 4	; 29
     854:	08 95       	ret
     856:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     85a:	83 7f       	andi	r24, 0xF3	; 243
     85c:	44 0f       	add	r20, r20
     85e:	55 1f       	adc	r21, r21
     860:	44 0f       	add	r20, r20
     862:	55 1f       	adc	r21, r21
     864:	48 2b       	or	r20, r24
     866:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     86a:	ed 9a       	sbi	0x1d, 5	; 29
     86c:	08 95       	ret
     86e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     872:	8f 7c       	andi	r24, 0xCF	; 207
     874:	24 e0       	ldi	r18, 0x04	; 4
     876:	44 0f       	add	r20, r20
     878:	55 1f       	adc	r21, r21
     87a:	2a 95       	dec	r18
     87c:	e1 f7       	brne	.-8      	; 0x876 <attachInterrupt+0xba>
     87e:	48 2b       	or	r20, r24
     880:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     884:	ee 9a       	sbi	0x1d, 6	; 29
     886:	08 95       	ret
     888:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     88c:	8f 73       	andi	r24, 0x3F	; 63
     88e:	96 e0       	ldi	r25, 0x06	; 6
     890:	44 0f       	add	r20, r20
     892:	55 1f       	adc	r21, r21
     894:	9a 95       	dec	r25
     896:	e1 f7       	brne	.-8      	; 0x890 <attachInterrupt+0xd4>
     898:	48 2b       	or	r20, r24
     89a:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     89e:	ef 9a       	sbi	0x1d, 7	; 29
     8a0:	08 95       	ret

000008a2 <__vector_1>:
IMPLEMENT_ISR(INT3_vect, EXTERNAL_INT_3)
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_4)

#elif defined(EICRA) && defined(EICRB)

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_2)
     8a2:	1f 92       	push	r1
     8a4:	0f 92       	push	r0
     8a6:	0f b6       	in	r0, 0x3f	; 63
     8a8:	0f 92       	push	r0
     8aa:	11 24       	eor	r1, r1
     8ac:	0b b6       	in	r0, 0x3b	; 59
     8ae:	0f 92       	push	r0
     8b0:	2f 93       	push	r18
     8b2:	3f 93       	push	r19
     8b4:	4f 93       	push	r20
     8b6:	5f 93       	push	r21
     8b8:	6f 93       	push	r22
     8ba:	7f 93       	push	r23
     8bc:	8f 93       	push	r24
     8be:	9f 93       	push	r25
     8c0:	af 93       	push	r26
     8c2:	bf 93       	push	r27
     8c4:	ef 93       	push	r30
     8c6:	ff 93       	push	r31
     8c8:	e0 91 20 02 	lds	r30, 0x0220	; 0x800220 <intFunc+0x4>
     8cc:	f0 91 21 02 	lds	r31, 0x0221	; 0x800221 <intFunc+0x5>
     8d0:	19 95       	eicall
     8d2:	ff 91       	pop	r31
     8d4:	ef 91       	pop	r30
     8d6:	bf 91       	pop	r27
     8d8:	af 91       	pop	r26
     8da:	9f 91       	pop	r25
     8dc:	8f 91       	pop	r24
     8de:	7f 91       	pop	r23
     8e0:	6f 91       	pop	r22
     8e2:	5f 91       	pop	r21
     8e4:	4f 91       	pop	r20
     8e6:	3f 91       	pop	r19
     8e8:	2f 91       	pop	r18
     8ea:	0f 90       	pop	r0
     8ec:	0b be       	out	0x3b, r0	; 59
     8ee:	0f 90       	pop	r0
     8f0:	0f be       	out	0x3f, r0	; 63
     8f2:	0f 90       	pop	r0
     8f4:	1f 90       	pop	r1
     8f6:	18 95       	reti

000008f8 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_3)
     8f8:	1f 92       	push	r1
     8fa:	0f 92       	push	r0
     8fc:	0f b6       	in	r0, 0x3f	; 63
     8fe:	0f 92       	push	r0
     900:	11 24       	eor	r1, r1
     902:	0b b6       	in	r0, 0x3b	; 59
     904:	0f 92       	push	r0
     906:	2f 93       	push	r18
     908:	3f 93       	push	r19
     90a:	4f 93       	push	r20
     90c:	5f 93       	push	r21
     90e:	6f 93       	push	r22
     910:	7f 93       	push	r23
     912:	8f 93       	push	r24
     914:	9f 93       	push	r25
     916:	af 93       	push	r26
     918:	bf 93       	push	r27
     91a:	ef 93       	push	r30
     91c:	ff 93       	push	r31
     91e:	e0 91 22 02 	lds	r30, 0x0222	; 0x800222 <intFunc+0x6>
     922:	f0 91 23 02 	lds	r31, 0x0223	; 0x800223 <intFunc+0x7>
     926:	19 95       	eicall
     928:	ff 91       	pop	r31
     92a:	ef 91       	pop	r30
     92c:	bf 91       	pop	r27
     92e:	af 91       	pop	r26
     930:	9f 91       	pop	r25
     932:	8f 91       	pop	r24
     934:	7f 91       	pop	r23
     936:	6f 91       	pop	r22
     938:	5f 91       	pop	r21
     93a:	4f 91       	pop	r20
     93c:	3f 91       	pop	r19
     93e:	2f 91       	pop	r18
     940:	0f 90       	pop	r0
     942:	0b be       	out	0x3b, r0	; 59
     944:	0f 90       	pop	r0
     946:	0f be       	out	0x3f, r0	; 63
     948:	0f 90       	pop	r0
     94a:	1f 90       	pop	r1
     94c:	18 95       	reti

0000094e <__vector_3>:
IMPLEMENT_ISR(INT2_vect, EXTERNAL_INT_4)
     94e:	1f 92       	push	r1
     950:	0f 92       	push	r0
     952:	0f b6       	in	r0, 0x3f	; 63
     954:	0f 92       	push	r0
     956:	11 24       	eor	r1, r1
     958:	0b b6       	in	r0, 0x3b	; 59
     95a:	0f 92       	push	r0
     95c:	2f 93       	push	r18
     95e:	3f 93       	push	r19
     960:	4f 93       	push	r20
     962:	5f 93       	push	r21
     964:	6f 93       	push	r22
     966:	7f 93       	push	r23
     968:	8f 93       	push	r24
     96a:	9f 93       	push	r25
     96c:	af 93       	push	r26
     96e:	bf 93       	push	r27
     970:	ef 93       	push	r30
     972:	ff 93       	push	r31
     974:	e0 91 24 02 	lds	r30, 0x0224	; 0x800224 <intFunc+0x8>
     978:	f0 91 25 02 	lds	r31, 0x0225	; 0x800225 <intFunc+0x9>
     97c:	19 95       	eicall
     97e:	ff 91       	pop	r31
     980:	ef 91       	pop	r30
     982:	bf 91       	pop	r27
     984:	af 91       	pop	r26
     986:	9f 91       	pop	r25
     988:	8f 91       	pop	r24
     98a:	7f 91       	pop	r23
     98c:	6f 91       	pop	r22
     98e:	5f 91       	pop	r21
     990:	4f 91       	pop	r20
     992:	3f 91       	pop	r19
     994:	2f 91       	pop	r18
     996:	0f 90       	pop	r0
     998:	0b be       	out	0x3b, r0	; 59
     99a:	0f 90       	pop	r0
     99c:	0f be       	out	0x3f, r0	; 63
     99e:	0f 90       	pop	r0
     9a0:	1f 90       	pop	r1
     9a2:	18 95       	reti

000009a4 <__vector_4>:
IMPLEMENT_ISR(INT3_vect, EXTERNAL_INT_5)
     9a4:	1f 92       	push	r1
     9a6:	0f 92       	push	r0
     9a8:	0f b6       	in	r0, 0x3f	; 63
     9aa:	0f 92       	push	r0
     9ac:	11 24       	eor	r1, r1
     9ae:	0b b6       	in	r0, 0x3b	; 59
     9b0:	0f 92       	push	r0
     9b2:	2f 93       	push	r18
     9b4:	3f 93       	push	r19
     9b6:	4f 93       	push	r20
     9b8:	5f 93       	push	r21
     9ba:	6f 93       	push	r22
     9bc:	7f 93       	push	r23
     9be:	8f 93       	push	r24
     9c0:	9f 93       	push	r25
     9c2:	af 93       	push	r26
     9c4:	bf 93       	push	r27
     9c6:	ef 93       	push	r30
     9c8:	ff 93       	push	r31
     9ca:	e0 91 26 02 	lds	r30, 0x0226	; 0x800226 <intFunc+0xa>
     9ce:	f0 91 27 02 	lds	r31, 0x0227	; 0x800227 <intFunc+0xb>
     9d2:	19 95       	eicall
     9d4:	ff 91       	pop	r31
     9d6:	ef 91       	pop	r30
     9d8:	bf 91       	pop	r27
     9da:	af 91       	pop	r26
     9dc:	9f 91       	pop	r25
     9de:	8f 91       	pop	r24
     9e0:	7f 91       	pop	r23
     9e2:	6f 91       	pop	r22
     9e4:	5f 91       	pop	r21
     9e6:	4f 91       	pop	r20
     9e8:	3f 91       	pop	r19
     9ea:	2f 91       	pop	r18
     9ec:	0f 90       	pop	r0
     9ee:	0b be       	out	0x3b, r0	; 59
     9f0:	0f 90       	pop	r0
     9f2:	0f be       	out	0x3f, r0	; 63
     9f4:	0f 90       	pop	r0
     9f6:	1f 90       	pop	r1
     9f8:	18 95       	reti

000009fa <__vector_5>:
IMPLEMENT_ISR(INT4_vect, EXTERNAL_INT_0)
     9fa:	1f 92       	push	r1
     9fc:	0f 92       	push	r0
     9fe:	0f b6       	in	r0, 0x3f	; 63
     a00:	0f 92       	push	r0
     a02:	11 24       	eor	r1, r1
     a04:	0b b6       	in	r0, 0x3b	; 59
     a06:	0f 92       	push	r0
     a08:	2f 93       	push	r18
     a0a:	3f 93       	push	r19
     a0c:	4f 93       	push	r20
     a0e:	5f 93       	push	r21
     a10:	6f 93       	push	r22
     a12:	7f 93       	push	r23
     a14:	8f 93       	push	r24
     a16:	9f 93       	push	r25
     a18:	af 93       	push	r26
     a1a:	bf 93       	push	r27
     a1c:	ef 93       	push	r30
     a1e:	ff 93       	push	r31
     a20:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <intFunc>
     a24:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <intFunc+0x1>
     a28:	19 95       	eicall
     a2a:	ff 91       	pop	r31
     a2c:	ef 91       	pop	r30
     a2e:	bf 91       	pop	r27
     a30:	af 91       	pop	r26
     a32:	9f 91       	pop	r25
     a34:	8f 91       	pop	r24
     a36:	7f 91       	pop	r23
     a38:	6f 91       	pop	r22
     a3a:	5f 91       	pop	r21
     a3c:	4f 91       	pop	r20
     a3e:	3f 91       	pop	r19
     a40:	2f 91       	pop	r18
     a42:	0f 90       	pop	r0
     a44:	0b be       	out	0x3b, r0	; 59
     a46:	0f 90       	pop	r0
     a48:	0f be       	out	0x3f, r0	; 63
     a4a:	0f 90       	pop	r0
     a4c:	1f 90       	pop	r1
     a4e:	18 95       	reti

00000a50 <__vector_6>:
IMPLEMENT_ISR(INT5_vect, EXTERNAL_INT_1)
     a50:	1f 92       	push	r1
     a52:	0f 92       	push	r0
     a54:	0f b6       	in	r0, 0x3f	; 63
     a56:	0f 92       	push	r0
     a58:	11 24       	eor	r1, r1
     a5a:	0b b6       	in	r0, 0x3b	; 59
     a5c:	0f 92       	push	r0
     a5e:	2f 93       	push	r18
     a60:	3f 93       	push	r19
     a62:	4f 93       	push	r20
     a64:	5f 93       	push	r21
     a66:	6f 93       	push	r22
     a68:	7f 93       	push	r23
     a6a:	8f 93       	push	r24
     a6c:	9f 93       	push	r25
     a6e:	af 93       	push	r26
     a70:	bf 93       	push	r27
     a72:	ef 93       	push	r30
     a74:	ff 93       	push	r31
     a76:	e0 91 1e 02 	lds	r30, 0x021E	; 0x80021e <intFunc+0x2>
     a7a:	f0 91 1f 02 	lds	r31, 0x021F	; 0x80021f <intFunc+0x3>
     a7e:	19 95       	eicall
     a80:	ff 91       	pop	r31
     a82:	ef 91       	pop	r30
     a84:	bf 91       	pop	r27
     a86:	af 91       	pop	r26
     a88:	9f 91       	pop	r25
     a8a:	8f 91       	pop	r24
     a8c:	7f 91       	pop	r23
     a8e:	6f 91       	pop	r22
     a90:	5f 91       	pop	r21
     a92:	4f 91       	pop	r20
     a94:	3f 91       	pop	r19
     a96:	2f 91       	pop	r18
     a98:	0f 90       	pop	r0
     a9a:	0b be       	out	0x3b, r0	; 59
     a9c:	0f 90       	pop	r0
     a9e:	0f be       	out	0x3f, r0	; 63
     aa0:	0f 90       	pop	r0
     aa2:	1f 90       	pop	r1
     aa4:	18 95       	reti

00000aa6 <__vector_7>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
     aa6:	1f 92       	push	r1
     aa8:	0f 92       	push	r0
     aaa:	0f b6       	in	r0, 0x3f	; 63
     aac:	0f 92       	push	r0
     aae:	11 24       	eor	r1, r1
     ab0:	0b b6       	in	r0, 0x3b	; 59
     ab2:	0f 92       	push	r0
     ab4:	2f 93       	push	r18
     ab6:	3f 93       	push	r19
     ab8:	4f 93       	push	r20
     aba:	5f 93       	push	r21
     abc:	6f 93       	push	r22
     abe:	7f 93       	push	r23
     ac0:	8f 93       	push	r24
     ac2:	9f 93       	push	r25
     ac4:	af 93       	push	r26
     ac6:	bf 93       	push	r27
     ac8:	ef 93       	push	r30
     aca:	ff 93       	push	r31
     acc:	e0 91 28 02 	lds	r30, 0x0228	; 0x800228 <intFunc+0xc>
     ad0:	f0 91 29 02 	lds	r31, 0x0229	; 0x800229 <intFunc+0xd>
     ad4:	19 95       	eicall
     ad6:	ff 91       	pop	r31
     ad8:	ef 91       	pop	r30
     ada:	bf 91       	pop	r27
     adc:	af 91       	pop	r26
     ade:	9f 91       	pop	r25
     ae0:	8f 91       	pop	r24
     ae2:	7f 91       	pop	r23
     ae4:	6f 91       	pop	r22
     ae6:	5f 91       	pop	r21
     ae8:	4f 91       	pop	r20
     aea:	3f 91       	pop	r19
     aec:	2f 91       	pop	r18
     aee:	0f 90       	pop	r0
     af0:	0b be       	out	0x3b, r0	; 59
     af2:	0f 90       	pop	r0
     af4:	0f be       	out	0x3f, r0	; 63
     af6:	0f 90       	pop	r0
     af8:	1f 90       	pop	r1
     afa:	18 95       	reti

00000afc <__vector_8>:
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)
     afc:	1f 92       	push	r1
     afe:	0f 92       	push	r0
     b00:	0f b6       	in	r0, 0x3f	; 63
     b02:	0f 92       	push	r0
     b04:	11 24       	eor	r1, r1
     b06:	0b b6       	in	r0, 0x3b	; 59
     b08:	0f 92       	push	r0
     b0a:	2f 93       	push	r18
     b0c:	3f 93       	push	r19
     b0e:	4f 93       	push	r20
     b10:	5f 93       	push	r21
     b12:	6f 93       	push	r22
     b14:	7f 93       	push	r23
     b16:	8f 93       	push	r24
     b18:	9f 93       	push	r25
     b1a:	af 93       	push	r26
     b1c:	bf 93       	push	r27
     b1e:	ef 93       	push	r30
     b20:	ff 93       	push	r31
     b22:	e0 91 2a 02 	lds	r30, 0x022A	; 0x80022a <intFunc+0xe>
     b26:	f0 91 2b 02 	lds	r31, 0x022B	; 0x80022b <intFunc+0xf>
     b2a:	19 95       	eicall
     b2c:	ff 91       	pop	r31
     b2e:	ef 91       	pop	r30
     b30:	bf 91       	pop	r27
     b32:	af 91       	pop	r26
     b34:	9f 91       	pop	r25
     b36:	8f 91       	pop	r24
     b38:	7f 91       	pop	r23
     b3a:	6f 91       	pop	r22
     b3c:	5f 91       	pop	r21
     b3e:	4f 91       	pop	r20
     b40:	3f 91       	pop	r19
     b42:	2f 91       	pop	r18
     b44:	0f 90       	pop	r0
     b46:	0b be       	out	0x3b, r0	; 59
     b48:	0f 90       	pop	r0
     b4a:	0f be       	out	0x3f, r0	; 63
     b4c:	0f 90       	pop	r0
     b4e:	1f 90       	pop	r1
     b50:	18 95       	reti

00000b52 <__vector_23>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
     b52:	1f 92       	push	r1
     b54:	0f 92       	push	r0
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	0f 92       	push	r0
     b5a:	11 24       	eor	r1, r1
     b5c:	2f 93       	push	r18
     b5e:	3f 93       	push	r19
     b60:	8f 93       	push	r24
     b62:	9f 93       	push	r25
     b64:	af 93       	push	r26
     b66:	bf 93       	push	r27
     b68:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <timer0_millis>
     b6c:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <timer0_millis+0x1>
     b70:	a0 91 67 02 	lds	r26, 0x0267	; 0x800267 <timer0_millis+0x2>
     b74:	b0 91 68 02 	lds	r27, 0x0268	; 0x800268 <timer0_millis+0x3>
     b78:	30 91 64 02 	lds	r19, 0x0264	; 0x800264 <__data_end>
     b7c:	23 e0       	ldi	r18, 0x03	; 3
     b7e:	23 0f       	add	r18, r19
     b80:	2d 37       	cpi	r18, 0x7D	; 125
     b82:	20 f4       	brcc	.+8      	; 0xb8c <__vector_23+0x3a>
     b84:	01 96       	adiw	r24, 0x01	; 1
     b86:	a1 1d       	adc	r26, r1
     b88:	b1 1d       	adc	r27, r1
     b8a:	05 c0       	rjmp	.+10     	; 0xb96 <__vector_23+0x44>
     b8c:	26 e8       	ldi	r18, 0x86	; 134
     b8e:	23 0f       	add	r18, r19
     b90:	02 96       	adiw	r24, 0x02	; 2
     b92:	a1 1d       	adc	r26, r1
     b94:	b1 1d       	adc	r27, r1
     b96:	20 93 64 02 	sts	0x0264, r18	; 0x800264 <__data_end>
     b9a:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <timer0_millis>
     b9e:	90 93 66 02 	sts	0x0266, r25	; 0x800266 <timer0_millis+0x1>
     ba2:	a0 93 67 02 	sts	0x0267, r26	; 0x800267 <timer0_millis+0x2>
     ba6:	b0 93 68 02 	sts	0x0268, r27	; 0x800268 <timer0_millis+0x3>
     baa:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <timer0_overflow_count>
     bae:	90 91 6a 02 	lds	r25, 0x026A	; 0x80026a <timer0_overflow_count+0x1>
     bb2:	a0 91 6b 02 	lds	r26, 0x026B	; 0x80026b <timer0_overflow_count+0x2>
     bb6:	b0 91 6c 02 	lds	r27, 0x026C	; 0x80026c <timer0_overflow_count+0x3>
     bba:	01 96       	adiw	r24, 0x01	; 1
     bbc:	a1 1d       	adc	r26, r1
     bbe:	b1 1d       	adc	r27, r1
     bc0:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <timer0_overflow_count>
     bc4:	90 93 6a 02 	sts	0x026A, r25	; 0x80026a <timer0_overflow_count+0x1>
     bc8:	a0 93 6b 02 	sts	0x026B, r26	; 0x80026b <timer0_overflow_count+0x2>
     bcc:	b0 93 6c 02 	sts	0x026C, r27	; 0x80026c <timer0_overflow_count+0x3>
     bd0:	bf 91       	pop	r27
     bd2:	af 91       	pop	r26
     bd4:	9f 91       	pop	r25
     bd6:	8f 91       	pop	r24
     bd8:	3f 91       	pop	r19
     bda:	2f 91       	pop	r18
     bdc:	0f 90       	pop	r0
     bde:	0f be       	out	0x3f, r0	; 63
     be0:	0f 90       	pop	r0
     be2:	1f 90       	pop	r1
     be4:	18 95       	reti

00000be6 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     be6:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     be8:	f8 94       	cli
	m = timer0_overflow_count;
     bea:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <timer0_overflow_count>
     bee:	90 91 6a 02 	lds	r25, 0x026A	; 0x80026a <timer0_overflow_count+0x1>
     bf2:	a0 91 6b 02 	lds	r26, 0x026B	; 0x80026b <timer0_overflow_count+0x2>
     bf6:	b0 91 6c 02 	lds	r27, 0x026C	; 0x80026c <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
     bfa:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     bfc:	a8 9b       	sbis	0x15, 0	; 21
     bfe:	05 c0       	rjmp	.+10     	; 0xc0a <micros+0x24>
     c00:	2f 3f       	cpi	r18, 0xFF	; 255
     c02:	19 f0       	breq	.+6      	; 0xc0a <micros+0x24>
		m++;
     c04:	01 96       	adiw	r24, 0x01	; 1
     c06:	a1 1d       	adc	r26, r1
     c08:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     c0a:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     c0c:	ba 2f       	mov	r27, r26
     c0e:	a9 2f       	mov	r26, r25
     c10:	98 2f       	mov	r25, r24
     c12:	88 27       	eor	r24, r24
     c14:	82 0f       	add	r24, r18
     c16:	91 1d       	adc	r25, r1
     c18:	a1 1d       	adc	r26, r1
     c1a:	b1 1d       	adc	r27, r1
     c1c:	bc 01       	movw	r22, r24
     c1e:	cd 01       	movw	r24, r26
     c20:	42 e0       	ldi	r20, 0x02	; 2
     c22:	66 0f       	add	r22, r22
     c24:	77 1f       	adc	r23, r23
     c26:	88 1f       	adc	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	4a 95       	dec	r20
     c2c:	d1 f7       	brne	.-12     	; 0xc22 <micros+0x3c>
}
     c2e:	08 95       	ret

00000c30 <delay>:

void delay(unsigned long ms)
{
     c30:	8f 92       	push	r8
     c32:	9f 92       	push	r9
     c34:	af 92       	push	r10
     c36:	bf 92       	push	r11
     c38:	cf 92       	push	r12
     c3a:	df 92       	push	r13
     c3c:	ef 92       	push	r14
     c3e:	ff 92       	push	r15
     c40:	6b 01       	movw	r12, r22
	uint32_t start = micros();
     c42:	7c 01       	movw	r14, r24
     c44:	d0 df       	rcall	.-96     	; 0xbe6 <micros>
     c46:	4b 01       	movw	r8, r22

	while (ms > 0) {
     c48:	5c 01       	movw	r10, r24
     c4a:	c1 14       	cp	r12, r1
     c4c:	d1 04       	cpc	r13, r1
		yield();
     c4e:	e1 04       	cpc	r14, r1
		while ( ms > 0 && (micros() - start) >= 1000) {
     c50:	f1 04       	cpc	r15, r1
     c52:	f1 f0       	breq	.+60     	; 0xc90 <delay+0x60>
     c54:	88 d1       	rcall	.+784    	; 0xf66 <yield>
     c56:	c7 df       	rcall	.-114    	; 0xbe6 <micros>
     c58:	dc 01       	movw	r26, r24
     c5a:	cb 01       	movw	r24, r22
     c5c:	88 19       	sub	r24, r8
     c5e:	99 09       	sbc	r25, r9
     c60:	aa 09       	sbc	r26, r10
     c62:	bb 09       	sbc	r27, r11
     c64:	88 3e       	cpi	r24, 0xE8	; 232
     c66:	93 40       	sbci	r25, 0x03	; 3
     c68:	a1 05       	cpc	r26, r1
			ms--;
     c6a:	b1 05       	cpc	r27, r1
     c6c:	70 f3       	brcs	.-36     	; 0xc4a <delay+0x1a>
     c6e:	21 e0       	ldi	r18, 0x01	; 1
     c70:	c2 1a       	sub	r12, r18
     c72:	d1 08       	sbc	r13, r1
			start += 1000;
     c74:	e1 08       	sbc	r14, r1
     c76:	f1 08       	sbc	r15, r1
     c78:	88 ee       	ldi	r24, 0xE8	; 232
     c7a:	88 0e       	add	r8, r24
     c7c:	83 e0       	ldi	r24, 0x03	; 3
     c7e:	98 1e       	adc	r9, r24
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
     c80:	a1 1c       	adc	r10, r1
     c82:	b1 1c       	adc	r11, r1
     c84:	c1 14       	cp	r12, r1
     c86:	d1 04       	cpc	r13, r1
     c88:	e1 04       	cpc	r14, r1
     c8a:	f1 04       	cpc	r15, r1
			ms--;
			start += 1000;
		}
	}
}
     c8c:	21 f7       	brne	.-56     	; 0xc56 <delay+0x26>
     c8e:	dd cf       	rjmp	.-70     	; 0xc4a <delay+0x1a>
     c90:	ff 90       	pop	r15
     c92:	ef 90       	pop	r14
     c94:	df 90       	pop	r13
     c96:	cf 90       	pop	r12
     c98:	bf 90       	pop	r11
     c9a:	af 90       	pop	r10
     c9c:	9f 90       	pop	r9
     c9e:	8f 90       	pop	r8
     ca0:	08 95       	ret

00000ca2 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
     ca2:	82 30       	cpi	r24, 0x02	; 2
     ca4:	91 05       	cpc	r25, r1
     ca6:	38 f0       	brcs	.+14     	; 0xcb6 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
     ca8:	88 0f       	add	r24, r24
     caa:	99 1f       	adc	r25, r25
     cac:	88 0f       	add	r24, r24
     cae:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
     cb0:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
     cb2:	01 97       	sbiw	r24, 0x01	; 1
     cb4:	f1 f7       	brne	.-4      	; 0xcb2 <delayMicroseconds+0x10>
     cb6:	08 95       	ret

00000cb8 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     cb8:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     cba:	84 b5       	in	r24, 0x24	; 36
     cbc:	82 60       	ori	r24, 0x02	; 2
     cbe:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     cc0:	84 b5       	in	r24, 0x24	; 36
     cc2:	81 60       	ori	r24, 0x01	; 1
     cc4:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     cc6:	85 b5       	in	r24, 0x25	; 37
     cc8:	82 60       	ori	r24, 0x02	; 2
     cca:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     ccc:	85 b5       	in	r24, 0x25	; 37
     cce:	81 60       	ori	r24, 0x01	; 1
     cd0:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     cd2:	ee e6       	ldi	r30, 0x6E	; 110
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	81 60       	ori	r24, 0x01	; 1
     cda:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     cdc:	e1 e8       	ldi	r30, 0x81	; 129
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     ce2:	80 81       	ld	r24, Z
     ce4:	82 60       	ori	r24, 0x02	; 2
     ce6:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     ce8:	80 81       	ld	r24, Z
     cea:	81 60       	ori	r24, 0x01	; 1
     cec:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     cee:	e0 e8       	ldi	r30, 0x80	; 128
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	81 60       	ori	r24, 0x01	; 1
     cf6:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     cf8:	e1 eb       	ldi	r30, 0xB1	; 177
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	84 60       	ori	r24, 0x04	; 4
     d00:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     d02:	e0 eb       	ldi	r30, 0xB0	; 176
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	81 60       	ori	r24, 0x01	; 1
     d0a:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
     d0c:	e1 e9       	ldi	r30, 0x91	; 145
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	82 60       	ori	r24, 0x02	; 2
     d14:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
     d16:	80 81       	ld	r24, Z
     d18:	81 60       	ori	r24, 0x01	; 1
     d1a:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
     d1c:	e0 e9       	ldi	r30, 0x90	; 144
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	80 81       	ld	r24, Z
     d22:	81 60       	ori	r24, 0x01	; 1
     d24:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
     d26:	e1 ea       	ldi	r30, 0xA1	; 161
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	82 60       	ori	r24, 0x02	; 2
     d2e:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
     d30:	80 81       	ld	r24, Z
     d32:	81 60       	ori	r24, 0x01	; 1
     d34:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
     d36:	e0 ea       	ldi	r30, 0xA0	; 160
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	81 60       	ori	r24, 0x01	; 1
     d3e:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
     d40:	e1 e2       	ldi	r30, 0x21	; 33
     d42:	f1 e0       	ldi	r31, 0x01	; 1
     d44:	80 81       	ld	r24, Z
     d46:	82 60       	ori	r24, 0x02	; 2
     d48:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
     d4a:	80 81       	ld	r24, Z
     d4c:	81 60       	ori	r24, 0x01	; 1
     d4e:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
     d50:	e0 e2       	ldi	r30, 0x20	; 32
     d52:	f1 e0       	ldi	r31, 0x01	; 1
     d54:	80 81       	ld	r24, Z
     d56:	81 60       	ori	r24, 0x01	; 1
     d58:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     d5a:	ea e7       	ldi	r30, 0x7A	; 122
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	84 60       	ori	r24, 0x04	; 4
     d62:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     d64:	80 81       	ld	r24, Z
     d66:	82 60       	ori	r24, 0x02	; 2
     d68:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     d6a:	80 81       	ld	r24, Z
     d6c:	81 60       	ori	r24, 0x01	; 1
     d6e:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     d70:	80 81       	ld	r24, Z
     d72:	80 68       	ori	r24, 0x80	; 128
     d74:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     d76:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
     d7a:	08 95       	ret

00000d7c <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	fc 01       	movw	r30, r24
     d80:	31 97       	sbiw	r30, 0x01	; 1
     d82:	e2 31       	cpi	r30, 0x12	; 18
     d84:	f1 05       	cpc	r31, r1
     d86:	08 f0       	brcs	.+2      	; 0xd8a <turnOffPWM+0xe>
     d88:	4d c0       	rjmp	.+154    	; 0xe24 <turnOffPWM+0xa8>
     d8a:	88 27       	eor	r24, r24
     d8c:	e7 58       	subi	r30, 0x87	; 135
     d8e:	ff 4f       	sbci	r31, 0xFF	; 255
     d90:	8f 4f       	sbci	r24, 0xFF	; 255
     d92:	ea c0       	rjmp	.+468    	; 0xf68 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     d94:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     d98:	8f 77       	andi	r24, 0x7F	; 127
     d9a:	03 c0       	rjmp	.+6      	; 0xda2 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     d9c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     da0:	8f 7d       	andi	r24, 0xDF	; 223
     da2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     da6:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
     da8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     dac:	87 7f       	andi	r24, 0xF7	; 247
     dae:	f9 cf       	rjmp	.-14     	; 0xda2 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     db0:	84 b5       	in	r24, 0x24	; 36
     db2:	8f 77       	andi	r24, 0x7F	; 127
     db4:	02 c0       	rjmp	.+4      	; 0xdba <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     db6:	84 b5       	in	r24, 0x24	; 36
     db8:	8f 7d       	andi	r24, 0xDF	; 223
     dba:	84 bd       	out	0x24, r24	; 36
     dbc:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     dbe:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
     dc2:	8f 77       	andi	r24, 0x7F	; 127
     dc4:	03 c0       	rjmp	.+6      	; 0xdcc <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     dc6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
     dca:	8f 7d       	andi	r24, 0xDF	; 223
     dcc:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
     dd0:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
     dd2:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
     dd6:	8f 77       	andi	r24, 0x7F	; 127
     dd8:	07 c0       	rjmp	.+14     	; 0xde8 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
     dda:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
     dde:	8f 7d       	andi	r24, 0xDF	; 223
     de0:	03 c0       	rjmp	.+6      	; 0xde8 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
     de2:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
     de6:	87 7f       	andi	r24, 0xF7	; 247
     de8:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
     dec:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
     dee:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     df2:	8f 77       	andi	r24, 0x7F	; 127
     df4:	07 c0       	rjmp	.+14     	; 0xe04 <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
     df6:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     dfa:	8f 7d       	andi	r24, 0xDF	; 223
     dfc:	03 c0       	rjmp	.+6      	; 0xe04 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
     dfe:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     e02:	87 7f       	andi	r24, 0xF7	; 247
     e04:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     e08:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
     e0a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
     e0e:	8f 77       	andi	r24, 0x7F	; 127
     e10:	07 c0       	rjmp	.+14     	; 0xe20 <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
     e12:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
     e16:	8f 7d       	andi	r24, 0xDF	; 223
     e18:	03 c0       	rjmp	.+6      	; 0xe20 <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
     e1a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
     e1e:	87 7f       	andi	r24, 0xF7	; 247
     e20:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
     e24:	08 95       	ret

00000e26 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     e26:	cf 93       	push	r28
     e28:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	fc 01       	movw	r30, r24
     e2e:	e4 5a       	subi	r30, 0xA4	; 164
     e30:	fe 4f       	sbci	r31, 0xFE	; 254
     e32:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     e34:	fc 01       	movw	r30, r24
     e36:	ee 55       	subi	r30, 0x5E	; 94
     e38:	fe 4f       	sbci	r31, 0xFE	; 254
     e3a:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     e3c:	88 23       	and	r24, r24
     e3e:	61 f1       	breq	.+88     	; 0xe98 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	88 0f       	add	r24, r24
     e44:	99 1f       	adc	r25, r25
     e46:	fc 01       	movw	r30, r24
     e48:	ee 5f       	subi	r30, 0xFE	; 254
     e4a:	fd 4f       	sbci	r31, 0xFD	; 253
     e4c:	c5 91       	lpm	r28, Z+
     e4e:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
     e50:	fc 01       	movw	r30, r24
     e52:	e8 51       	subi	r30, 0x18	; 24
     e54:	fe 4f       	sbci	r31, 0xFE	; 254
     e56:	a5 91       	lpm	r26, Z+
     e58:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
     e5a:	61 11       	cpse	r22, r1
     e5c:	09 c0       	rjmp	.+18     	; 0xe70 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
     e5e:	9f b7       	in	r25, 0x3f	; 63
                cli();
     e60:	f8 94       	cli
		*reg &= ~bit;
     e62:	88 81       	ld	r24, Y
     e64:	20 95       	com	r18
     e66:	82 23       	and	r24, r18
     e68:	88 83       	st	Y, r24
		*out &= ~bit;
     e6a:	ec 91       	ld	r30, X
     e6c:	2e 23       	and	r18, r30
     e6e:	0b c0       	rjmp	.+22     	; 0xe86 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     e70:	62 30       	cpi	r22, 0x02	; 2
     e72:	61 f4       	brne	.+24     	; 0xe8c <pinMode+0x66>
		uint8_t oldSREG = SREG;
     e74:	9f b7       	in	r25, 0x3f	; 63
                cli();
     e76:	f8 94       	cli
		*reg &= ~bit;
     e78:	88 81       	ld	r24, Y
     e7a:	32 2f       	mov	r19, r18
     e7c:	30 95       	com	r19
     e7e:	83 23       	and	r24, r19
     e80:	88 83       	st	Y, r24
		*out |= bit;
     e82:	ec 91       	ld	r30, X
     e84:	2e 2b       	or	r18, r30
     e86:	2c 93       	st	X, r18
		SREG = oldSREG;
     e88:	9f bf       	out	0x3f, r25	; 63
     e8a:	06 c0       	rjmp	.+12     	; 0xe98 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
     e8c:	8f b7       	in	r24, 0x3f	; 63
                cli();
     e8e:	f8 94       	cli
		*reg |= bit;
     e90:	e8 81       	ld	r30, Y
     e92:	2e 2b       	or	r18, r30
     e94:	28 83       	st	Y, r18
		SREG = oldSREG;
     e96:	8f bf       	out	0x3f, r24	; 63
	}
}
     e98:	df 91       	pop	r29
     e9a:	cf 91       	pop	r28
     e9c:	08 95       	ret

00000e9e <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     e9e:	1f 93       	push	r17
     ea0:	cf 93       	push	r28
     ea2:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     ea4:	28 2f       	mov	r18, r24
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	f9 01       	movw	r30, r18
     eaa:	ea 5e       	subi	r30, 0xEA	; 234
     eac:	fe 4f       	sbci	r31, 0xFE	; 254
     eae:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     eb0:	f9 01       	movw	r30, r18
     eb2:	e4 5a       	subi	r30, 0xA4	; 164
     eb4:	fe 4f       	sbci	r31, 0xFE	; 254
     eb6:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     eb8:	f9 01       	movw	r30, r18
     eba:	ee 55       	subi	r30, 0x5E	; 94
     ebc:	fe 4f       	sbci	r31, 0xFE	; 254
     ebe:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     ec0:	cc 23       	and	r28, r28
     ec2:	b9 f0       	breq	.+46     	; 0xef2 <digitalWrite+0x54>
     ec4:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     ec6:	81 11       	cpse	r24, r1

	out = portOutputRegister(port);
     ec8:	59 df       	rcall	.-334    	; 0xd7c <turnOffPWM>
     eca:	ec 2f       	mov	r30, r28
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	ee 0f       	add	r30, r30
     ed0:	ff 1f       	adc	r31, r31
     ed2:	e8 51       	subi	r30, 0x18	; 24
     ed4:	fe 4f       	sbci	r31, 0xFE	; 254
     ed6:	a5 91       	lpm	r26, Z+

	uint8_t oldSREG = SREG;
     ed8:	b4 91       	lpm	r27, Z
	cli();
     eda:	9f b7       	in	r25, 0x3f	; 63

	if (val == LOW) {
     edc:	f8 94       	cli
     ede:	11 11       	cpse	r17, r1
		*out &= ~bit;
     ee0:	04 c0       	rjmp	.+8      	; 0xeea <digitalWrite+0x4c>
     ee2:	8c 91       	ld	r24, X
     ee4:	d0 95       	com	r29
     ee6:	d8 23       	and	r29, r24
	} else {
		*out |= bit;
     ee8:	02 c0       	rjmp	.+4      	; 0xeee <digitalWrite+0x50>
     eea:	ec 91       	ld	r30, X
     eec:	de 2b       	or	r29, r30
	}

	SREG = oldSREG;
     eee:	dc 93       	st	X, r29
}
     ef0:	9f bf       	out	0x3f, r25	; 63
     ef2:	df 91       	pop	r29
     ef4:	cf 91       	pop	r28
     ef6:	1f 91       	pop	r17
     ef8:	08 95       	ret

00000efa <shiftOut>:
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
     efa:	bf 92       	push	r11
     efc:	cf 92       	push	r12
     efe:	df 92       	push	r13
     f00:	ef 92       	push	r14
     f02:	ff 92       	push	r15
     f04:	0f 93       	push	r16
     f06:	1f 93       	push	r17
     f08:	cf 93       	push	r28
     f0a:	df 93       	push	r29
     f0c:	c8 2e       	mov	r12, r24
     f0e:	d6 2e       	mov	r13, r22
     f10:	b4 2e       	mov	r11, r20
     f12:	c7 e0       	ldi	r28, 0x07	; 7
     f14:	d0 e0       	ldi	r29, 0x00	; 0
     f16:	02 2f       	mov	r16, r18
     f18:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
			digitalWrite(dataPin, !!(val & (1 << i)));
     f1a:	87 e0       	ldi	r24, 0x07	; 7
     f1c:	e8 2e       	mov	r14, r24
     f1e:	f1 2c       	mov	r15, r1
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
     f20:	b1 10       	cpse	r11, r1
     f22:	05 c0       	rjmp	.+10     	; 0xf2e <shiftOut+0x34>
			digitalWrite(dataPin, !!(val & (1 << i)));
     f24:	c7 01       	movw	r24, r14
     f26:	8c 1b       	sub	r24, r28
     f28:	9d 0b       	sbc	r25, r29
     f2a:	b8 01       	movw	r22, r16
     f2c:	02 c0       	rjmp	.+4      	; 0xf32 <shiftOut+0x38>
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
     f2e:	b8 01       	movw	r22, r16
     f30:	8c 2f       	mov	r24, r28
     f32:	02 c0       	rjmp	.+4      	; 0xf38 <shiftOut+0x3e>
     f34:	75 95       	asr	r23
     f36:	67 95       	ror	r22
     f38:	8a 95       	dec	r24
     f3a:	e2 f7       	brpl	.-8      	; 0xf34 <shiftOut+0x3a>
     f3c:	61 70       	andi	r22, 0x01	; 1
     f3e:	8c 2d       	mov	r24, r12
     f40:	ae df       	rcall	.-164    	; 0xe9e <digitalWrite>
			
		digitalWrite(clockPin, HIGH);
     f42:	61 e0       	ldi	r22, 0x01	; 1
     f44:	8d 2d       	mov	r24, r13
		digitalWrite(clockPin, LOW);		
     f46:	ab df       	rcall	.-170    	; 0xe9e <digitalWrite>
     f48:	60 e0       	ldi	r22, 0x00	; 0
     f4a:	8d 2d       	mov	r24, r13
     f4c:	a8 df       	rcall	.-176    	; 0xe9e <digitalWrite>
     f4e:	21 97       	sbiw	r28, 0x01	; 1
	}
}
     f50:	38 f7       	brcc	.-50     	; 0xf20 <shiftOut+0x26>
     f52:	df 91       	pop	r29
     f54:	cf 91       	pop	r28
     f56:	1f 91       	pop	r17
     f58:	0f 91       	pop	r16
     f5a:	ff 90       	pop	r15
     f5c:	ef 90       	pop	r14
     f5e:	df 90       	pop	r13
     f60:	cf 90       	pop	r12
     f62:	bf 90       	pop	r11
     f64:	08 95       	ret

00000f66 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
     f66:	08 95       	ret

00000f68 <__tablejump2__>:
     f68:	ee 0f       	add	r30, r30
     f6a:	ff 1f       	adc	r31, r31
     f6c:	88 1f       	adc	r24, r24
     f6e:	8b bf       	out	0x3b, r24	; 59
     f70:	07 90       	elpm	r0, Z+
     f72:	f6 91       	elpm	r31, Z
     f74:	e0 2d       	mov	r30, r0
     f76:	19 94       	eijmp

00000f78 <malloc>:
     f78:	0f 93       	push	r16
     f7a:	1f 93       	push	r17
     f7c:	cf 93       	push	r28
     f7e:	df 93       	push	r29
     f80:	82 30       	cpi	r24, 0x02	; 2
     f82:	91 05       	cpc	r25, r1
     f84:	10 f4       	brcc	.+4      	; 0xf8a <malloc+0x12>
     f86:	82 e0       	ldi	r24, 0x02	; 2
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	e0 91 75 02 	lds	r30, 0x0275	; 0x800275 <__flp>
     f8e:	f0 91 76 02 	lds	r31, 0x0276	; 0x800276 <__flp+0x1>
     f92:	20 e0       	ldi	r18, 0x00	; 0
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	a0 e0       	ldi	r26, 0x00	; 0
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	30 97       	sbiw	r30, 0x00	; 0
     f9c:	19 f1       	breq	.+70     	; 0xfe4 <malloc+0x6c>
     f9e:	40 81       	ld	r20, Z
     fa0:	51 81       	ldd	r21, Z+1	; 0x01
     fa2:	02 81       	ldd	r16, Z+2	; 0x02
     fa4:	13 81       	ldd	r17, Z+3	; 0x03
     fa6:	48 17       	cp	r20, r24
     fa8:	59 07       	cpc	r21, r25
     faa:	c8 f0       	brcs	.+50     	; 0xfde <malloc+0x66>
     fac:	84 17       	cp	r24, r20
     fae:	95 07       	cpc	r25, r21
     fb0:	69 f4       	brne	.+26     	; 0xfcc <malloc+0x54>
     fb2:	10 97       	sbiw	r26, 0x00	; 0
     fb4:	31 f0       	breq	.+12     	; 0xfc2 <malloc+0x4a>
     fb6:	12 96       	adiw	r26, 0x02	; 2
     fb8:	0c 93       	st	X, r16
     fba:	12 97       	sbiw	r26, 0x02	; 2
     fbc:	13 96       	adiw	r26, 0x03	; 3
     fbe:	1c 93       	st	X, r17
     fc0:	27 c0       	rjmp	.+78     	; 0x1010 <malloc+0x98>
     fc2:	00 93 75 02 	sts	0x0275, r16	; 0x800275 <__flp>
     fc6:	10 93 76 02 	sts	0x0276, r17	; 0x800276 <__flp+0x1>
     fca:	22 c0       	rjmp	.+68     	; 0x1010 <malloc+0x98>
     fcc:	21 15       	cp	r18, r1
     fce:	31 05       	cpc	r19, r1
     fd0:	19 f0       	breq	.+6      	; 0xfd8 <malloc+0x60>
     fd2:	42 17       	cp	r20, r18
     fd4:	53 07       	cpc	r21, r19
     fd6:	18 f4       	brcc	.+6      	; 0xfde <malloc+0x66>
     fd8:	9a 01       	movw	r18, r20
     fda:	bd 01       	movw	r22, r26
     fdc:	ef 01       	movw	r28, r30
     fde:	df 01       	movw	r26, r30
     fe0:	f8 01       	movw	r30, r16
     fe2:	db cf       	rjmp	.-74     	; 0xf9a <malloc+0x22>
     fe4:	21 15       	cp	r18, r1
     fe6:	31 05       	cpc	r19, r1
     fe8:	f9 f0       	breq	.+62     	; 0x1028 <malloc+0xb0>
     fea:	28 1b       	sub	r18, r24
     fec:	39 0b       	sbc	r19, r25
     fee:	24 30       	cpi	r18, 0x04	; 4
     ff0:	31 05       	cpc	r19, r1
     ff2:	80 f4       	brcc	.+32     	; 0x1014 <malloc+0x9c>
     ff4:	8a 81       	ldd	r24, Y+2	; 0x02
     ff6:	9b 81       	ldd	r25, Y+3	; 0x03
     ff8:	61 15       	cp	r22, r1
     ffa:	71 05       	cpc	r23, r1
     ffc:	21 f0       	breq	.+8      	; 0x1006 <malloc+0x8e>
     ffe:	fb 01       	movw	r30, r22
    1000:	93 83       	std	Z+3, r25	; 0x03
    1002:	82 83       	std	Z+2, r24	; 0x02
    1004:	04 c0       	rjmp	.+8      	; 0x100e <malloc+0x96>
    1006:	90 93 76 02 	sts	0x0276, r25	; 0x800276 <__flp+0x1>
    100a:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <__flp>
    100e:	fe 01       	movw	r30, r28
    1010:	32 96       	adiw	r30, 0x02	; 2
    1012:	44 c0       	rjmp	.+136    	; 0x109c <malloc+0x124>
    1014:	fe 01       	movw	r30, r28
    1016:	e2 0f       	add	r30, r18
    1018:	f3 1f       	adc	r31, r19
    101a:	81 93       	st	Z+, r24
    101c:	91 93       	st	Z+, r25
    101e:	22 50       	subi	r18, 0x02	; 2
    1020:	31 09       	sbc	r19, r1
    1022:	39 83       	std	Y+1, r19	; 0x01
    1024:	28 83       	st	Y, r18
    1026:	3a c0       	rjmp	.+116    	; 0x109c <malloc+0x124>
    1028:	20 91 73 02 	lds	r18, 0x0273	; 0x800273 <__brkval>
    102c:	30 91 74 02 	lds	r19, 0x0274	; 0x800274 <__brkval+0x1>
    1030:	23 2b       	or	r18, r19
    1032:	41 f4       	brne	.+16     	; 0x1044 <malloc+0xcc>
    1034:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    1038:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    103c:	30 93 74 02 	sts	0x0274, r19	; 0x800274 <__brkval+0x1>
    1040:	20 93 73 02 	sts	0x0273, r18	; 0x800273 <__brkval>
    1044:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    1048:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    104c:	21 15       	cp	r18, r1
    104e:	31 05       	cpc	r19, r1
    1050:	41 f4       	brne	.+16     	; 0x1062 <malloc+0xea>
    1052:	2d b7       	in	r18, 0x3d	; 61
    1054:	3e b7       	in	r19, 0x3e	; 62
    1056:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    105a:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    105e:	24 1b       	sub	r18, r20
    1060:	35 0b       	sbc	r19, r21
    1062:	e0 91 73 02 	lds	r30, 0x0273	; 0x800273 <__brkval>
    1066:	f0 91 74 02 	lds	r31, 0x0274	; 0x800274 <__brkval+0x1>
    106a:	e2 17       	cp	r30, r18
    106c:	f3 07       	cpc	r31, r19
    106e:	a0 f4       	brcc	.+40     	; 0x1098 <malloc+0x120>
    1070:	2e 1b       	sub	r18, r30
    1072:	3f 0b       	sbc	r19, r31
    1074:	28 17       	cp	r18, r24
    1076:	39 07       	cpc	r19, r25
    1078:	78 f0       	brcs	.+30     	; 0x1098 <malloc+0x120>
    107a:	ac 01       	movw	r20, r24
    107c:	4e 5f       	subi	r20, 0xFE	; 254
    107e:	5f 4f       	sbci	r21, 0xFF	; 255
    1080:	24 17       	cp	r18, r20
    1082:	35 07       	cpc	r19, r21
    1084:	48 f0       	brcs	.+18     	; 0x1098 <malloc+0x120>
    1086:	4e 0f       	add	r20, r30
    1088:	5f 1f       	adc	r21, r31
    108a:	50 93 74 02 	sts	0x0274, r21	; 0x800274 <__brkval+0x1>
    108e:	40 93 73 02 	sts	0x0273, r20	; 0x800273 <__brkval>
    1092:	81 93       	st	Z+, r24
    1094:	91 93       	st	Z+, r25
    1096:	02 c0       	rjmp	.+4      	; 0x109c <malloc+0x124>
    1098:	e0 e0       	ldi	r30, 0x00	; 0
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	cf 01       	movw	r24, r30
    109e:	df 91       	pop	r29
    10a0:	cf 91       	pop	r28
    10a2:	1f 91       	pop	r17
    10a4:	0f 91       	pop	r16
    10a6:	08 95       	ret

000010a8 <free>:
    10a8:	cf 93       	push	r28
    10aa:	df 93       	push	r29
    10ac:	00 97       	sbiw	r24, 0x00	; 0
    10ae:	09 f4       	brne	.+2      	; 0x10b2 <free+0xa>
    10b0:	81 c0       	rjmp	.+258    	; 0x11b4 <free+0x10c>
    10b2:	fc 01       	movw	r30, r24
    10b4:	32 97       	sbiw	r30, 0x02	; 2
    10b6:	13 82       	std	Z+3, r1	; 0x03
    10b8:	12 82       	std	Z+2, r1	; 0x02
    10ba:	a0 91 75 02 	lds	r26, 0x0275	; 0x800275 <__flp>
    10be:	b0 91 76 02 	lds	r27, 0x0276	; 0x800276 <__flp+0x1>
    10c2:	10 97       	sbiw	r26, 0x00	; 0
    10c4:	81 f4       	brne	.+32     	; 0x10e6 <free+0x3e>
    10c6:	20 81       	ld	r18, Z
    10c8:	31 81       	ldd	r19, Z+1	; 0x01
    10ca:	82 0f       	add	r24, r18
    10cc:	93 1f       	adc	r25, r19
    10ce:	20 91 73 02 	lds	r18, 0x0273	; 0x800273 <__brkval>
    10d2:	30 91 74 02 	lds	r19, 0x0274	; 0x800274 <__brkval+0x1>
    10d6:	28 17       	cp	r18, r24
    10d8:	39 07       	cpc	r19, r25
    10da:	51 f5       	brne	.+84     	; 0x1130 <free+0x88>
    10dc:	f0 93 74 02 	sts	0x0274, r31	; 0x800274 <__brkval+0x1>
    10e0:	e0 93 73 02 	sts	0x0273, r30	; 0x800273 <__brkval>
    10e4:	67 c0       	rjmp	.+206    	; 0x11b4 <free+0x10c>
    10e6:	ed 01       	movw	r28, r26
    10e8:	20 e0       	ldi	r18, 0x00	; 0
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	ce 17       	cp	r28, r30
    10ee:	df 07       	cpc	r29, r31
    10f0:	40 f4       	brcc	.+16     	; 0x1102 <free+0x5a>
    10f2:	4a 81       	ldd	r20, Y+2	; 0x02
    10f4:	5b 81       	ldd	r21, Y+3	; 0x03
    10f6:	9e 01       	movw	r18, r28
    10f8:	41 15       	cp	r20, r1
    10fa:	51 05       	cpc	r21, r1
    10fc:	f1 f0       	breq	.+60     	; 0x113a <free+0x92>
    10fe:	ea 01       	movw	r28, r20
    1100:	f5 cf       	rjmp	.-22     	; 0x10ec <free+0x44>
    1102:	d3 83       	std	Z+3, r29	; 0x03
    1104:	c2 83       	std	Z+2, r28	; 0x02
    1106:	40 81       	ld	r20, Z
    1108:	51 81       	ldd	r21, Z+1	; 0x01
    110a:	84 0f       	add	r24, r20
    110c:	95 1f       	adc	r25, r21
    110e:	c8 17       	cp	r28, r24
    1110:	d9 07       	cpc	r29, r25
    1112:	59 f4       	brne	.+22     	; 0x112a <free+0x82>
    1114:	88 81       	ld	r24, Y
    1116:	99 81       	ldd	r25, Y+1	; 0x01
    1118:	84 0f       	add	r24, r20
    111a:	95 1f       	adc	r25, r21
    111c:	02 96       	adiw	r24, 0x02	; 2
    111e:	91 83       	std	Z+1, r25	; 0x01
    1120:	80 83       	st	Z, r24
    1122:	8a 81       	ldd	r24, Y+2	; 0x02
    1124:	9b 81       	ldd	r25, Y+3	; 0x03
    1126:	93 83       	std	Z+3, r25	; 0x03
    1128:	82 83       	std	Z+2, r24	; 0x02
    112a:	21 15       	cp	r18, r1
    112c:	31 05       	cpc	r19, r1
    112e:	29 f4       	brne	.+10     	; 0x113a <free+0x92>
    1130:	f0 93 76 02 	sts	0x0276, r31	; 0x800276 <__flp+0x1>
    1134:	e0 93 75 02 	sts	0x0275, r30	; 0x800275 <__flp>
    1138:	3d c0       	rjmp	.+122    	; 0x11b4 <free+0x10c>
    113a:	e9 01       	movw	r28, r18
    113c:	fb 83       	std	Y+3, r31	; 0x03
    113e:	ea 83       	std	Y+2, r30	; 0x02
    1140:	49 91       	ld	r20, Y+
    1142:	59 91       	ld	r21, Y+
    1144:	c4 0f       	add	r28, r20
    1146:	d5 1f       	adc	r29, r21
    1148:	ec 17       	cp	r30, r28
    114a:	fd 07       	cpc	r31, r29
    114c:	61 f4       	brne	.+24     	; 0x1166 <free+0xbe>
    114e:	80 81       	ld	r24, Z
    1150:	91 81       	ldd	r25, Z+1	; 0x01
    1152:	84 0f       	add	r24, r20
    1154:	95 1f       	adc	r25, r21
    1156:	02 96       	adiw	r24, 0x02	; 2
    1158:	e9 01       	movw	r28, r18
    115a:	99 83       	std	Y+1, r25	; 0x01
    115c:	88 83       	st	Y, r24
    115e:	82 81       	ldd	r24, Z+2	; 0x02
    1160:	93 81       	ldd	r25, Z+3	; 0x03
    1162:	9b 83       	std	Y+3, r25	; 0x03
    1164:	8a 83       	std	Y+2, r24	; 0x02
    1166:	e0 e0       	ldi	r30, 0x00	; 0
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	12 96       	adiw	r26, 0x02	; 2
    116c:	8d 91       	ld	r24, X+
    116e:	9c 91       	ld	r25, X
    1170:	13 97       	sbiw	r26, 0x03	; 3
    1172:	00 97       	sbiw	r24, 0x00	; 0
    1174:	19 f0       	breq	.+6      	; 0x117c <free+0xd4>
    1176:	fd 01       	movw	r30, r26
    1178:	dc 01       	movw	r26, r24
    117a:	f7 cf       	rjmp	.-18     	; 0x116a <free+0xc2>
    117c:	8d 91       	ld	r24, X+
    117e:	9c 91       	ld	r25, X
    1180:	11 97       	sbiw	r26, 0x01	; 1
    1182:	9d 01       	movw	r18, r26
    1184:	2e 5f       	subi	r18, 0xFE	; 254
    1186:	3f 4f       	sbci	r19, 0xFF	; 255
    1188:	82 0f       	add	r24, r18
    118a:	93 1f       	adc	r25, r19
    118c:	20 91 73 02 	lds	r18, 0x0273	; 0x800273 <__brkval>
    1190:	30 91 74 02 	lds	r19, 0x0274	; 0x800274 <__brkval+0x1>
    1194:	28 17       	cp	r18, r24
    1196:	39 07       	cpc	r19, r25
    1198:	69 f4       	brne	.+26     	; 0x11b4 <free+0x10c>
    119a:	30 97       	sbiw	r30, 0x00	; 0
    119c:	29 f4       	brne	.+10     	; 0x11a8 <free+0x100>
    119e:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <__flp+0x1>
    11a2:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <__flp>
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <free+0x104>
    11a8:	13 82       	std	Z+3, r1	; 0x03
    11aa:	12 82       	std	Z+2, r1	; 0x02
    11ac:	b0 93 74 02 	sts	0x0274, r27	; 0x800274 <__brkval+0x1>
    11b0:	a0 93 73 02 	sts	0x0273, r26	; 0x800273 <__brkval>
    11b4:	df 91       	pop	r29
    11b6:	cf 91       	pop	r28
    11b8:	08 95       	ret

000011ba <_exit>:
    11ba:	f8 94       	cli

000011bc <__stop_program>:
    11bc:	ff cf       	rjmp	.-2      	; 0x11bc <__stop_program>
