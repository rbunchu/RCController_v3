
RCController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800200  000014b6  0000154a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  00800262  00800262  000015ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000015ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000015dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000520  00000000  00000000  0000161c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000870a  00000000  00000000  00001b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000024dd  00000000  00000000  0000a246  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002be0  00000000  00000000  0000c723  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001024  00000000  00000000  0000f304  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000025ab  00000000  00000000  00010328  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000058ca  00000000  00000000  000128d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004d0  00000000  00000000  0001819d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0d c1       	rjmp	.+538    	; 0x21c <__ctors_end>
       2:	00 00       	nop
       4:	a5 c5       	rjmp	.+2890   	; 0xb50 <__vector_1>
       6:	00 00       	nop
       8:	ce c5       	rjmp	.+2972   	; 0xba6 <__vector_2>
       a:	00 00       	nop
       c:	f7 c5       	rjmp	.+3054   	; 0xbfc <__vector_3>
       e:	00 00       	nop
      10:	20 c6       	rjmp	.+3136   	; 0xc52 <__vector_4>
      12:	00 00       	nop
      14:	49 c6       	rjmp	.+3218   	; 0xca8 <__vector_5>
      16:	00 00       	nop
      18:	72 c6       	rjmp	.+3300   	; 0xcfe <__vector_6>
      1a:	00 00       	nop
      1c:	9b c6       	rjmp	.+3382   	; 0xd54 <__vector_7>
      1e:	00 00       	nop
      20:	c4 c6       	rjmp	.+3464   	; 0xdaa <__vector_8>
      22:	00 00       	nop
      24:	1b c1       	rjmp	.+566    	; 0x25c <__bad_interrupt>
      26:	00 00       	nop
      28:	19 c1       	rjmp	.+562    	; 0x25c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	17 c1       	rjmp	.+558    	; 0x25c <__bad_interrupt>
      2e:	00 00       	nop
      30:	15 c1       	rjmp	.+554    	; 0x25c <__bad_interrupt>
      32:	00 00       	nop
      34:	13 c1       	rjmp	.+550    	; 0x25c <__bad_interrupt>
      36:	00 00       	nop
      38:	11 c1       	rjmp	.+546    	; 0x25c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	0f c1       	rjmp	.+542    	; 0x25c <__bad_interrupt>
      3e:	00 00       	nop
      40:	0d c1       	rjmp	.+538    	; 0x25c <__bad_interrupt>
      42:	00 00       	nop
      44:	0b c1       	rjmp	.+534    	; 0x25c <__bad_interrupt>
      46:	00 00       	nop
      48:	09 c1       	rjmp	.+530    	; 0x25c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	07 c1       	rjmp	.+526    	; 0x25c <__bad_interrupt>
      4e:	00 00       	nop
      50:	05 c1       	rjmp	.+522    	; 0x25c <__bad_interrupt>
      52:	00 00       	nop
      54:	03 c1       	rjmp	.+518    	; 0x25c <__bad_interrupt>
      56:	00 00       	nop
      58:	01 c1       	rjmp	.+514    	; 0x25c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d1 c6       	rjmp	.+3490   	; 0xe00 <__vector_23>
      5e:	00 00       	nop
      60:	fd c0       	rjmp	.+506    	; 0x25c <__bad_interrupt>
      62:	00 00       	nop
      64:	fb c0       	rjmp	.+502    	; 0x25c <__bad_interrupt>
      66:	00 00       	nop
      68:	f9 c0       	rjmp	.+498    	; 0x25c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	f7 c0       	rjmp	.+494    	; 0x25c <__bad_interrupt>
      6e:	00 00       	nop
      70:	f5 c0       	rjmp	.+490    	; 0x25c <__bad_interrupt>
      72:	00 00       	nop
      74:	f3 c0       	rjmp	.+486    	; 0x25c <__bad_interrupt>
      76:	00 00       	nop
      78:	f1 c0       	rjmp	.+482    	; 0x25c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ef c0       	rjmp	.+478    	; 0x25c <__bad_interrupt>
      7e:	00 00       	nop
      80:	ed c0       	rjmp	.+474    	; 0x25c <__bad_interrupt>
      82:	00 00       	nop
      84:	eb c0       	rjmp	.+470    	; 0x25c <__bad_interrupt>
      86:	00 00       	nop
      88:	e9 c0       	rjmp	.+466    	; 0x25c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e7 c0       	rjmp	.+462    	; 0x25c <__bad_interrupt>
      8e:	00 00       	nop
      90:	e5 c0       	rjmp	.+458    	; 0x25c <__bad_interrupt>
      92:	00 00       	nop
      94:	e3 c0       	rjmp	.+454    	; 0x25c <__bad_interrupt>
      96:	00 00       	nop
      98:	e1 c0       	rjmp	.+450    	; 0x25c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	df c0       	rjmp	.+446    	; 0x25c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	dd c0       	rjmp	.+442    	; 0x25c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	db c0       	rjmp	.+438    	; 0x25c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d9 c0       	rjmp	.+434    	; 0x25c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d7 c0       	rjmp	.+430    	; 0x25c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	d5 c0       	rjmp	.+426    	; 0x25c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	d3 c0       	rjmp	.+422    	; 0x25c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	d1 c0       	rjmp	.+418    	; 0x25c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	cf c0       	rjmp	.+414    	; 0x25c <__bad_interrupt>
      be:	00 00       	nop
      c0:	cd c0       	rjmp	.+410    	; 0x25c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	cb c0       	rjmp	.+406    	; 0x25c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	c9 c0       	rjmp	.+402    	; 0x25c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	c7 c0       	rjmp	.+398    	; 0x25c <__bad_interrupt>
      ce:	00 00       	nop
      d0:	c5 c0       	rjmp	.+394    	; 0x25c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	c3 c0       	rjmp	.+390    	; 0x25c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	c1 c0       	rjmp	.+386    	; 0x25c <__bad_interrupt>
      da:	00 00       	nop
      dc:	bf c0       	rjmp	.+382    	; 0x25c <__bad_interrupt>
      de:	00 00       	nop
      e0:	bd c0       	rjmp	.+378    	; 0x25c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	82 05       	cpc	r24, r2
      e6:	4c 05       	cpc	r20, r12
      e8:	54 05       	cpc	r21, r4
      ea:	60 05       	cpc	r22, r0
      ec:	6d 05       	cpc	r22, r13
      ee:	8e 05       	cpc	r24, r14
      f0:	9b 05       	cpc	r25, r11
      f2:	54 08       	sbc	r5, r4
      f4:	57 08       	sbc	r5, r7
      f6:	46 08       	sbc	r4, r6
      f8:	4a 08       	sbc	r4, r10
      fa:	50 08       	sbc	r5, r0
      fc:	8e 08       	sbc	r8, r14
      fe:	5b 08       	sbc	r5, r11
     100:	5f 08       	sbc	r5, r15
     102:	65 08       	sbc	r6, r5
     104:	69 08       	sbc	r6, r9
     106:	6d 08       	sbc	r6, r13
     108:	73 08       	sbc	r7, r3
     10a:	77 08       	sbc	r7, r7
     10c:	7b 08       	sbc	r7, r11
     10e:	8e 08       	sbc	r8, r14
     110:	81 08       	sbc	r8, r1
     112:	85 08       	sbc	r8, r5
     114:	89 08       	sbc	r8, r9

00000116 <__trampolines_end>:
     116:	00 00       	nop
     118:	0a 0b       	sbc	r16, r26
     11a:	02 09       	sbc	r16, r2
     11c:	0c 0d       	add	r16, r12
     11e:	0e 08       	sbc	r0, r14
     120:	07 03       	mulsu	r16, r23
     122:	04 01       	movw	r0, r8
	...
     140:	00 00       	nop
     142:	12 11       	cpse	r17, r2
     144:	10 00       	.word	0x0010	; ????
	...

0000015c <digital_pin_to_bit_mask_PGM>:
     15c:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     16c:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     17c:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     18c:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     19c:	04 08 10 20 40 80                                   ... @.

000001a2 <digital_pin_to_port_PGM>:
     1a2:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1b2:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1c2:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1d2:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1e2:	0b 0b 0b 0b 0b 0b                                   ......

000001e8 <port_to_output_PGM>:
     1e8:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     1f8:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000202 <port_to_mode_PGM>:
     202:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     212:	01 01 00 00 04 01 07 01 0a 01                       ..........

0000021c <__ctors_end>:
     21c:	11 24       	eor	r1, r1
     21e:	1f be       	out	0x3f, r1	; 63
     220:	cf ef       	ldi	r28, 0xFF	; 255
     222:	d1 e2       	ldi	r29, 0x21	; 33
     224:	de bf       	out	0x3e, r29	; 62
     226:	cd bf       	out	0x3d, r28	; 61
     228:	00 e0       	ldi	r16, 0x00	; 0
     22a:	0c bf       	out	0x3c, r16	; 60

0000022c <__do_copy_data>:
     22c:	12 e0       	ldi	r17, 0x02	; 2
     22e:	a0 e0       	ldi	r26, 0x00	; 0
     230:	b2 e0       	ldi	r27, 0x02	; 2
     232:	e6 eb       	ldi	r30, 0xB6	; 182
     234:	f4 e1       	ldi	r31, 0x14	; 20
     236:	00 e0       	ldi	r16, 0x00	; 0
     238:	0b bf       	out	0x3b, r16	; 59
     23a:	02 c0       	rjmp	.+4      	; 0x240 <__do_copy_data+0x14>
     23c:	07 90       	elpm	r0, Z+
     23e:	0d 92       	st	X+, r0
     240:	a2 36       	cpi	r26, 0x62	; 98
     242:	b1 07       	cpc	r27, r17
     244:	d9 f7       	brne	.-10     	; 0x23c <__do_copy_data+0x10>

00000246 <__do_clear_bss>:
     246:	22 e0       	ldi	r18, 0x02	; 2
     248:	a2 e6       	ldi	r26, 0x62	; 98
     24a:	b2 e0       	ldi	r27, 0x02	; 2
     24c:	01 c0       	rjmp	.+2      	; 0x250 <.do_clear_bss_start>

0000024e <.do_clear_bss_loop>:
     24e:	1d 92       	st	X+, r1

00000250 <.do_clear_bss_start>:
     250:	ab 37       	cpi	r26, 0x7B	; 123
     252:	b2 07       	cpc	r27, r18
     254:	e1 f7       	brne	.-8      	; 0x24e <.do_clear_bss_loop>
     256:	bc d3       	rcall	.+1912   	; 0x9d0 <main>
     258:	0c 94 59 0a 	jmp	0x14b2	; 0x14b2 <_exit>

0000025c <__bad_interrupt>:
     25c:	d1 ce       	rjmp	.-606    	; 0x0 <__vectors>

0000025e <analog_joystick_create>:
#include "analog_joystick.h"


analog_joystick *analog_joystick_create(short analog_x, short analog_y, short action_button)
{
     25e:	ef 92       	push	r14
     260:	ff 92       	push	r15
     262:	0f 93       	push	r16
     264:	1f 93       	push	r17
     266:	cf 93       	push	r28
     268:	df 93       	push	r29
     26a:	7c 01       	movw	r14, r24
     26c:	8b 01       	movw	r16, r22
     26e:	ea 01       	movw	r28, r20
  analog_joystick *joystick = malloc(sizeof(analog_joystick));
     270:	86 e0       	ldi	r24, 0x06	; 6
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	fd d7       	rcall	.+4090   	; 0x1270 <malloc>
  joystick->analog_x = analog_x;
     276:	fc 01       	movw	r30, r24
     278:	f1 82       	std	Z+1, r15	; 0x01
     27a:	e0 82       	st	Z, r14
  joystick->analog_y = analog_y;
     27c:	13 83       	std	Z+3, r17	; 0x03
     27e:	02 83       	std	Z+2, r16	; 0x02
  joystick->action_button = action_button;
     280:	d5 83       	std	Z+5, r29	; 0x05
     282:	c4 83       	std	Z+4, r28	; 0x04
  
  return joystick;
     284:	df 91       	pop	r29
     286:	cf 91       	pop	r28
     288:	1f 91       	pop	r17
     28a:	0f 91       	pop	r16
     28c:	ff 90       	pop	r15
     28e:	ef 90       	pop	r14
     290:	08 95       	ret

00000292 <controller_interrupt_joystick_left>:

/*
* Joystick left interrupt routine
*/
void controller_interrupt_joystick_left()
{
     292:	08 95       	ret

00000294 <controller_interrupt_buttons>:
	lcd_clear(self->lcd);
	lcd_print(self->lcd, "WELCOME");
}

void controller_interrupt_buttons()
{
     294:	cf 93       	push	r28
     296:	df 93       	push	r29
     298:	00 d0       	rcall	.+0      	; 0x29a <controller_interrupt_buttons+0x6>
     29a:	1f 92       	push	r1
     29c:	1f 92       	push	r1
     29e:	cd b7       	in	r28, 0x3d	; 61
     2a0:	de b7       	in	r29, 0x3e	; 62
	int value = analogRead(rc_controller.switches->data_pin);
     2a2:	e0 91 6b 02 	lds	r30, 0x026B	; 0x80026b <rc_controller>
     2a6:	f0 91 6c 02 	lds	r31, 0x026C	; 0x80026c <rc_controller+0x1>
     2aa:	80 81       	ld	r24, Z
     2ac:	be d6       	rcall	.+3452   	; 0x102a <analogRead>
	analog_button button = tact_switch_button_pressed(rc_controller.switches, value);
     2ae:	bc 01       	movw	r22, r24
     2b0:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <rc_controller>
     2b4:	90 91 6c 02 	lds	r25, 0x026C	; 0x80026c <rc_controller+0x1>
     2b8:	42 d3       	rcall	.+1668   	; 0x93e <tact_switch_button_pressed>
	
	switch(button.type)
     2ba:	61 30       	cpi	r22, 0x01	; 1
     2bc:	61 f4       	brne	.+24     	; 0x2d6 <controller_interrupt_buttons+0x42>
	{
		case LIGHT_BUTTON:
			light_control_leds_next(rc_controller.light_leds);
     2be:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <rc_controller+0x2>
     2c2:	90 91 6e 02 	lds	r25, 0x026E	; 0x80026e <rc_controller+0x3>
		case OPTIONS_BUTTON:
			break;
		default:
			break;
	}
}
     2c6:	0f 90       	pop	r0
     2c8:	0f 90       	pop	r0
     2ca:	0f 90       	pop	r0
     2cc:	0f 90       	pop	r0
     2ce:	0f 90       	pop	r0
     2d0:	df 91       	pop	r29
	analog_button button = tact_switch_button_pressed(rc_controller.switches, value);
	
	switch(button.type)
	{
		case LIGHT_BUTTON:
			light_control_leds_next(rc_controller.light_leds);
     2d2:	cf 91       	pop	r28
     2d4:	49 c1       	rjmp	.+658    	; 0x568 <light_control_leds_next>
		case OPTIONS_BUTTON:
			break;
		default:
			break;
	}
}
     2d6:	0f 90       	pop	r0
     2d8:	0f 90       	pop	r0
     2da:	0f 90       	pop	r0
     2dc:	0f 90       	pop	r0
     2de:	0f 90       	pop	r0
     2e0:	df 91       	pop	r29
     2e2:	cf 91       	pop	r28
     2e4:	08 95       	ret

000002e6 <controller_interrupt_joystick_right>:
     2e6:	08 95       	ret

000002e8 <controller_initialize>:
#include "controller.h"

void controller_initialize(controller *self)
{  
     2e8:	ef 92       	push	r14
     2ea:	0f 93       	push	r16
     2ec:	cf 93       	push	r28
     2ee:	df 93       	push	r29
     2f0:	ec 01       	movw	r28, r24
	self->switches = tact_switch_board_create(1, 2);
     2f2:	62 e0       	ldi	r22, 0x02	; 2
     2f4:	81 e0       	ldi	r24, 0x01	; 1
     2f6:	ea d2       	rcall	.+1492   	; 0x8cc <tact_switch_board_create>
     2f8:	99 83       	std	Y+1, r25	; 0x01
     2fa:	88 83       	st	Y, r24
  self->leds = led_shift_register_create(53, 49, 51, 47);	
     2fc:	2f e2       	ldi	r18, 0x2F	; 47
     2fe:	30 e0       	ldi	r19, 0x00	; 0
     300:	43 e3       	ldi	r20, 0x33	; 51
     302:	50 e0       	ldi	r21, 0x00	; 0
     304:	61 e3       	ldi	r22, 0x31	; 49
     306:	70 e0       	ldi	r23, 0x00	; 0
     308:	85 e3       	ldi	r24, 0x35	; 53
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	9b d0       	rcall	.+310    	; 0x444 <led_shift_register_create>
     30e:	9d 83       	std	Y+5, r25	; 0x05
	self->light_leds = light_control_leds_create(self->leds);	
     310:	8c 83       	std	Y+4, r24	; 0x04
     312:	10 d1       	rcall	.+544    	; 0x534 <light_control_leds_create>
     314:	9b 83       	std	Y+3, r25	; 0x03
     316:	8a 83       	std	Y+2, r24	; 0x02
	self->joystic_left = analog_joystick_create(1, 5, 6);
     318:	46 e0       	ldi	r20, 0x06	; 6
     31a:	50 e0       	ldi	r21, 0x00	; 0
     31c:	65 e0       	ldi	r22, 0x05	; 5
     31e:	70 e0       	ldi	r23, 0x00	; 0
     320:	81 e0       	ldi	r24, 0x01	; 1
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	9c df       	rcall	.-200    	; 0x25e <analog_joystick_create>
     326:	99 87       	std	Y+9, r25	; 0x09
     328:	88 87       	std	Y+8, r24	; 0x08
	self->joystic_right = analog_joystick_create(1, 7, 4);
     32a:	44 e0       	ldi	r20, 0x04	; 4
     32c:	50 e0       	ldi	r21, 0x00	; 0
     32e:	67 e0       	ldi	r22, 0x07	; 7
     330:	70 e0       	ldi	r23, 0x00	; 0
     332:	81 e0       	ldi	r24, 0x01	; 1
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	93 df       	rcall	.-218    	; 0x25e <analog_joystick_create>
     338:	9b 87       	std	Y+11, r25	; 0x0b

	pinMode(self->switches->interrupt_pin, OUTPUT);
     33a:	8a 87       	std	Y+10, r24	; 0x0a
     33c:	e8 81       	ld	r30, Y
     33e:	f9 81       	ldd	r31, Y+1	; 0x01
     340:	61 e0       	ldi	r22, 0x01	; 1
     342:	81 81       	ldd	r24, Z+1	; 0x01
	pinMode(self->joystic_left->action_button, OUTPUT);
     344:	ec d6       	rcall	.+3544   	; 0x111e <pinMode>
     346:	e8 85       	ldd	r30, Y+8	; 0x08
     348:	f9 85       	ldd	r31, Y+9	; 0x09
     34a:	61 e0       	ldi	r22, 0x01	; 1
     34c:	84 81       	ldd	r24, Z+4	; 0x04
	pinMode(self->joystic_right->action_button, OUTPUT);
     34e:	e7 d6       	rcall	.+3534   	; 0x111e <pinMode>
     350:	ea 85       	ldd	r30, Y+10	; 0x0a
     352:	fb 85       	ldd	r31, Y+11	; 0x0b
     354:	61 e0       	ldi	r22, 0x01	; 1
     356:	84 81       	ldd	r24, Z+4	; 0x04
	attachInterrupt(self->switches->interrupt_pin, controller_interrupt_buttons, RISING);
     358:	e2 d6       	rcall	.+3524   	; 0x111e <pinMode>
     35a:	e8 81       	ld	r30, Y
     35c:	f9 81       	ldd	r31, Y+1	; 0x01
     35e:	43 e0       	ldi	r20, 0x03	; 3
     360:	50 e0       	ldi	r21, 0x00	; 0
     362:	6a e4       	ldi	r22, 0x4A	; 74
     364:	71 e0       	ldi	r23, 0x01	; 1
     366:	81 81       	ldd	r24, Z+1	; 0x01
	attachInterrupt(self->joystic_left->action_button, controller_interrupt_joystick_left, RISING);
     368:	80 d3       	rcall	.+1792   	; 0xa6a <attachInterrupt>
     36a:	e8 85       	ldd	r30, Y+8	; 0x08
     36c:	f9 85       	ldd	r31, Y+9	; 0x09
     36e:	43 e0       	ldi	r20, 0x03	; 3
     370:	50 e0       	ldi	r21, 0x00	; 0
     372:	69 e4       	ldi	r22, 0x49	; 73
     374:	71 e0       	ldi	r23, 0x01	; 1
     376:	84 81       	ldd	r24, Z+4	; 0x04
	attachInterrupt(self->joystic_right->action_button, controller_interrupt_joystick_right, RISING);
     378:	78 d3       	rcall	.+1776   	; 0xa6a <attachInterrupt>
     37a:	ea 85       	ldd	r30, Y+10	; 0x0a
     37c:	fb 85       	ldd	r31, Y+11	; 0x0b
     37e:	43 e0       	ldi	r20, 0x03	; 3
     380:	50 e0       	ldi	r21, 0x00	; 0
     382:	63 e7       	ldi	r22, 0x73	; 115
     384:	71 e0       	ldi	r23, 0x01	; 1
     386:	84 81       	ldd	r24, Z+4	; 0x04
  
	self->lcd = lcd_get(8, 9, 4, 5, 6, 7);
     388:	70 d3       	rcall	.+1760   	; 0xa6a <attachInterrupt>
     38a:	87 e0       	ldi	r24, 0x07	; 7
     38c:	e8 2e       	mov	r14, r24
     38e:	06 e0       	ldi	r16, 0x06	; 6
     390:	25 e0       	ldi	r18, 0x05	; 5
     392:	44 e0       	ldi	r20, 0x04	; 4
     394:	69 e0       	ldi	r22, 0x09	; 9
     396:	88 e0       	ldi	r24, 0x08	; 8
	lcd_begin(self->lcd, 16, 2);
     398:	6d d2       	rcall	.+1242   	; 0x874 <lcd_get>
     39a:	9f 83       	std	Y+7, r25	; 0x07
     39c:	8e 83       	std	Y+6, r24	; 0x06
	lcd_set_cursor(self->lcd, 0, 0);
     39e:	42 e0       	ldi	r20, 0x02	; 2
     3a0:	60 e1       	ldi	r22, 0x10	; 16
     3a2:	8b d2       	rcall	.+1302   	; 0x8ba <lcd_begin>
     3a4:	40 e0       	ldi	r20, 0x00	; 0
	lcd_print(self->lcd, "RC Controller");
     3a6:	60 e0       	ldi	r22, 0x00	; 0
     3a8:	8e 81       	ldd	r24, Y+6	; 0x06
     3aa:	9f 81       	ldd	r25, Y+7	; 0x07
     3ac:	89 d2       	rcall	.+1298   	; 0x8c0 <lcd_set_cursor>
	lcd_set_cursor(self->lcd, 0, 1);
     3ae:	6b e2       	ldi	r22, 0x2B	; 43
     3b0:	72 e0       	ldi	r23, 0x02	; 2
     3b2:	8e 81       	ldd	r24, Y+6	; 0x06
     3b4:	9f 81       	ldd	r25, Y+7	; 0x07
     3b6:	85 d2       	rcall	.+1290   	; 0x8c2 <lcd_print>
	lcd_print(self->lcd, "ver. 1.0");
     3b8:	41 e0       	ldi	r20, 0x01	; 1
     3ba:	60 e0       	ldi	r22, 0x00	; 0
     3bc:	8e 81       	ldd	r24, Y+6	; 0x06
     3be:	9f 81       	ldd	r25, Y+7	; 0x07
  delay(2000);
     3c0:	7f d2       	rcall	.+1278   	; 0x8c0 <lcd_set_cursor>
     3c2:	69 e3       	ldi	r22, 0x39	; 57
     3c4:	72 e0       	ldi	r23, 0x02	; 2
     3c6:	8e 81       	ldd	r24, Y+6	; 0x06
     3c8:	9f 81       	ldd	r25, Y+7	; 0x07
	lcd_clear(self->lcd);
     3ca:	7b d2       	rcall	.+1270   	; 0x8c2 <lcd_print>
     3cc:	60 ed       	ldi	r22, 0xD0	; 208
     3ce:	77 e0       	ldi	r23, 0x07	; 7
	lcd_set_cursor(self->lcd, 0, 0);
     3d0:	80 e0       	ldi	r24, 0x00	; 0
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	84 d5       	rcall	.+2824   	; 0xede <delay>
     3d6:	8e 81       	ldd	r24, Y+6	; 0x06
	led_shift_register_reset(self->leds);
     3d8:	9f 81       	ldd	r25, Y+7	; 0x07
     3da:	71 d2       	rcall	.+1250   	; 0x8be <lcd_clear>
     3dc:	40 e0       	ldi	r20, 0x00	; 0
     3de:	60 e0       	ldi	r22, 0x00	; 0
	digitalWrite(self->leds->output_enable, LOW);
     3e0:	8e 81       	ldd	r24, Y+6	; 0x06
     3e2:	9f 81       	ldd	r25, Y+7	; 0x07
     3e4:	6d d2       	rcall	.+1242   	; 0x8c0 <lcd_set_cursor>
     3e6:	8c 81       	ldd	r24, Y+4	; 0x04
     3e8:	9d 81       	ldd	r25, Y+5	; 0x05
	lcd_print(self->lcd, "Testing LEDs...");
     3ea:	6b d0       	rcall	.+214    	; 0x4c2 <led_shift_register_reset>
     3ec:	ec 81       	ldd	r30, Y+4	; 0x04
     3ee:	fd 81       	ldd	r31, Y+5	; 0x05
     3f0:	60 e0       	ldi	r22, 0x00	; 0
     3f2:	80 85       	ldd	r24, Z+8	; 0x08
     3f4:	d0 d6       	rcall	.+3488   	; 0x1196 <digitalWrite>
    //Testing controller info leds
	led_shift_register_test(self->leds);
     3f6:	62 e4       	ldi	r22, 0x42	; 66
     3f8:	72 e0       	ldi	r23, 0x02	; 2
     3fa:	8e 81       	ldd	r24, Y+6	; 0x06
     3fc:	9f 81       	ldd	r25, Y+7	; 0x07
	lcd_clear(self->lcd);
     3fe:	61 d2       	rcall	.+1218   	; 0x8c2 <lcd_print>
     400:	8c 81       	ldd	r24, Y+4	; 0x04
     402:	9d 81       	ldd	r25, Y+5	; 0x05
     404:	64 d0       	rcall	.+200    	; 0x4ce <led_shift_register_test>
	lcd_print(self->lcd, "WELCOME");
     406:	8e 81       	ldd	r24, Y+6	; 0x06
     408:	9f 81       	ldd	r25, Y+7	; 0x07
     40a:	59 d2       	rcall	.+1202   	; 0x8be <lcd_clear>
     40c:	62 e5       	ldi	r22, 0x52	; 82
}
     40e:	72 e0       	ldi	r23, 0x02	; 2
     410:	8e 81       	ldd	r24, Y+6	; 0x06
     412:	9f 81       	ldd	r25, Y+7	; 0x07
     414:	df 91       	pop	r29
	digitalWrite(self->leds->output_enable, LOW);
	lcd_print(self->lcd, "Testing LEDs...");
    //Testing controller info leds
	led_shift_register_test(self->leds);
	lcd_clear(self->lcd);
	lcd_print(self->lcd, "WELCOME");
     416:	cf 91       	pop	r28
     418:	0f 91       	pop	r16
     41a:	ef 90       	pop	r14
     41c:	52 c2       	rjmp	.+1188   	; 0x8c2 <lcd_print>

0000041e <led_shift_register_write>:
  shift_register->led_state = shift_register->led_state & (!(short)led);
  led_shift_register_write(shift_register, shift_register->led_state);
}

void led_shift_register_write(led_shift_register *shift_register, short value)
{
     41e:	1f 93       	push	r17
     420:	cf 93       	push	r28
     422:	df 93       	push	r29
     424:	ec 01       	movw	r28, r24
     426:	16 2f       	mov	r17, r22
    digitalWrite(shift_register->latch_pin, LOW);
     428:	60 e0       	ldi	r22, 0x00	; 0
     42a:	8c 81       	ldd	r24, Y+4	; 0x04
     42c:	b4 d6       	rcall	.+3432   	; 0x1196 <digitalWrite>
    shiftOut(shift_register->data_pin, shift_register->clock_pin, MSBFIRST, value);
     42e:	21 2f       	mov	r18, r17
     430:	41 e0       	ldi	r20, 0x01	; 1
     432:	6a 81       	ldd	r22, Y+2	; 0x02
     434:	88 81       	ld	r24, Y
     436:	dd d6       	rcall	.+3514   	; 0x11f2 <shiftOut>
    digitalWrite(shift_register->latch_pin, HIGH);
     438:	61 e0       	ldi	r22, 0x01	; 1
     43a:	8c 81       	ldd	r24, Y+4	; 0x04
     43c:	df 91       	pop	r29
     43e:	cf 91       	pop	r28

void led_shift_register_write(led_shift_register *shift_register, short value)
{
    digitalWrite(shift_register->latch_pin, LOW);
    shiftOut(shift_register->data_pin, shift_register->clock_pin, MSBFIRST, value);
    digitalWrite(shift_register->latch_pin, HIGH);
     440:	1f 91       	pop	r17
     442:	a9 c6       	rjmp	.+3410   	; 0x1196 <digitalWrite>

00000444 <led_shift_register_create>:

static void led_shift_register_write(led_shift_register *, short);
static void led_shift_register_init(led_shift_register *);

led_shift_register *led_shift_register_create(short data_pin, short clock_pin, short latch_pin, short output_enable)
{
     444:	af 92       	push	r10
     446:	bf 92       	push	r11
     448:	cf 92       	push	r12
     44a:	df 92       	push	r13
     44c:	ef 92       	push	r14
     44e:	ff 92       	push	r15
     450:	0f 93       	push	r16
     452:	1f 93       	push	r17
     454:	cf 93       	push	r28
     456:	df 93       	push	r29
     458:	5c 01       	movw	r10, r24
     45a:	6b 01       	movw	r12, r22
     45c:	7a 01       	movw	r14, r20
     45e:	12 2f       	mov	r17, r18
     460:	03 2f       	mov	r16, r19
	led_shift_register *shift_register = malloc(sizeof(led_shift_register));
     462:	8a e0       	ldi	r24, 0x0A	; 10
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	04 d7       	rcall	.+3592   	; 0x1270 <malloc>
     468:	ec 01       	movw	r28, r24
	shift_register->data_pin = data_pin;
     46a:	b9 82       	std	Y+1, r11	; 0x01
     46c:	a8 82       	st	Y, r10
	shift_register->clock_pin = clock_pin;
     46e:	db 82       	std	Y+3, r13	; 0x03
     470:	ca 82       	std	Y+2, r12	; 0x02
	shift_register->latch_pin = latch_pin;
     472:	fd 82       	std	Y+5, r15	; 0x05
     474:	ec 82       	std	Y+4, r14	; 0x04
	shift_register->output_enable = output_enable;
     476:	18 87       	std	Y+8, r17	; 0x08
     478:	09 87       	std	Y+9, r16	; 0x09
	return shift_register;
}

void led_shift_register_init(led_shift_register * shift_register)
{
	pinMode(shift_register->output_enable, OUTPUT);
     47a:	61 e0       	ldi	r22, 0x01	; 1
     47c:	81 2f       	mov	r24, r17
	digitalWrite(shift_register->output_enable, HIGH);
     47e:	4f d6       	rcall	.+3230   	; 0x111e <pinMode>
     480:	61 e0       	ldi	r22, 0x01	; 1

	pinMode(shift_register->clock_pin, OUTPUT);
     482:	88 85       	ldd	r24, Y+8	; 0x08
     484:	88 d6       	rcall	.+3344   	; 0x1196 <digitalWrite>
     486:	61 e0       	ldi	r22, 0x01	; 1
	pinMode(shift_register->data_pin, OUTPUT);
     488:	8a 81       	ldd	r24, Y+2	; 0x02
     48a:	49 d6       	rcall	.+3218   	; 0x111e <pinMode>
	pinMode(shift_register->latch_pin, OUTPUT);
     48c:	61 e0       	ldi	r22, 0x01	; 1
     48e:	88 81       	ld	r24, Y

	digitalWrite(shift_register->clock_pin, LOW);
     490:	46 d6       	rcall	.+3212   	; 0x111e <pinMode>
     492:	61 e0       	ldi	r22, 0x01	; 1
     494:	8c 81       	ldd	r24, Y+4	; 0x04
	digitalWrite(shift_register->data_pin, LOW);
     496:	43 d6       	rcall	.+3206   	; 0x111e <pinMode>
     498:	60 e0       	ldi	r22, 0x00	; 0
     49a:	8a 81       	ldd	r24, Y+2	; 0x02
     49c:	7c d6       	rcall	.+3320   	; 0x1196 <digitalWrite>
	digitalWrite(shift_register->latch_pin, LOW);
     49e:	60 e0       	ldi	r22, 0x00	; 0
     4a0:	88 81       	ld	r24, Y
     4a2:	79 d6       	rcall	.+3314   	; 0x1196 <digitalWrite>
     4a4:	60 e0       	ldi	r22, 0x00	; 0
	shift_register->latch_pin = latch_pin;
	shift_register->output_enable = output_enable;
	
	led_shift_register_init(shift_register);
	return shift_register;
}
     4a6:	8c 81       	ldd	r24, Y+4	; 0x04
     4a8:	76 d6       	rcall	.+3308   	; 0x1196 <digitalWrite>
     4aa:	ce 01       	movw	r24, r28
     4ac:	df 91       	pop	r29
     4ae:	cf 91       	pop	r28
     4b0:	1f 91       	pop	r17
     4b2:	0f 91       	pop	r16
     4b4:	ff 90       	pop	r15
     4b6:	ef 90       	pop	r14
     4b8:	df 90       	pop	r13
     4ba:	cf 90       	pop	r12
     4bc:	bf 90       	pop	r11
     4be:	af 90       	pop	r10
     4c0:	08 95       	ret

000004c2 <led_shift_register_reset>:
    led_shift_register_reset(shift_register);
}

void led_shift_register_reset(led_shift_register *shift_register)
{
    shift_register->led_state = 0;
     4c2:	fc 01       	movw	r30, r24
     4c4:	17 82       	std	Z+7, r1	; 0x07
     4c6:	16 82       	std	Z+6, r1	; 0x06
    led_shift_register_write(shift_register, shift_register->led_state);
     4c8:	60 e0       	ldi	r22, 0x00	; 0
     4ca:	70 e0       	ldi	r23, 0x00	; 0
     4cc:	a8 cf       	rjmp	.-176    	; 0x41e <led_shift_register_write>

000004ce <led_shift_register_test>:
	digitalWrite(shift_register->data_pin, LOW);
	digitalWrite(shift_register->latch_pin, LOW);
}

void led_shift_register_test(led_shift_register *shift_register)
{
     4ce:	cf 93       	push	r28
     4d0:	df 93       	push	r29
     4d2:	ec 01       	movw	r28, r24
	shift_register->led_state = 1;
     4d4:	81 e0       	ldi	r24, 0x01	; 1
     4d6:	90 e0       	ldi	r25, 0x00	; 0
    for(shift_register->led_state; shift_register->led_state <= 128; shift_register->led_state = shift_register->led_state * 2)
     4d8:	9f 83       	std	Y+7, r25	; 0x07
     4da:	8e 83       	std	Y+6, r24	; 0x06
     4dc:	6e 81       	ldd	r22, Y+6	; 0x06
     4de:	7f 81       	ldd	r23, Y+7	; 0x07
    {
      led_shift_register_write(shift_register, shift_register->led_state);
     4e0:	ce 01       	movw	r24, r28
}

void led_shift_register_test(led_shift_register *shift_register)
{
	shift_register->led_state = 1;
    for(shift_register->led_state; shift_register->led_state <= 128; shift_register->led_state = shift_register->led_state * 2)
     4e2:	61 38       	cpi	r22, 0x81	; 129
     4e4:	71 05       	cpc	r23, r1
    {
      led_shift_register_write(shift_register, shift_register->led_state);
     4e6:	5c f4       	brge	.+22     	; 0x4fe <led_shift_register_test+0x30>
	  delay(200);
     4e8:	9a df       	rcall	.-204    	; 0x41e <led_shift_register_write>
     4ea:	68 ec       	ldi	r22, 0xC8	; 200
     4ec:	70 e0       	ldi	r23, 0x00	; 0
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	90 e0       	ldi	r25, 0x00	; 0
}

void led_shift_register_test(led_shift_register *shift_register)
{
	shift_register->led_state = 1;
    for(shift_register->led_state; shift_register->led_state <= 128; shift_register->led_state = shift_register->led_state * 2)
     4f2:	f5 d4       	rcall	.+2538   	; 0xede <delay>
     4f4:	8e 81       	ldd	r24, Y+6	; 0x06
     4f6:	9f 81       	ldd	r25, Y+7	; 0x07
     4f8:	88 0f       	add	r24, r24
      led_shift_register_write(shift_register, shift_register->led_state);
	  delay(200);
    }
    
    led_shift_register_reset(shift_register);
}
     4fa:	99 1f       	adc	r25, r25
    {
      led_shift_register_write(shift_register, shift_register->led_state);
	  delay(200);
    }
    
    led_shift_register_reset(shift_register);
     4fc:	ed cf       	rjmp	.-38     	; 0x4d8 <led_shift_register_test+0xa>
     4fe:	df 91       	pop	r29
     500:	cf 91       	pop	r28
     502:	df cf       	rjmp	.-66     	; 0x4c2 <led_shift_register_reset>

00000504 <led_shift_register_on>:
    led_shift_register_write(shift_register, shift_register->led_state);
}

void led_shift_register_on(led_shift_register* shift_register, info_led_type led)
{
  shift_register->led_state = shift_register->led_state & (short)led;
     504:	70 e0       	ldi	r23, 0x00	; 0
     506:	fc 01       	movw	r30, r24
     508:	26 81       	ldd	r18, Z+6	; 0x06
     50a:	37 81       	ldd	r19, Z+7	; 0x07
     50c:	62 23       	and	r22, r18
     50e:	73 23       	and	r23, r19
     510:	77 83       	std	Z+7, r23	; 0x07
  led_shift_register_write(shift_register, shift_register->led_state);
     512:	66 83       	std	Z+6, r22	; 0x06
     514:	84 cf       	rjmp	.-248    	; 0x41e <led_shift_register_write>

00000516 <led_shift_register_off>:
}

void led_shift_register_off(led_shift_register* shift_register, info_led_type led)
{
  shift_register->led_state = shift_register->led_state & (!(short)led);
     516:	41 e0       	ldi	r20, 0x01	; 1
     518:	50 e0       	ldi	r21, 0x00	; 0
     51a:	66 23       	and	r22, r22
     51c:	11 f0       	breq	.+4      	; 0x522 <led_shift_register_off+0xc>
     51e:	40 e0       	ldi	r20, 0x00	; 0
     520:	50 e0       	ldi	r21, 0x00	; 0
     522:	fc 01       	movw	r30, r24
     524:	26 81       	ldd	r18, Z+6	; 0x06
     526:	37 81       	ldd	r19, Z+7	; 0x07
     528:	ba 01       	movw	r22, r20
     52a:	62 23       	and	r22, r18
     52c:	73 23       	and	r23, r19
     52e:	77 83       	std	Z+7, r23	; 0x07
  led_shift_register_write(shift_register, shift_register->led_state);
     530:	66 83       	std	Z+6, r22	; 0x06
     532:	75 cf       	rjmp	.-278    	; 0x41e <led_shift_register_write>

00000534 <light_control_leds_create>:
#include "light_control_leds.h"

light_control_leds * light_control_leds_create(led_shift_register * shift_register)
{
     534:	cf 93       	push	r28
     536:	df 93       	push	r29
     538:	ec 01       	movw	r28, r24
  light_control_leds *leds_control = malloc(sizeof(light_control_leds));
     53a:	89 e0       	ldi	r24, 0x09	; 9
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	98 d6       	rcall	.+3376   	; 0x1270 <malloc>
     540:	fc 01       	movw	r30, r24
  
  leds_control->avaible_states[0] = LIGHT_LED_OFF;
     542:	14 82       	std	Z+4, r1	; 0x04
  leds_control->avaible_states[1] = LIGHT_LED_MIN;
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	85 83       	std	Z+5, r24	; 0x05
  leds_control->avaible_states[2] = LIGHT_LED_MID;
     548:	84 e0       	ldi	r24, 0x04	; 4
     54a:	86 83       	std	Z+6, r24	; 0x06
  leds_control->avaible_states[3] = LIGHT_LED_HIGH;
     54c:	80 e1       	ldi	r24, 0x10	; 16
     54e:	87 83       	std	Z+7, r24	; 0x07
  leds_control->avaible_states[4] = LIGHT_LED_FULL;
     550:	80 e4       	ldi	r24, 0x40	; 64
     552:	80 87       	std	Z+8, r24	; 0x08
  //points to first element in state array
  leds_control->actual_led_state = leds_control->avaible_states;
     554:	cf 01       	movw	r24, r30
     556:	04 96       	adiw	r24, 0x04	; 4
     558:	93 83       	std	Z+3, r25	; 0x03
     55a:	82 83       	std	Z+2, r24	; 0x02
  leds_control->shift_register = shift_register;
     55c:	d1 83       	std	Z+1, r29	; 0x01
     55e:	c0 83       	st	Z, r28
  
  return leds_control;
}
     560:	cf 01       	movw	r24, r30
     562:	df 91       	pop	r29
     564:	cf 91       	pop	r28
     566:	08 95       	ret

00000568 <light_control_leds_next>:


void light_control_leds_next(light_control_leds * leds)
{
     568:	cf 93       	push	r28
     56a:	df 93       	push	r29
     56c:	ec 01       	movw	r28, r24
  led_shift_register_off(leds->shift_register, *leds->actual_led_state);
     56e:	ea 81       	ldd	r30, Y+2	; 0x02
     570:	fb 81       	ldd	r31, Y+3	; 0x03
     572:	60 81       	ld	r22, Z
     574:	88 81       	ld	r24, Y
     576:	99 81       	ldd	r25, Y+1	; 0x01
     578:	ce df       	rcall	.-100    	; 0x516 <led_shift_register_off>
  delay(100);
     57a:	64 e6       	ldi	r22, 0x64	; 100
     57c:	70 e0       	ldi	r23, 0x00	; 0
     57e:	80 e0       	ldi	r24, 0x00	; 0
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	ad d4       	rcall	.+2394   	; 0xede <delay>
  if(leds->actual_led_state == &leds->avaible_states[4])
     584:	8a 81       	ldd	r24, Y+2	; 0x02
     586:	9b 81       	ldd	r25, Y+3	; 0x03
     588:	9e 01       	movw	r18, r28
     58a:	28 5f       	subi	r18, 0xF8	; 248
     58c:	3f 4f       	sbci	r19, 0xFF	; 255
     58e:	82 17       	cp	r24, r18
     590:	93 07       	cpc	r25, r19
     592:	19 f4       	brne	.+6      	; 0x59a <light_control_leds_next+0x32>
  {
    leds->actual_led_state = leds->avaible_states;
     594:	ce 01       	movw	r24, r28
     596:	04 96       	adiw	r24, 0x04	; 4
     598:	01 c0       	rjmp	.+2      	; 0x59c <light_control_leds_next+0x34>
  }
  else
  {
    ++leds->actual_led_state;
     59a:	01 96       	adiw	r24, 0x01	; 1
     59c:	9b 83       	std	Y+3, r25	; 0x03
     59e:	8a 83       	std	Y+2, r24	; 0x02
  }
  led_shift_register_on(leds->shift_register, *leds->actual_led_state);
     5a0:	ea 81       	ldd	r30, Y+2	; 0x02
     5a2:	fb 81       	ldd	r31, Y+3	; 0x03
     5a4:	60 81       	ld	r22, Z
     5a6:	88 81       	ld	r24, Y
     5a8:	99 81       	ldd	r25, Y+1	; 0x01
  }
  else
  {
    ++leds->actual_led_state;
  }
  led_shift_register_on(leds->shift_register, *leds->actual_led_state);
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	aa cf       	rjmp	.-172    	; 0x504 <led_shift_register_on>

000005b0 <_ZN13LiquidCrystal11pulseEnableEv>:
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
}
     5b0:	cf 93       	push	r28
     5b2:	df 93       	push	r29
     5b4:	ec 01       	movw	r28, r24
     5b6:	60 e0       	ldi	r22, 0x00	; 0
     5b8:	8e 81       	ldd	r24, Y+6	; 0x06
     5ba:	ed d5       	rcall	.+3034   	; 0x1196 <digitalWrite>
     5bc:	81 e0       	ldi	r24, 0x01	; 1
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	c7 d4       	rcall	.+2446   	; 0xf50 <delayMicroseconds>
     5c2:	61 e0       	ldi	r22, 0x01	; 1
     5c4:	8e 81       	ldd	r24, Y+6	; 0x06
     5c6:	e7 d5       	rcall	.+3022   	; 0x1196 <digitalWrite>
     5c8:	81 e0       	ldi	r24, 0x01	; 1
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	c1 d4       	rcall	.+2434   	; 0xf50 <delayMicroseconds>
     5ce:	60 e0       	ldi	r22, 0x00	; 0
     5d0:	8e 81       	ldd	r24, Y+6	; 0x06
     5d2:	e1 d5       	rcall	.+3010   	; 0x1196 <digitalWrite>
     5d4:	84 e6       	ldi	r24, 0x64	; 100
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	df 91       	pop	r29
     5da:	cf 91       	pop	r28
     5dc:	b9 c4       	rjmp	.+2418   	; 0xf50 <delayMicroseconds>

000005de <_ZN13LiquidCrystal10write4bitsEh>:
     5de:	cf 92       	push	r12
     5e0:	df 92       	push	r13
     5e2:	ef 92       	push	r14
     5e4:	ff 92       	push	r15
     5e6:	0f 93       	push	r16
     5e8:	1f 93       	push	r17
     5ea:	cf 93       	push	r28
     5ec:	df 93       	push	r29
     5ee:	6c 01       	movw	r12, r24
     5f0:	7c 01       	movw	r14, r24
     5f2:	87 e0       	ldi	r24, 0x07	; 7
     5f4:	e8 0e       	add	r14, r24
     5f6:	f1 1c       	adc	r15, r1
     5f8:	c0 e0       	ldi	r28, 0x00	; 0
     5fa:	d0 e0       	ldi	r29, 0x00	; 0
     5fc:	06 2f       	mov	r16, r22
     5fe:	10 e0       	ldi	r17, 0x00	; 0
     600:	b8 01       	movw	r22, r16
     602:	0c 2e       	mov	r0, r28
     604:	02 c0       	rjmp	.+4      	; 0x60a <_ZN13LiquidCrystal10write4bitsEh+0x2c>
     606:	75 95       	asr	r23
     608:	67 95       	ror	r22
     60a:	0a 94       	dec	r0
     60c:	e2 f7       	brpl	.-8      	; 0x606 <_ZN13LiquidCrystal10write4bitsEh+0x28>
     60e:	61 70       	andi	r22, 0x01	; 1
     610:	f7 01       	movw	r30, r14
     612:	81 91       	ld	r24, Z+
     614:	7f 01       	movw	r14, r30
     616:	bf d5       	rcall	.+2942   	; 0x1196 <digitalWrite>
     618:	21 96       	adiw	r28, 0x01	; 1
     61a:	c4 30       	cpi	r28, 0x04	; 4
     61c:	d1 05       	cpc	r29, r1
     61e:	81 f7       	brne	.-32     	; 0x600 <_ZN13LiquidCrystal10write4bitsEh+0x22>
     620:	c6 01       	movw	r24, r12
     622:	df 91       	pop	r29
     624:	cf 91       	pop	r28
     626:	1f 91       	pop	r17
     628:	0f 91       	pop	r16
     62a:	ff 90       	pop	r15
     62c:	ef 90       	pop	r14
     62e:	df 90       	pop	r13
     630:	cf 90       	pop	r12
     632:	be cf       	rjmp	.-132    	; 0x5b0 <_ZN13LiquidCrystal11pulseEnableEv>

00000634 <_ZN13LiquidCrystal10write8bitsEh>:
     634:	cf 92       	push	r12
     636:	df 92       	push	r13
     638:	ef 92       	push	r14
     63a:	ff 92       	push	r15
     63c:	0f 93       	push	r16
     63e:	1f 93       	push	r17
     640:	cf 93       	push	r28
     642:	df 93       	push	r29
     644:	6c 01       	movw	r12, r24
     646:	7c 01       	movw	r14, r24
     648:	87 e0       	ldi	r24, 0x07	; 7
     64a:	e8 0e       	add	r14, r24
     64c:	f1 1c       	adc	r15, r1
     64e:	c0 e0       	ldi	r28, 0x00	; 0
     650:	d0 e0       	ldi	r29, 0x00	; 0
     652:	06 2f       	mov	r16, r22
     654:	10 e0       	ldi	r17, 0x00	; 0
     656:	b8 01       	movw	r22, r16
     658:	0c 2e       	mov	r0, r28
     65a:	02 c0       	rjmp	.+4      	; 0x660 <_ZN13LiquidCrystal10write8bitsEh+0x2c>
     65c:	75 95       	asr	r23
     65e:	67 95       	ror	r22
     660:	0a 94       	dec	r0
     662:	e2 f7       	brpl	.-8      	; 0x65c <_ZN13LiquidCrystal10write8bitsEh+0x28>
     664:	61 70       	andi	r22, 0x01	; 1
     666:	f7 01       	movw	r30, r14
     668:	81 91       	ld	r24, Z+
     66a:	7f 01       	movw	r14, r30
     66c:	94 d5       	rcall	.+2856   	; 0x1196 <digitalWrite>
     66e:	21 96       	adiw	r28, 0x01	; 1
     670:	c8 30       	cpi	r28, 0x08	; 8
     672:	d1 05       	cpc	r29, r1
     674:	81 f7       	brne	.-32     	; 0x656 <_ZN13LiquidCrystal10write8bitsEh+0x22>
     676:	c6 01       	movw	r24, r12
     678:	df 91       	pop	r29
     67a:	cf 91       	pop	r28
     67c:	1f 91       	pop	r17
     67e:	0f 91       	pop	r16
     680:	ff 90       	pop	r15
     682:	ef 90       	pop	r14
     684:	df 90       	pop	r13
     686:	cf 90       	pop	r12
     688:	93 cf       	rjmp	.-218    	; 0x5b0 <_ZN13LiquidCrystal11pulseEnableEv>

0000068a <_ZN13LiquidCrystal4sendEhh>:
     68a:	1f 93       	push	r17
     68c:	cf 93       	push	r28
     68e:	df 93       	push	r29
     690:	ec 01       	movw	r28, r24
     692:	16 2f       	mov	r17, r22
     694:	64 2f       	mov	r22, r20
     696:	8c 81       	ldd	r24, Y+4	; 0x04
     698:	7e d5       	rcall	.+2812   	; 0x1196 <digitalWrite>
     69a:	8d 81       	ldd	r24, Y+5	; 0x05
     69c:	8f 3f       	cpi	r24, 0xFF	; 255
     69e:	11 f0       	breq	.+4      	; 0x6a4 <_ZN13LiquidCrystal4sendEhh+0x1a>
     6a0:	60 e0       	ldi	r22, 0x00	; 0
     6a2:	79 d5       	rcall	.+2802   	; 0x1196 <digitalWrite>
     6a4:	8f 85       	ldd	r24, Y+15	; 0x0f
     6a6:	61 2f       	mov	r22, r17
     6a8:	84 ff       	sbrs	r24, 4
     6aa:	05 c0       	rjmp	.+10     	; 0x6b6 <_ZN13LiquidCrystal4sendEhh+0x2c>
     6ac:	ce 01       	movw	r24, r28
     6ae:	df 91       	pop	r29
     6b0:	cf 91       	pop	r28
     6b2:	1f 91       	pop	r17
     6b4:	bf cf       	rjmp	.-130    	; 0x634 <_ZN13LiquidCrystal10write8bitsEh>
     6b6:	70 e0       	ldi	r23, 0x00	; 0
     6b8:	84 e0       	ldi	r24, 0x04	; 4
     6ba:	75 95       	asr	r23
     6bc:	67 95       	ror	r22
     6be:	8a 95       	dec	r24
     6c0:	e1 f7       	brne	.-8      	; 0x6ba <_ZN13LiquidCrystal4sendEhh+0x30>
     6c2:	ce 01       	movw	r24, r28
     6c4:	8c df       	rcall	.-232    	; 0x5de <_ZN13LiquidCrystal10write4bitsEh>
     6c6:	61 2f       	mov	r22, r17
     6c8:	ce 01       	movw	r24, r28
     6ca:	df 91       	pop	r29
     6cc:	cf 91       	pop	r28
     6ce:	1f 91       	pop	r17
     6d0:	86 cf       	rjmp	.-244    	; 0x5de <_ZN13LiquidCrystal10write4bitsEh>

000006d2 <_ZN13LiquidCrystal7commandEh>:
     6d2:	40 e0       	ldi	r20, 0x00	; 0
     6d4:	da cf       	rjmp	.-76     	; 0x68a <_ZN13LiquidCrystal4sendEhh>

000006d6 <_ZN13LiquidCrystal5clearEv>:
     6d6:	61 e0       	ldi	r22, 0x01	; 1
     6d8:	fc df       	rcall	.-8      	; 0x6d2 <_ZN13LiquidCrystal7commandEh>
     6da:	80 ed       	ldi	r24, 0xD0	; 208
     6dc:	97 e0       	ldi	r25, 0x07	; 7
     6de:	38 c4       	rjmp	.+2160   	; 0xf50 <delayMicroseconds>

000006e0 <_ZN13LiquidCrystal9setCursorEhh>:
     6e0:	fc 01       	movw	r30, r24
     6e2:	44 30       	cpi	r20, 0x04	; 4
     6e4:	08 f0       	brcs	.+2      	; 0x6e8 <_ZN13LiquidCrystal9setCursorEhh+0x8>
     6e6:	43 e0       	ldi	r20, 0x03	; 3
     6e8:	83 89       	ldd	r24, Z+19	; 0x13
     6ea:	48 17       	cp	r20, r24
     6ec:	10 f0       	brcs	.+4      	; 0x6f2 <_ZN13LiquidCrystal9setCursorEhh+0x12>
     6ee:	4f ef       	ldi	r20, 0xFF	; 255
     6f0:	48 0f       	add	r20, r24
     6f2:	df 01       	movw	r26, r30
     6f4:	a4 0f       	add	r26, r20
     6f6:	b1 1d       	adc	r27, r1
     6f8:	54 96       	adiw	r26, 0x14	; 20
     6fa:	9c 91       	ld	r25, X
     6fc:	69 0f       	add	r22, r25
     6fe:	60 68       	ori	r22, 0x80	; 128
     700:	cf 01       	movw	r24, r30
     702:	e7 cf       	rjmp	.-50     	; 0x6d2 <_ZN13LiquidCrystal7commandEh>

00000704 <_ZN13LiquidCrystal7displayEv>:
     704:	fc 01       	movw	r30, r24
     706:	60 89       	ldd	r22, Z+16	; 0x10
     708:	26 2f       	mov	r18, r22
     70a:	24 60       	ori	r18, 0x04	; 4
     70c:	20 8b       	std	Z+16, r18	; 0x10
     70e:	6c 60       	ori	r22, 0x0C	; 12
     710:	e0 cf       	rjmp	.-64     	; 0x6d2 <_ZN13LiquidCrystal7commandEh>

00000712 <_ZN13LiquidCrystal5beginEhhh>:
     712:	ef 92       	push	r14
     714:	ff 92       	push	r15
     716:	0f 93       	push	r16
     718:	1f 93       	push	r17
     71a:	cf 93       	push	r28
     71c:	df 93       	push	r29
     71e:	ec 01       	movw	r28, r24
     720:	42 30       	cpi	r20, 0x02	; 2
     722:	18 f0       	brcs	.+6      	; 0x72a <_ZN13LiquidCrystal5beginEhhh+0x18>
     724:	8f 85       	ldd	r24, Y+15	; 0x0f
     726:	88 60       	ori	r24, 0x08	; 8
     728:	8f 87       	std	Y+15, r24	; 0x0f
     72a:	4b 8b       	std	Y+19, r20	; 0x13
     72c:	1c 8a       	std	Y+20, r1	; 0x14
     72e:	80 e4       	ldi	r24, 0x40	; 64
     730:	8d 8b       	std	Y+21, r24	; 0x15
     732:	6e 8b       	std	Y+22, r22	; 0x16
     734:	70 e0       	ldi	r23, 0x00	; 0
     736:	60 5c       	subi	r22, 0xC0	; 192
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 8b       	std	Y+23, r22	; 0x17
     73c:	22 23       	and	r18, r18
     73e:	29 f0       	breq	.+10     	; 0x74a <_ZN13LiquidCrystal5beginEhhh+0x38>
     740:	41 30       	cpi	r20, 0x01	; 1
     742:	19 f4       	brne	.+6      	; 0x74a <_ZN13LiquidCrystal5beginEhhh+0x38>
     744:	8f 85       	ldd	r24, Y+15	; 0x0f
     746:	84 60       	ori	r24, 0x04	; 4
     748:	8f 87       	std	Y+15, r24	; 0x0f
     74a:	61 e0       	ldi	r22, 0x01	; 1
     74c:	8c 81       	ldd	r24, Y+4	; 0x04
     74e:	e7 d4       	rcall	.+2510   	; 0x111e <pinMode>
     750:	8d 81       	ldd	r24, Y+5	; 0x05
     752:	8f 3f       	cpi	r24, 0xFF	; 255
     754:	11 f0       	breq	.+4      	; 0x75a <_ZN13LiquidCrystal5beginEhhh+0x48>
     756:	61 e0       	ldi	r22, 0x01	; 1
     758:	e2 d4       	rcall	.+2500   	; 0x111e <pinMode>
     75a:	61 e0       	ldi	r22, 0x01	; 1
     75c:	8e 81       	ldd	r24, Y+6	; 0x06
     75e:	df d4       	rcall	.+2494   	; 0x111e <pinMode>
     760:	7e 01       	movw	r14, r28
     762:	87 e0       	ldi	r24, 0x07	; 7
     764:	e8 0e       	add	r14, r24
     766:	f1 1c       	adc	r15, r1
     768:	00 e0       	ldi	r16, 0x00	; 0
     76a:	10 e0       	ldi	r17, 0x00	; 0
     76c:	8f 85       	ldd	r24, Y+15	; 0x0f
     76e:	84 fd       	sbrc	r24, 4
     770:	03 c0       	rjmp	.+6      	; 0x778 <_ZN13LiquidCrystal5beginEhhh+0x66>
     772:	84 e0       	ldi	r24, 0x04	; 4
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	02 c0       	rjmp	.+4      	; 0x77c <_ZN13LiquidCrystal5beginEhhh+0x6a>
     778:	88 e0       	ldi	r24, 0x08	; 8
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	08 17       	cp	r16, r24
     77e:	19 07       	cpc	r17, r25
     780:	44 f4       	brge	.+16     	; 0x792 <_ZN13LiquidCrystal5beginEhhh+0x80>
     782:	61 e0       	ldi	r22, 0x01	; 1
     784:	f7 01       	movw	r30, r14
     786:	81 91       	ld	r24, Z+
     788:	7f 01       	movw	r14, r30
     78a:	c9 d4       	rcall	.+2450   	; 0x111e <pinMode>
     78c:	0f 5f       	subi	r16, 0xFF	; 255
     78e:	1f 4f       	sbci	r17, 0xFF	; 255
     790:	ed cf       	rjmp	.-38     	; 0x76c <_ZN13LiquidCrystal5beginEhhh+0x5a>
     792:	80 e5       	ldi	r24, 0x50	; 80
     794:	93 ec       	ldi	r25, 0xC3	; 195
     796:	dc d3       	rcall	.+1976   	; 0xf50 <delayMicroseconds>
     798:	60 e0       	ldi	r22, 0x00	; 0
     79a:	8c 81       	ldd	r24, Y+4	; 0x04
     79c:	fc d4       	rcall	.+2552   	; 0x1196 <digitalWrite>
     79e:	60 e0       	ldi	r22, 0x00	; 0
     7a0:	8e 81       	ldd	r24, Y+6	; 0x06
     7a2:	f9 d4       	rcall	.+2546   	; 0x1196 <digitalWrite>
     7a4:	8d 81       	ldd	r24, Y+5	; 0x05
     7a6:	8f 3f       	cpi	r24, 0xFF	; 255
     7a8:	11 f0       	breq	.+4      	; 0x7ae <_ZN13LiquidCrystal5beginEhhh+0x9c>
     7aa:	60 e0       	ldi	r22, 0x00	; 0
     7ac:	f4 d4       	rcall	.+2536   	; 0x1196 <digitalWrite>
     7ae:	6f 85       	ldd	r22, Y+15	; 0x0f
     7b0:	64 fd       	sbrc	r22, 4
     7b2:	16 c0       	rjmp	.+44     	; 0x7e0 <_ZN13LiquidCrystal5beginEhhh+0xce>
     7b4:	63 e0       	ldi	r22, 0x03	; 3
     7b6:	ce 01       	movw	r24, r28
     7b8:	12 df       	rcall	.-476    	; 0x5de <_ZN13LiquidCrystal10write4bitsEh>
     7ba:	84 e9       	ldi	r24, 0x94	; 148
     7bc:	91 e1       	ldi	r25, 0x11	; 17
     7be:	c8 d3       	rcall	.+1936   	; 0xf50 <delayMicroseconds>
     7c0:	63 e0       	ldi	r22, 0x03	; 3
     7c2:	ce 01       	movw	r24, r28
     7c4:	0c df       	rcall	.-488    	; 0x5de <_ZN13LiquidCrystal10write4bitsEh>
     7c6:	84 e9       	ldi	r24, 0x94	; 148
     7c8:	91 e1       	ldi	r25, 0x11	; 17
     7ca:	c2 d3       	rcall	.+1924   	; 0xf50 <delayMicroseconds>
     7cc:	63 e0       	ldi	r22, 0x03	; 3
     7ce:	ce 01       	movw	r24, r28
     7d0:	06 df       	rcall	.-500    	; 0x5de <_ZN13LiquidCrystal10write4bitsEh>
     7d2:	86 e9       	ldi	r24, 0x96	; 150
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	bc d3       	rcall	.+1912   	; 0xf50 <delayMicroseconds>
     7d8:	62 e0       	ldi	r22, 0x02	; 2
     7da:	ce 01       	movw	r24, r28
     7dc:	00 df       	rcall	.-512    	; 0x5de <_ZN13LiquidCrystal10write4bitsEh>
     7de:	11 c0       	rjmp	.+34     	; 0x802 <_ZN13LiquidCrystal5beginEhhh+0xf0>
     7e0:	60 62       	ori	r22, 0x20	; 32
     7e2:	ce 01       	movw	r24, r28
     7e4:	76 df       	rcall	.-276    	; 0x6d2 <_ZN13LiquidCrystal7commandEh>
     7e6:	84 e9       	ldi	r24, 0x94	; 148
     7e8:	91 e1       	ldi	r25, 0x11	; 17
     7ea:	b2 d3       	rcall	.+1892   	; 0xf50 <delayMicroseconds>
     7ec:	6f 85       	ldd	r22, Y+15	; 0x0f
     7ee:	60 62       	ori	r22, 0x20	; 32
     7f0:	ce 01       	movw	r24, r28
     7f2:	6f df       	rcall	.-290    	; 0x6d2 <_ZN13LiquidCrystal7commandEh>
     7f4:	86 e9       	ldi	r24, 0x96	; 150
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	ab d3       	rcall	.+1878   	; 0xf50 <delayMicroseconds>
     7fa:	6f 85       	ldd	r22, Y+15	; 0x0f
     7fc:	60 62       	ori	r22, 0x20	; 32
     7fe:	ce 01       	movw	r24, r28
     800:	68 df       	rcall	.-304    	; 0x6d2 <_ZN13LiquidCrystal7commandEh>
     802:	6f 85       	ldd	r22, Y+15	; 0x0f
     804:	60 62       	ori	r22, 0x20	; 32
     806:	ce 01       	movw	r24, r28
     808:	64 df       	rcall	.-312    	; 0x6d2 <_ZN13LiquidCrystal7commandEh>
     80a:	84 e0       	ldi	r24, 0x04	; 4
     80c:	88 8b       	std	Y+16, r24	; 0x10
     80e:	ce 01       	movw	r24, r28
     810:	79 df       	rcall	.-270    	; 0x704 <_ZN13LiquidCrystal7displayEv>
     812:	ce 01       	movw	r24, r28
     814:	60 df       	rcall	.-320    	; 0x6d6 <_ZN13LiquidCrystal5clearEv>
     816:	82 e0       	ldi	r24, 0x02	; 2
     818:	89 8b       	std	Y+17, r24	; 0x11
     81a:	66 e0       	ldi	r22, 0x06	; 6
     81c:	ce 01       	movw	r24, r28
     81e:	df 91       	pop	r29
     820:	cf 91       	pop	r28
     822:	1f 91       	pop	r17
     824:	0f 91       	pop	r16
     826:	ff 90       	pop	r15
     828:	ef 90       	pop	r14
     82a:	53 cf       	rjmp	.-346    	; 0x6d2 <_ZN13LiquidCrystal7commandEh>

0000082c <_ZN13LiquidCrystalC1Ehhhhhh>:
     82c:	cf 92       	push	r12
     82e:	ef 92       	push	r14
     830:	0f 93       	push	r16
     832:	fc 01       	movw	r30, r24
     834:	13 82       	std	Z+3, r1	; 0x03
     836:	12 82       	std	Z+2, r1	; 0x02
     838:	8e e5       	ldi	r24, 0x5E	; 94
     83a:	92 e0       	ldi	r25, 0x02	; 2
     83c:	91 83       	std	Z+1, r25	; 0x01
     83e:	80 83       	st	Z, r24
     840:	64 83       	std	Z+4, r22	; 0x04
     842:	8f ef       	ldi	r24, 0xFF	; 255
     844:	85 83       	std	Z+5, r24	; 0x05
     846:	46 83       	std	Z+6, r20	; 0x06
     848:	27 83       	std	Z+7, r18	; 0x07
     84a:	00 87       	std	Z+8, r16	; 0x08
     84c:	e1 86       	std	Z+9, r14	; 0x09
     84e:	c2 86       	std	Z+10, r12	; 0x0a
     850:	13 86       	std	Z+11, r1	; 0x0b
     852:	14 86       	std	Z+12, r1	; 0x0c
     854:	15 86       	std	Z+13, r1	; 0x0d
     856:	16 86       	std	Z+14, r1	; 0x0e
     858:	17 86       	std	Z+15, r1	; 0x0f
     85a:	20 e0       	ldi	r18, 0x00	; 0
     85c:	41 e0       	ldi	r20, 0x01	; 1
     85e:	60 e1       	ldi	r22, 0x10	; 16
     860:	cf 01       	movw	r24, r30
     862:	0f 91       	pop	r16
     864:	ef 90       	pop	r14
     866:	cf 90       	pop	r12
     868:	54 cf       	rjmp	.-344    	; 0x712 <_ZN13LiquidCrystal5beginEhhh>

0000086a <_ZN13LiquidCrystal5writeEh>:
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
     86a:	41 e0       	ldi	r20, 0x01	; 1
     86c:	0e df       	rcall	.-484    	; 0x68a <_ZN13LiquidCrystal4sendEhh>
  return 1; // assume sucess
}
     86e:	81 e0       	ldi	r24, 0x01	; 1
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	08 95       	ret

00000874 <lcd_get>:
		return new LiquidCrystal(rs, enable, d0, d1, d2, d3);
	 }

	 void lcd_free(LiquidCrystal * lcd)
	 {
		delete lcd;
     874:	bf 92       	push	r11
     876:	cf 92       	push	r12
     878:	df 92       	push	r13
     87a:	ef 92       	push	r14
     87c:	ff 92       	push	r15
     87e:	0f 93       	push	r16
     880:	1f 93       	push	r17
     882:	cf 93       	push	r28
     884:	df 93       	push	r29
     886:	18 2f       	mov	r17, r24
     888:	f6 2e       	mov	r15, r22
     88a:	d4 2e       	mov	r13, r20
     88c:	b2 2e       	mov	r11, r18
     88e:	88 e1       	ldi	r24, 0x18	; 24
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	a9 d0       	rcall	.+338    	; 0x9e6 <_Znwj>
     894:	ec 01       	movw	r28, r24
     896:	ce 2c       	mov	r12, r14
     898:	e0 2e       	mov	r14, r16
     89a:	0b 2d       	mov	r16, r11
     89c:	2d 2d       	mov	r18, r13
     89e:	4f 2d       	mov	r20, r15
     8a0:	61 2f       	mov	r22, r17
     8a2:	c4 df       	rcall	.-120    	; 0x82c <_ZN13LiquidCrystalC1Ehhhhhh>
     8a4:	ce 01       	movw	r24, r28
     8a6:	df 91       	pop	r29
     8a8:	cf 91       	pop	r28
     8aa:	1f 91       	pop	r17
     8ac:	0f 91       	pop	r16
     8ae:	ff 90       	pop	r15
     8b0:	ef 90       	pop	r14
     8b2:	df 90       	pop	r13
     8b4:	cf 90       	pop	r12
     8b6:	bf 90       	pop	r11
     8b8:	08 95       	ret

000008ba <lcd_begin>:
	 }

	 void lcd_begin(LiquidCrystal *lcd, uint8_t cols, uint8_t rows)
	 {
		lcd->begin(cols, rows);
     8ba:	20 e0       	ldi	r18, 0x00	; 0
     8bc:	2a cf       	rjmp	.-428    	; 0x712 <_ZN13LiquidCrystal5beginEhhh>

000008be <lcd_clear>:
	 }

	 void lcd_clear(LiquidCrystal *lcd)
	 {
     8be:	0b cf       	rjmp	.-490    	; 0x6d6 <_ZN13LiquidCrystal5clearEv>

000008c0 <lcd_set_cursor>:
     8c0:	0f cf       	rjmp	.-482    	; 0x6e0 <_ZN13LiquidCrystal9setCursorEhh>

000008c2 <lcd_print>:
     8c2:	d1 c0       	rjmp	.+418    	; 0xa66 <_ZN5Print5printEPKc>

000008c4 <setup>:

controller rc_controller;

void setup() {
  // put your setup code here, to run once:
  controller_initialize(&rc_controller);
     8c4:	8b e6       	ldi	r24, 0x6B	; 107
     8c6:	92 e0       	ldi	r25, 0x02	; 2
     8c8:	0f cd       	rjmp	.-1506   	; 0x2e8 <controller_initialize>

000008ca <loop>:
}

void loop() {
     8ca:	08 95       	ret

000008cc <tact_switch_board_create>:
#include "tact_switch_board.h"

tact_switch_board *tact_switch_board_create(char data_pin, char interrupt_pin)
{
     8cc:	0f 93       	push	r16
     8ce:	1f 93       	push	r17
     8d0:	cf 93       	push	r28
     8d2:	df 93       	push	r29
     8d4:	18 2f       	mov	r17, r24
     8d6:	06 2f       	mov	r16, r22
	tact_switch_board *circuit = malloc(sizeof(tact_switch_board));
     8d8:	86 e1       	ldi	r24, 0x16	; 22
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	c9 d4       	rcall	.+2450   	; 0x1270 <malloc>
     8de:	ec 01       	movw	r28, r24
	circuit->data_pin = data_pin;
     8e0:	18 83       	st	Y, r17
	circuit->interrupt_pin = interrupt_pin;
     8e2:	09 83       	std	Y+1, r16	; 0x01
	
	circuit->buttons[0] = (analog_button){ .minimum = 692, .maximum = 702, .type = LIGHT_BUTTON};
     8e4:	85 e0       	ldi	r24, 0x05	; 5
     8e6:	e7 e1       	ldi	r30, 0x17	; 23
     8e8:	f2 e0       	ldi	r31, 0x02	; 2
     8ea:	de 01       	movw	r26, r28
     8ec:	12 96       	adiw	r26, 0x02	; 2
     8ee:	01 90       	ld	r0, Z+
     8f0:	0d 92       	st	X+, r0
     8f2:	8a 95       	dec	r24
     8f4:	e1 f7       	brne	.-8      	; 0x8ee <tact_switch_board_create+0x22>
	circuit->buttons[1] = (analog_button){ .minimum = 830, .maximum = 840, .type = BUTTON_2};
     8f6:	85 e0       	ldi	r24, 0x05	; 5
     8f8:	ec e1       	ldi	r30, 0x1C	; 28
     8fa:	f2 e0       	ldi	r31, 0x02	; 2
     8fc:	de 01       	movw	r26, r28
     8fe:	17 96       	adiw	r26, 0x07	; 7
     900:	01 90       	ld	r0, Z+
     902:	0d 92       	st	X+, r0
     904:	8a 95       	dec	r24
     906:	e1 f7       	brne	.-8      	; 0x900 <tact_switch_board_create+0x34>
	circuit->buttons[2] = (analog_button){ .minimum = 922, .maximum = 932, .type = BUTTON_3};
     908:	85 e0       	ldi	r24, 0x05	; 5
     90a:	e1 e2       	ldi	r30, 0x21	; 33
     90c:	f2 e0       	ldi	r31, 0x02	; 2
     90e:	de 01       	movw	r26, r28
     910:	1c 96       	adiw	r26, 0x0c	; 12
     912:	01 90       	ld	r0, Z+
     914:	0d 92       	st	X+, r0
     916:	8a 95       	dec	r24
     918:	e1 f7       	brne	.-8      	; 0x912 <tact_switch_board_create+0x46>
	circuit->buttons[3] = (analog_button){ .minimum = 969, .maximum = 979, .type = OPTIONS_BUTTON};
     91a:	85 e0       	ldi	r24, 0x05	; 5
     91c:	e6 e2       	ldi	r30, 0x26	; 38
     91e:	f2 e0       	ldi	r31, 0x02	; 2
     920:	de 01       	movw	r26, r28
     922:	51 96       	adiw	r26, 0x11	; 17
     924:	01 90       	ld	r0, Z+
     926:	0d 92       	st	X+, r0
     928:	8a 95       	dec	r24
     92a:	e1 f7       	brne	.-8      	; 0x924 <tact_switch_board_create+0x58>

	pinMode(circuit->data_pin, INPUT);
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	81 2f       	mov	r24, r17
     930:	f6 d3       	rcall	.+2028   	; 0x111e <pinMode>

	return circuit;
}
     932:	ce 01       	movw	r24, r28
     934:	df 91       	pop	r29
     936:	cf 91       	pop	r28
     938:	1f 91       	pop	r17
     93a:	0f 91       	pop	r16
     93c:	08 95       	ret

0000093e <tact_switch_button_pressed>:

analog_button tact_switch_button_pressed(tact_switch_board *switches, int value)
{
     93e:	0f 93       	push	r16
     940:	1f 93       	push	r17
     942:	cf 93       	push	r28
     944:	df 93       	push	r29
     946:	cd b7       	in	r28, 0x3d	; 61
     948:	de b7       	in	r29, 0x3e	; 62
     94a:	2a 97       	sbiw	r28, 0x0a	; 10
     94c:	0f b6       	in	r0, 0x3f	; 63
     94e:	f8 94       	cli
     950:	de bf       	out	0x3e, r29	; 62
     952:	0f be       	out	0x3f, r0	; 63
     954:	cd bf       	out	0x3d, r28	; 61
     956:	8c 01       	movw	r16, r24
     958:	0c 5e       	subi	r16, 0xEC	; 236
     95a:	1f 4f       	sbci	r17, 0xFF	; 255
    for(int index = 0; index < 4; ++index)
    {
	    analog_button button = switches->buttons[index];
     95c:	25 e0       	ldi	r18, 0x05	; 5
     95e:	fc 01       	movw	r30, r24
     960:	32 96       	adiw	r30, 0x02	; 2
     962:	de 01       	movw	r26, r28
     964:	16 96       	adiw	r26, 0x06	; 6
     966:	01 90       	ld	r0, Z+
     968:	0d 92       	st	X+, r0
     96a:	2a 95       	dec	r18
     96c:	e1 f7       	brne	.-8      	; 0x966 <tact_switch_button_pressed+0x28>
     96e:	fc 01       	movw	r30, r24
     970:	42 81       	ldd	r20, Z+2	; 0x02
     972:	53 81       	ldd	r21, Z+3	; 0x03
	    if(value > button.minimum && value < button.maximum)
     974:	46 17       	cp	r20, r22
     976:	57 07       	cpc	r21, r23
     978:	dc f4       	brge	.+54     	; 0x9b0 <tact_switch_button_pressed+0x72>

analog_button tact_switch_button_pressed(tact_switch_board *switches, int value)
{
    for(int index = 0; index < 4; ++index)
    {
	    analog_button button = switches->buttons[index];
     97a:	24 81       	ldd	r18, Z+4	; 0x04
     97c:	35 81       	ldd	r19, Z+5	; 0x05
	    if(value > button.minimum && value < button.maximum)
     97e:	62 17       	cp	r22, r18
     980:	73 07       	cpc	r23, r19
     982:	b4 f4       	brge	.+44     	; 0x9b0 <tact_switch_button_pressed+0x72>
	    {
		    return button;
     984:	5f 83       	std	Y+7, r21	; 0x07
     986:	4e 83       	std	Y+6, r20	; 0x06
     988:	39 87       	std	Y+9, r19	; 0x09
     98a:	28 87       	std	Y+8, r18	; 0x08
     98c:	85 e0       	ldi	r24, 0x05	; 5
     98e:	fe 01       	movw	r30, r28
     990:	36 96       	adiw	r30, 0x06	; 6
     992:	de 01       	movw	r26, r28
     994:	11 96       	adiw	r26, 0x01	; 1
     996:	01 90       	ld	r0, Z+
     998:	0d 92       	st	X+, r0
     99a:	8a 95       	dec	r24
     99c:	e1 f7       	brne	.-8      	; 0x996 <tact_switch_button_pressed+0x58>
     99e:	29 81       	ldd	r18, Y+1	; 0x01
     9a0:	3a 81       	ldd	r19, Y+2	; 0x02
     9a2:	4b 81       	ldd	r20, Y+3	; 0x03
     9a4:	5c 81       	ldd	r21, Y+4	; 0x04
     9a6:	6d 81       	ldd	r22, Y+5	; 0x05
     9a8:	70 e0       	ldi	r23, 0x00	; 0
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	04 c0       	rjmp	.+8      	; 0x9b8 <tact_switch_button_pressed+0x7a>
     9b0:	05 96       	adiw	r24, 0x05	; 5
	return circuit;
}

analog_button tact_switch_button_pressed(tact_switch_board *switches, int value)
{
    for(int index = 0; index < 4; ++index)
     9b2:	80 17       	cp	r24, r16
     9b4:	91 07       	cpc	r25, r17
     9b6:	91 f6       	brne	.-92     	; 0x95c <tact_switch_button_pressed+0x1e>
	    if(value > button.minimum && value < button.maximum)
	    {
		    return button;
	    }
    }
}
     9b8:	2a 96       	adiw	r28, 0x0a	; 10
     9ba:	0f b6       	in	r0, 0x3f	; 63
     9bc:	f8 94       	cli
     9be:	de bf       	out	0x3e, r29	; 62
     9c0:	0f be       	out	0x3f, r0	; 63
     9c2:	cd bf       	out	0x3d, r28	; 61
     9c4:	df 91       	pop	r29
     9c6:	cf 91       	pop	r28
     9c8:	1f 91       	pop	r17
     9ca:	0f 91       	pop	r16
     9cc:	08 95       	ret

000009ce <initVariant>:
     9ce:	08 95       	ret

000009d0 <main>:
     9d0:	ca d2       	rcall	.+1428   	; 0xf66 <init>
     9d2:	fd df       	rcall	.-6      	; 0x9ce <initVariant>
     9d4:	77 df       	rcall	.-274    	; 0x8c4 <setup>
     9d6:	c0 e0       	ldi	r28, 0x00	; 0
     9d8:	d0 e0       	ldi	r29, 0x00	; 0
     9da:	77 df       	rcall	.-274    	; 0x8ca <loop>
     9dc:	20 97       	sbiw	r28, 0x00	; 0
     9de:	e9 f3       	breq	.-6      	; 0x9da <main+0xa>
     9e0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     9e4:	fa cf       	rjmp	.-12     	; 0x9da <main+0xa>

000009e6 <_Znwj>:
     9e6:	44 c4       	rjmp	.+2184   	; 0x1270 <malloc>

000009e8 <_ZN5Print5writeEPKhj>:
     9e8:	cf 92       	push	r12
     9ea:	df 92       	push	r13
     9ec:	ef 92       	push	r14
     9ee:	ff 92       	push	r15
     9f0:	0f 93       	push	r16
     9f2:	1f 93       	push	r17
     9f4:	cf 93       	push	r28
     9f6:	df 93       	push	r29
     9f8:	6c 01       	movw	r12, r24
     9fa:	7a 01       	movw	r14, r20
     9fc:	8b 01       	movw	r16, r22
     9fe:	c0 e0       	ldi	r28, 0x00	; 0
     a00:	d0 e0       	ldi	r29, 0x00	; 0
     a02:	ce 15       	cp	r28, r14
     a04:	df 05       	cpc	r29, r15
     a06:	81 f0       	breq	.+32     	; 0xa28 <_ZN5Print5writeEPKhj+0x40>
     a08:	d8 01       	movw	r26, r16
     a0a:	6d 91       	ld	r22, X+
     a0c:	8d 01       	movw	r16, r26
     a0e:	d6 01       	movw	r26, r12
     a10:	ed 91       	ld	r30, X+
     a12:	fc 91       	ld	r31, X
     a14:	01 90       	ld	r0, Z+
     a16:	f0 81       	ld	r31, Z
     a18:	e0 2d       	mov	r30, r0
     a1a:	c6 01       	movw	r24, r12
     a1c:	19 95       	eicall
     a1e:	89 2b       	or	r24, r25
     a20:	11 f0       	breq	.+4      	; 0xa26 <_ZN5Print5writeEPKhj+0x3e>
     a22:	21 96       	adiw	r28, 0x01	; 1
     a24:	ee cf       	rjmp	.-36     	; 0xa02 <_ZN5Print5writeEPKhj+0x1a>
     a26:	7e 01       	movw	r14, r28
     a28:	c7 01       	movw	r24, r14
     a2a:	df 91       	pop	r29
     a2c:	cf 91       	pop	r28
     a2e:	1f 91       	pop	r17
     a30:	0f 91       	pop	r16
     a32:	ff 90       	pop	r15
     a34:	ef 90       	pop	r14
     a36:	df 90       	pop	r13
     a38:	cf 90       	pop	r12
     a3a:	08 95       	ret

00000a3c <_ZN5Print5writeEPKc>:
     a3c:	61 15       	cp	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	79 f0       	breq	.+30     	; 0xa60 <_ZN5Print5writeEPKc+0x24>
     a42:	fb 01       	movw	r30, r22
     a44:	01 90       	ld	r0, Z+
     a46:	00 20       	and	r0, r0
     a48:	e9 f7       	brne	.-6      	; 0xa44 <_ZN5Print5writeEPKc+0x8>
     a4a:	31 97       	sbiw	r30, 0x01	; 1
     a4c:	af 01       	movw	r20, r30
     a4e:	46 1b       	sub	r20, r22
     a50:	57 0b       	sbc	r21, r23
     a52:	dc 01       	movw	r26, r24
     a54:	ed 91       	ld	r30, X+
     a56:	fc 91       	ld	r31, X
     a58:	02 80       	ldd	r0, Z+2	; 0x02
     a5a:	f3 81       	ldd	r31, Z+3	; 0x03
     a5c:	e0 2d       	mov	r30, r0
     a5e:	19 94       	eijmp
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	08 95       	ret

00000a66 <_ZN5Print5printEPKc>:
     a66:	ea cf       	rjmp	.-44     	; 0xa3c <_ZN5Print5writeEPKc>

00000a68 <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
     a68:	08 95       	ret

00000a6a <attachInterrupt>:
     a6a:	88 30       	cpi	r24, 0x08	; 8
     a6c:	08 f0       	brcs	.+2      	; 0xa70 <attachInterrupt+0x6>
     a6e:	6f c0       	rjmp	.+222    	; 0xb4e <attachInterrupt+0xe4>
     a70:	a8 2f       	mov	r26, r24
     a72:	b0 e0       	ldi	r27, 0x00	; 0
     a74:	aa 0f       	add	r26, r26
     a76:	bb 1f       	adc	r27, r27
     a78:	aa 5f       	subi	r26, 0xFA	; 250
     a7a:	bd 4f       	sbci	r27, 0xFD	; 253
     a7c:	11 96       	adiw	r26, 0x01	; 1
     a7e:	7c 93       	st	X, r23
     a80:	6e 93       	st	-X, r22
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	fc 01       	movw	r30, r24
     a86:	31 97       	sbiw	r30, 0x01	; 1
     a88:	e7 30       	cpi	r30, 0x07	; 7
     a8a:	f1 05       	cpc	r31, r1
     a8c:	98 f5       	brcc	.+102    	; 0xaf4 <attachInterrupt+0x8a>
     a8e:	88 27       	eor	r24, r24
     a90:	ee 58       	subi	r30, 0x8E	; 142
     a92:	ff 4f       	sbci	r31, 0xFF	; 255
     a94:	8f 4f       	sbci	r24, 0xFF	; 255
     a96:	e4 c3       	rjmp	.+1992   	; 0x1260 <__tablejump2__>
     a98:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
     a9c:	8c 7f       	andi	r24, 0xFC	; 252
     a9e:	48 2b       	or	r20, r24
     aa0:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
     aa4:	e8 9a       	sbi	0x1d, 0	; 29
     aa6:	08 95       	ret
     aa8:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
     aac:	83 7f       	andi	r24, 0xF3	; 243
     aae:	44 0f       	add	r20, r20
     ab0:	55 1f       	adc	r21, r21
     ab2:	44 0f       	add	r20, r20
     ab4:	55 1f       	adc	r21, r21
     ab6:	48 2b       	or	r20, r24
     ab8:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
     abc:	e9 9a       	sbi	0x1d, 1	; 29
     abe:	08 95       	ret
     ac0:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
     ac4:	8f 7c       	andi	r24, 0xCF	; 207
     ac6:	74 e0       	ldi	r23, 0x04	; 4
     ac8:	44 0f       	add	r20, r20
     aca:	55 1f       	adc	r21, r21
     acc:	7a 95       	dec	r23
     ace:	e1 f7       	brne	.-8      	; 0xac8 <attachInterrupt+0x5e>
     ad0:	48 2b       	or	r20, r24
     ad2:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
     ad6:	ea 9a       	sbi	0x1d, 2	; 29
     ad8:	08 95       	ret
     ada:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
     ade:	8f 73       	andi	r24, 0x3F	; 63
     ae0:	66 e0       	ldi	r22, 0x06	; 6
     ae2:	44 0f       	add	r20, r20
     ae4:	55 1f       	adc	r21, r21
     ae6:	6a 95       	dec	r22
     ae8:	e1 f7       	brne	.-8      	; 0xae2 <attachInterrupt+0x78>
     aea:	48 2b       	or	r20, r24
     aec:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
     af0:	eb 9a       	sbi	0x1d, 3	; 29
     af2:	08 95       	ret
     af4:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     af8:	8c 7f       	andi	r24, 0xFC	; 252
     afa:	48 2b       	or	r20, r24
     afc:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     b00:	ec 9a       	sbi	0x1d, 4	; 29
     b02:	08 95       	ret
     b04:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     b08:	83 7f       	andi	r24, 0xF3	; 243
     b0a:	44 0f       	add	r20, r20
     b0c:	55 1f       	adc	r21, r21
     b0e:	44 0f       	add	r20, r20
     b10:	55 1f       	adc	r21, r21
     b12:	48 2b       	or	r20, r24
     b14:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     b18:	ed 9a       	sbi	0x1d, 5	; 29
     b1a:	08 95       	ret
     b1c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     b20:	8f 7c       	andi	r24, 0xCF	; 207
     b22:	24 e0       	ldi	r18, 0x04	; 4
     b24:	44 0f       	add	r20, r20
     b26:	55 1f       	adc	r21, r21
     b28:	2a 95       	dec	r18
     b2a:	e1 f7       	brne	.-8      	; 0xb24 <attachInterrupt+0xba>
     b2c:	48 2b       	or	r20, r24
     b2e:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     b32:	ee 9a       	sbi	0x1d, 6	; 29
     b34:	08 95       	ret
     b36:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     b3a:	8f 73       	andi	r24, 0x3F	; 63
     b3c:	96 e0       	ldi	r25, 0x06	; 6
     b3e:	44 0f       	add	r20, r20
     b40:	55 1f       	adc	r21, r21
     b42:	9a 95       	dec	r25
     b44:	e1 f7       	brne	.-8      	; 0xb3e <attachInterrupt+0xd4>
     b46:	48 2b       	or	r20, r24
     b48:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     b4c:	ef 9a       	sbi	0x1d, 7	; 29
     b4e:	08 95       	ret

00000b50 <__vector_1>:
IMPLEMENT_ISR(INT3_vect, EXTERNAL_INT_3)
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_4)

#elif defined(EICRA) && defined(EICRB)

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_2)
     b50:	1f 92       	push	r1
     b52:	0f 92       	push	r0
     b54:	0f b6       	in	r0, 0x3f	; 63
     b56:	0f 92       	push	r0
     b58:	11 24       	eor	r1, r1
     b5a:	0b b6       	in	r0, 0x3b	; 59
     b5c:	0f 92       	push	r0
     b5e:	2f 93       	push	r18
     b60:	3f 93       	push	r19
     b62:	4f 93       	push	r20
     b64:	5f 93       	push	r21
     b66:	6f 93       	push	r22
     b68:	7f 93       	push	r23
     b6a:	8f 93       	push	r24
     b6c:	9f 93       	push	r25
     b6e:	af 93       	push	r26
     b70:	bf 93       	push	r27
     b72:	ef 93       	push	r30
     b74:	ff 93       	push	r31
     b76:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <intFunc+0x4>
     b7a:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <intFunc+0x5>
     b7e:	19 95       	eicall
     b80:	ff 91       	pop	r31
     b82:	ef 91       	pop	r30
     b84:	bf 91       	pop	r27
     b86:	af 91       	pop	r26
     b88:	9f 91       	pop	r25
     b8a:	8f 91       	pop	r24
     b8c:	7f 91       	pop	r23
     b8e:	6f 91       	pop	r22
     b90:	5f 91       	pop	r21
     b92:	4f 91       	pop	r20
     b94:	3f 91       	pop	r19
     b96:	2f 91       	pop	r18
     b98:	0f 90       	pop	r0
     b9a:	0b be       	out	0x3b, r0	; 59
     b9c:	0f 90       	pop	r0
     b9e:	0f be       	out	0x3f, r0	; 63
     ba0:	0f 90       	pop	r0
     ba2:	1f 90       	pop	r1
     ba4:	18 95       	reti

00000ba6 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_3)
     ba6:	1f 92       	push	r1
     ba8:	0f 92       	push	r0
     baa:	0f b6       	in	r0, 0x3f	; 63
     bac:	0f 92       	push	r0
     bae:	11 24       	eor	r1, r1
     bb0:	0b b6       	in	r0, 0x3b	; 59
     bb2:	0f 92       	push	r0
     bb4:	2f 93       	push	r18
     bb6:	3f 93       	push	r19
     bb8:	4f 93       	push	r20
     bba:	5f 93       	push	r21
     bbc:	6f 93       	push	r22
     bbe:	7f 93       	push	r23
     bc0:	8f 93       	push	r24
     bc2:	9f 93       	push	r25
     bc4:	af 93       	push	r26
     bc6:	bf 93       	push	r27
     bc8:	ef 93       	push	r30
     bca:	ff 93       	push	r31
     bcc:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <intFunc+0x6>
     bd0:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <intFunc+0x7>
     bd4:	19 95       	eicall
     bd6:	ff 91       	pop	r31
     bd8:	ef 91       	pop	r30
     bda:	bf 91       	pop	r27
     bdc:	af 91       	pop	r26
     bde:	9f 91       	pop	r25
     be0:	8f 91       	pop	r24
     be2:	7f 91       	pop	r23
     be4:	6f 91       	pop	r22
     be6:	5f 91       	pop	r21
     be8:	4f 91       	pop	r20
     bea:	3f 91       	pop	r19
     bec:	2f 91       	pop	r18
     bee:	0f 90       	pop	r0
     bf0:	0b be       	out	0x3b, r0	; 59
     bf2:	0f 90       	pop	r0
     bf4:	0f be       	out	0x3f, r0	; 63
     bf6:	0f 90       	pop	r0
     bf8:	1f 90       	pop	r1
     bfa:	18 95       	reti

00000bfc <__vector_3>:
IMPLEMENT_ISR(INT2_vect, EXTERNAL_INT_4)
     bfc:	1f 92       	push	r1
     bfe:	0f 92       	push	r0
     c00:	0f b6       	in	r0, 0x3f	; 63
     c02:	0f 92       	push	r0
     c04:	11 24       	eor	r1, r1
     c06:	0b b6       	in	r0, 0x3b	; 59
     c08:	0f 92       	push	r0
     c0a:	2f 93       	push	r18
     c0c:	3f 93       	push	r19
     c0e:	4f 93       	push	r20
     c10:	5f 93       	push	r21
     c12:	6f 93       	push	r22
     c14:	7f 93       	push	r23
     c16:	8f 93       	push	r24
     c18:	9f 93       	push	r25
     c1a:	af 93       	push	r26
     c1c:	bf 93       	push	r27
     c1e:	ef 93       	push	r30
     c20:	ff 93       	push	r31
     c22:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <intFunc+0x8>
     c26:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <intFunc+0x9>
     c2a:	19 95       	eicall
     c2c:	ff 91       	pop	r31
     c2e:	ef 91       	pop	r30
     c30:	bf 91       	pop	r27
     c32:	af 91       	pop	r26
     c34:	9f 91       	pop	r25
     c36:	8f 91       	pop	r24
     c38:	7f 91       	pop	r23
     c3a:	6f 91       	pop	r22
     c3c:	5f 91       	pop	r21
     c3e:	4f 91       	pop	r20
     c40:	3f 91       	pop	r19
     c42:	2f 91       	pop	r18
     c44:	0f 90       	pop	r0
     c46:	0b be       	out	0x3b, r0	; 59
     c48:	0f 90       	pop	r0
     c4a:	0f be       	out	0x3f, r0	; 63
     c4c:	0f 90       	pop	r0
     c4e:	1f 90       	pop	r1
     c50:	18 95       	reti

00000c52 <__vector_4>:
IMPLEMENT_ISR(INT3_vect, EXTERNAL_INT_5)
     c52:	1f 92       	push	r1
     c54:	0f 92       	push	r0
     c56:	0f b6       	in	r0, 0x3f	; 63
     c58:	0f 92       	push	r0
     c5a:	11 24       	eor	r1, r1
     c5c:	0b b6       	in	r0, 0x3b	; 59
     c5e:	0f 92       	push	r0
     c60:	2f 93       	push	r18
     c62:	3f 93       	push	r19
     c64:	4f 93       	push	r20
     c66:	5f 93       	push	r21
     c68:	6f 93       	push	r22
     c6a:	7f 93       	push	r23
     c6c:	8f 93       	push	r24
     c6e:	9f 93       	push	r25
     c70:	af 93       	push	r26
     c72:	bf 93       	push	r27
     c74:	ef 93       	push	r30
     c76:	ff 93       	push	r31
     c78:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <intFunc+0xa>
     c7c:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <intFunc+0xb>
     c80:	19 95       	eicall
     c82:	ff 91       	pop	r31
     c84:	ef 91       	pop	r30
     c86:	bf 91       	pop	r27
     c88:	af 91       	pop	r26
     c8a:	9f 91       	pop	r25
     c8c:	8f 91       	pop	r24
     c8e:	7f 91       	pop	r23
     c90:	6f 91       	pop	r22
     c92:	5f 91       	pop	r21
     c94:	4f 91       	pop	r20
     c96:	3f 91       	pop	r19
     c98:	2f 91       	pop	r18
     c9a:	0f 90       	pop	r0
     c9c:	0b be       	out	0x3b, r0	; 59
     c9e:	0f 90       	pop	r0
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	0f 90       	pop	r0
     ca4:	1f 90       	pop	r1
     ca6:	18 95       	reti

00000ca8 <__vector_5>:
IMPLEMENT_ISR(INT4_vect, EXTERNAL_INT_0)
     ca8:	1f 92       	push	r1
     caa:	0f 92       	push	r0
     cac:	0f b6       	in	r0, 0x3f	; 63
     cae:	0f 92       	push	r0
     cb0:	11 24       	eor	r1, r1
     cb2:	0b b6       	in	r0, 0x3b	; 59
     cb4:	0f 92       	push	r0
     cb6:	2f 93       	push	r18
     cb8:	3f 93       	push	r19
     cba:	4f 93       	push	r20
     cbc:	5f 93       	push	r21
     cbe:	6f 93       	push	r22
     cc0:	7f 93       	push	r23
     cc2:	8f 93       	push	r24
     cc4:	9f 93       	push	r25
     cc6:	af 93       	push	r26
     cc8:	bf 93       	push	r27
     cca:	ef 93       	push	r30
     ccc:	ff 93       	push	r31
     cce:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <intFunc>
     cd2:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <intFunc+0x1>
     cd6:	19 95       	eicall
     cd8:	ff 91       	pop	r31
     cda:	ef 91       	pop	r30
     cdc:	bf 91       	pop	r27
     cde:	af 91       	pop	r26
     ce0:	9f 91       	pop	r25
     ce2:	8f 91       	pop	r24
     ce4:	7f 91       	pop	r23
     ce6:	6f 91       	pop	r22
     ce8:	5f 91       	pop	r21
     cea:	4f 91       	pop	r20
     cec:	3f 91       	pop	r19
     cee:	2f 91       	pop	r18
     cf0:	0f 90       	pop	r0
     cf2:	0b be       	out	0x3b, r0	; 59
     cf4:	0f 90       	pop	r0
     cf6:	0f be       	out	0x3f, r0	; 63
     cf8:	0f 90       	pop	r0
     cfa:	1f 90       	pop	r1
     cfc:	18 95       	reti

00000cfe <__vector_6>:
IMPLEMENT_ISR(INT5_vect, EXTERNAL_INT_1)
     cfe:	1f 92       	push	r1
     d00:	0f 92       	push	r0
     d02:	0f b6       	in	r0, 0x3f	; 63
     d04:	0f 92       	push	r0
     d06:	11 24       	eor	r1, r1
     d08:	0b b6       	in	r0, 0x3b	; 59
     d0a:	0f 92       	push	r0
     d0c:	2f 93       	push	r18
     d0e:	3f 93       	push	r19
     d10:	4f 93       	push	r20
     d12:	5f 93       	push	r21
     d14:	6f 93       	push	r22
     d16:	7f 93       	push	r23
     d18:	8f 93       	push	r24
     d1a:	9f 93       	push	r25
     d1c:	af 93       	push	r26
     d1e:	bf 93       	push	r27
     d20:	ef 93       	push	r30
     d22:	ff 93       	push	r31
     d24:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <intFunc+0x2>
     d28:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <intFunc+0x3>
     d2c:	19 95       	eicall
     d2e:	ff 91       	pop	r31
     d30:	ef 91       	pop	r30
     d32:	bf 91       	pop	r27
     d34:	af 91       	pop	r26
     d36:	9f 91       	pop	r25
     d38:	8f 91       	pop	r24
     d3a:	7f 91       	pop	r23
     d3c:	6f 91       	pop	r22
     d3e:	5f 91       	pop	r21
     d40:	4f 91       	pop	r20
     d42:	3f 91       	pop	r19
     d44:	2f 91       	pop	r18
     d46:	0f 90       	pop	r0
     d48:	0b be       	out	0x3b, r0	; 59
     d4a:	0f 90       	pop	r0
     d4c:	0f be       	out	0x3f, r0	; 63
     d4e:	0f 90       	pop	r0
     d50:	1f 90       	pop	r1
     d52:	18 95       	reti

00000d54 <__vector_7>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
     d54:	1f 92       	push	r1
     d56:	0f 92       	push	r0
     d58:	0f b6       	in	r0, 0x3f	; 63
     d5a:	0f 92       	push	r0
     d5c:	11 24       	eor	r1, r1
     d5e:	0b b6       	in	r0, 0x3b	; 59
     d60:	0f 92       	push	r0
     d62:	2f 93       	push	r18
     d64:	3f 93       	push	r19
     d66:	4f 93       	push	r20
     d68:	5f 93       	push	r21
     d6a:	6f 93       	push	r22
     d6c:	7f 93       	push	r23
     d6e:	8f 93       	push	r24
     d70:	9f 93       	push	r25
     d72:	af 93       	push	r26
     d74:	bf 93       	push	r27
     d76:	ef 93       	push	r30
     d78:	ff 93       	push	r31
     d7a:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <intFunc+0xc>
     d7e:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <intFunc+0xd>
     d82:	19 95       	eicall
     d84:	ff 91       	pop	r31
     d86:	ef 91       	pop	r30
     d88:	bf 91       	pop	r27
     d8a:	af 91       	pop	r26
     d8c:	9f 91       	pop	r25
     d8e:	8f 91       	pop	r24
     d90:	7f 91       	pop	r23
     d92:	6f 91       	pop	r22
     d94:	5f 91       	pop	r21
     d96:	4f 91       	pop	r20
     d98:	3f 91       	pop	r19
     d9a:	2f 91       	pop	r18
     d9c:	0f 90       	pop	r0
     d9e:	0b be       	out	0x3b, r0	; 59
     da0:	0f 90       	pop	r0
     da2:	0f be       	out	0x3f, r0	; 63
     da4:	0f 90       	pop	r0
     da6:	1f 90       	pop	r1
     da8:	18 95       	reti

00000daa <__vector_8>:
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)
     daa:	1f 92       	push	r1
     dac:	0f 92       	push	r0
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	0f 92       	push	r0
     db2:	11 24       	eor	r1, r1
     db4:	0b b6       	in	r0, 0x3b	; 59
     db6:	0f 92       	push	r0
     db8:	2f 93       	push	r18
     dba:	3f 93       	push	r19
     dbc:	4f 93       	push	r20
     dbe:	5f 93       	push	r21
     dc0:	6f 93       	push	r22
     dc2:	7f 93       	push	r23
     dc4:	8f 93       	push	r24
     dc6:	9f 93       	push	r25
     dc8:	af 93       	push	r26
     dca:	bf 93       	push	r27
     dcc:	ef 93       	push	r30
     dce:	ff 93       	push	r31
     dd0:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <intFunc+0xe>
     dd4:	f0 91 15 02 	lds	r31, 0x0215	; 0x800215 <intFunc+0xf>
     dd8:	19 95       	eicall
     dda:	ff 91       	pop	r31
     ddc:	ef 91       	pop	r30
     dde:	bf 91       	pop	r27
     de0:	af 91       	pop	r26
     de2:	9f 91       	pop	r25
     de4:	8f 91       	pop	r24
     de6:	7f 91       	pop	r23
     de8:	6f 91       	pop	r22
     dea:	5f 91       	pop	r21
     dec:	4f 91       	pop	r20
     dee:	3f 91       	pop	r19
     df0:	2f 91       	pop	r18
     df2:	0f 90       	pop	r0
     df4:	0b be       	out	0x3b, r0	; 59
     df6:	0f 90       	pop	r0
     df8:	0f be       	out	0x3f, r0	; 63
     dfa:	0f 90       	pop	r0
     dfc:	1f 90       	pop	r1
     dfe:	18 95       	reti

00000e00 <__vector_23>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
     e00:	1f 92       	push	r1
     e02:	0f 92       	push	r0
     e04:	0f b6       	in	r0, 0x3f	; 63
     e06:	0f 92       	push	r0
     e08:	11 24       	eor	r1, r1
     e0a:	2f 93       	push	r18
     e0c:	3f 93       	push	r19
     e0e:	8f 93       	push	r24
     e10:	9f 93       	push	r25
     e12:	af 93       	push	r26
     e14:	bf 93       	push	r27
     e16:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <timer0_millis>
     e1a:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <timer0_millis+0x1>
     e1e:	a0 91 65 02 	lds	r26, 0x0265	; 0x800265 <timer0_millis+0x2>
     e22:	b0 91 66 02 	lds	r27, 0x0266	; 0x800266 <timer0_millis+0x3>
     e26:	30 91 62 02 	lds	r19, 0x0262	; 0x800262 <__data_end>
     e2a:	23 e0       	ldi	r18, 0x03	; 3
     e2c:	23 0f       	add	r18, r19
     e2e:	2d 37       	cpi	r18, 0x7D	; 125
     e30:	20 f4       	brcc	.+8      	; 0xe3a <__vector_23+0x3a>
     e32:	01 96       	adiw	r24, 0x01	; 1
     e34:	a1 1d       	adc	r26, r1
     e36:	b1 1d       	adc	r27, r1
     e38:	05 c0       	rjmp	.+10     	; 0xe44 <__vector_23+0x44>
     e3a:	26 e8       	ldi	r18, 0x86	; 134
     e3c:	23 0f       	add	r18, r19
     e3e:	02 96       	adiw	r24, 0x02	; 2
     e40:	a1 1d       	adc	r26, r1
     e42:	b1 1d       	adc	r27, r1
     e44:	20 93 62 02 	sts	0x0262, r18	; 0x800262 <__data_end>
     e48:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <timer0_millis>
     e4c:	90 93 64 02 	sts	0x0264, r25	; 0x800264 <timer0_millis+0x1>
     e50:	a0 93 65 02 	sts	0x0265, r26	; 0x800265 <timer0_millis+0x2>
     e54:	b0 93 66 02 	sts	0x0266, r27	; 0x800266 <timer0_millis+0x3>
     e58:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <timer0_overflow_count>
     e5c:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <timer0_overflow_count+0x1>
     e60:	a0 91 69 02 	lds	r26, 0x0269	; 0x800269 <timer0_overflow_count+0x2>
     e64:	b0 91 6a 02 	lds	r27, 0x026A	; 0x80026a <timer0_overflow_count+0x3>
     e68:	01 96       	adiw	r24, 0x01	; 1
     e6a:	a1 1d       	adc	r26, r1
     e6c:	b1 1d       	adc	r27, r1
     e6e:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <timer0_overflow_count>
     e72:	90 93 68 02 	sts	0x0268, r25	; 0x800268 <timer0_overflow_count+0x1>
     e76:	a0 93 69 02 	sts	0x0269, r26	; 0x800269 <timer0_overflow_count+0x2>
     e7a:	b0 93 6a 02 	sts	0x026A, r27	; 0x80026a <timer0_overflow_count+0x3>
     e7e:	bf 91       	pop	r27
     e80:	af 91       	pop	r26
     e82:	9f 91       	pop	r25
     e84:	8f 91       	pop	r24
     e86:	3f 91       	pop	r19
     e88:	2f 91       	pop	r18
     e8a:	0f 90       	pop	r0
     e8c:	0f be       	out	0x3f, r0	; 63
     e8e:	0f 90       	pop	r0
     e90:	1f 90       	pop	r1
     e92:	18 95       	reti

00000e94 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     e94:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     e96:	f8 94       	cli
	m = timer0_overflow_count;
     e98:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <timer0_overflow_count>
     e9c:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <timer0_overflow_count+0x1>
     ea0:	a0 91 69 02 	lds	r26, 0x0269	; 0x800269 <timer0_overflow_count+0x2>
     ea4:	b0 91 6a 02 	lds	r27, 0x026A	; 0x80026a <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
     ea8:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     eaa:	a8 9b       	sbis	0x15, 0	; 21
     eac:	05 c0       	rjmp	.+10     	; 0xeb8 <micros+0x24>
     eae:	2f 3f       	cpi	r18, 0xFF	; 255
     eb0:	19 f0       	breq	.+6      	; 0xeb8 <micros+0x24>
		m++;
     eb2:	01 96       	adiw	r24, 0x01	; 1
     eb4:	a1 1d       	adc	r26, r1
     eb6:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     eb8:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     eba:	ba 2f       	mov	r27, r26
     ebc:	a9 2f       	mov	r26, r25
     ebe:	98 2f       	mov	r25, r24
     ec0:	88 27       	eor	r24, r24
     ec2:	82 0f       	add	r24, r18
     ec4:	91 1d       	adc	r25, r1
     ec6:	a1 1d       	adc	r26, r1
     ec8:	b1 1d       	adc	r27, r1
     eca:	bc 01       	movw	r22, r24
     ecc:	cd 01       	movw	r24, r26
     ece:	42 e0       	ldi	r20, 0x02	; 2
     ed0:	66 0f       	add	r22, r22
     ed2:	77 1f       	adc	r23, r23
     ed4:	88 1f       	adc	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	4a 95       	dec	r20
     eda:	d1 f7       	brne	.-12     	; 0xed0 <micros+0x3c>
}
     edc:	08 95       	ret

00000ede <delay>:

void delay(unsigned long ms)
{
     ede:	8f 92       	push	r8
     ee0:	9f 92       	push	r9
     ee2:	af 92       	push	r10
     ee4:	bf 92       	push	r11
     ee6:	cf 92       	push	r12
     ee8:	df 92       	push	r13
     eea:	ef 92       	push	r14
     eec:	ff 92       	push	r15
     eee:	6b 01       	movw	r12, r22
	uint32_t start = micros();
     ef0:	7c 01       	movw	r14, r24
     ef2:	d0 df       	rcall	.-96     	; 0xe94 <micros>
     ef4:	4b 01       	movw	r8, r22

	while (ms > 0) {
     ef6:	5c 01       	movw	r10, r24
     ef8:	c1 14       	cp	r12, r1
     efa:	d1 04       	cpc	r13, r1
		yield();
     efc:	e1 04       	cpc	r14, r1
		while ( ms > 0 && (micros() - start) >= 1000) {
     efe:	f1 04       	cpc	r15, r1
     f00:	f1 f0       	breq	.+60     	; 0xf3e <delay+0x60>
     f02:	ad d1       	rcall	.+858    	; 0x125e <yield>
     f04:	c7 df       	rcall	.-114    	; 0xe94 <micros>
     f06:	dc 01       	movw	r26, r24
     f08:	cb 01       	movw	r24, r22
     f0a:	88 19       	sub	r24, r8
     f0c:	99 09       	sbc	r25, r9
     f0e:	aa 09       	sbc	r26, r10
     f10:	bb 09       	sbc	r27, r11
     f12:	88 3e       	cpi	r24, 0xE8	; 232
     f14:	93 40       	sbci	r25, 0x03	; 3
     f16:	a1 05       	cpc	r26, r1
			ms--;
     f18:	b1 05       	cpc	r27, r1
     f1a:	70 f3       	brcs	.-36     	; 0xef8 <delay+0x1a>
     f1c:	21 e0       	ldi	r18, 0x01	; 1
     f1e:	c2 1a       	sub	r12, r18
     f20:	d1 08       	sbc	r13, r1
			start += 1000;
     f22:	e1 08       	sbc	r14, r1
     f24:	f1 08       	sbc	r15, r1
     f26:	88 ee       	ldi	r24, 0xE8	; 232
     f28:	88 0e       	add	r8, r24
     f2a:	83 e0       	ldi	r24, 0x03	; 3
     f2c:	98 1e       	adc	r9, r24
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
     f2e:	a1 1c       	adc	r10, r1
     f30:	b1 1c       	adc	r11, r1
     f32:	c1 14       	cp	r12, r1
     f34:	d1 04       	cpc	r13, r1
     f36:	e1 04       	cpc	r14, r1
     f38:	f1 04       	cpc	r15, r1
			ms--;
			start += 1000;
		}
	}
}
     f3a:	21 f7       	brne	.-56     	; 0xf04 <delay+0x26>
     f3c:	dd cf       	rjmp	.-70     	; 0xef8 <delay+0x1a>
     f3e:	ff 90       	pop	r15
     f40:	ef 90       	pop	r14
     f42:	df 90       	pop	r13
     f44:	cf 90       	pop	r12
     f46:	bf 90       	pop	r11
     f48:	af 90       	pop	r10
     f4a:	9f 90       	pop	r9
     f4c:	8f 90       	pop	r8
     f4e:	08 95       	ret

00000f50 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
     f50:	82 30       	cpi	r24, 0x02	; 2
     f52:	91 05       	cpc	r25, r1
     f54:	38 f0       	brcs	.+14     	; 0xf64 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
     f56:	88 0f       	add	r24, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
     f5e:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
     f60:	01 97       	sbiw	r24, 0x01	; 1
     f62:	f1 f7       	brne	.-4      	; 0xf60 <delayMicroseconds+0x10>
     f64:	08 95       	ret

00000f66 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     f66:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     f68:	84 b5       	in	r24, 0x24	; 36
     f6a:	82 60       	ori	r24, 0x02	; 2
     f6c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     f6e:	84 b5       	in	r24, 0x24	; 36
     f70:	81 60       	ori	r24, 0x01	; 1
     f72:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     f74:	85 b5       	in	r24, 0x25	; 37
     f76:	82 60       	ori	r24, 0x02	; 2
     f78:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     f7a:	85 b5       	in	r24, 0x25	; 37
     f7c:	81 60       	ori	r24, 0x01	; 1
     f7e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     f80:	ee e6       	ldi	r30, 0x6E	; 110
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	81 60       	ori	r24, 0x01	; 1
     f88:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     f8a:	e1 e8       	ldi	r30, 0x81	; 129
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     f90:	80 81       	ld	r24, Z
     f92:	82 60       	ori	r24, 0x02	; 2
     f94:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     f96:	80 81       	ld	r24, Z
     f98:	81 60       	ori	r24, 0x01	; 1
     f9a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     f9c:	e0 e8       	ldi	r30, 0x80	; 128
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	81 60       	ori	r24, 0x01	; 1
     fa4:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     fa6:	e1 eb       	ldi	r30, 0xB1	; 177
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	84 60       	ori	r24, 0x04	; 4
     fae:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     fb0:	e0 eb       	ldi	r30, 0xB0	; 176
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	81 60       	ori	r24, 0x01	; 1
     fb8:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
     fba:	e1 e9       	ldi	r30, 0x91	; 145
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	82 60       	ori	r24, 0x02	; 2
     fc2:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
     fc4:	80 81       	ld	r24, Z
     fc6:	81 60       	ori	r24, 0x01	; 1
     fc8:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
     fca:	e0 e9       	ldi	r30, 0x90	; 144
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	81 60       	ori	r24, 0x01	; 1
     fd2:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
     fd4:	e1 ea       	ldi	r30, 0xA1	; 161
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	82 60       	ori	r24, 0x02	; 2
     fdc:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
     fde:	80 81       	ld	r24, Z
     fe0:	81 60       	ori	r24, 0x01	; 1
     fe2:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
     fe4:	e0 ea       	ldi	r30, 0xA0	; 160
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	81 60       	ori	r24, 0x01	; 1
     fec:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
     fee:	e1 e2       	ldi	r30, 0x21	; 33
     ff0:	f1 e0       	ldi	r31, 0x01	; 1
     ff2:	80 81       	ld	r24, Z
     ff4:	82 60       	ori	r24, 0x02	; 2
     ff6:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
     ff8:	80 81       	ld	r24, Z
     ffa:	81 60       	ori	r24, 0x01	; 1
     ffc:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
     ffe:	e0 e2       	ldi	r30, 0x20	; 32
    1000:	f1 e0       	ldi	r31, 0x01	; 1
    1002:	80 81       	ld	r24, Z
    1004:	81 60       	ori	r24, 0x01	; 1
    1006:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1008:	ea e7       	ldi	r30, 0x7A	; 122
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	84 60       	ori	r24, 0x04	; 4
    1010:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1012:	80 81       	ld	r24, Z
    1014:	82 60       	ori	r24, 0x02	; 2
    1016:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1018:	80 81       	ld	r24, Z
    101a:	81 60       	ori	r24, 0x01	; 1
    101c:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    101e:	80 81       	ld	r24, Z
    1020:	80 68       	ori	r24, 0x80	; 128
    1022:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1024:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    1028:	08 95       	ret

0000102a <analogRead>:
#if defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#endif
	pin = analogPinToChannel(pin);
#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
    102a:	86 33       	cpi	r24, 0x36	; 54
    102c:	08 f0       	brcs	.+2      	; 0x1030 <analogRead+0x6>
    102e:	86 53       	subi	r24, 0x36	; 54
#endif

#if defined(ADCSRB) && defined(MUX5)
	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
    1030:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    1034:	28 2f       	mov	r18, r24
    1036:	28 70       	andi	r18, 0x08	; 8
    1038:	97 7f       	andi	r25, 0xF7	; 247
    103a:	92 2b       	or	r25, r18
    103c:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    1040:	20 91 16 02 	lds	r18, 0x0216	; 0x800216 <analog_reference>
    1044:	90 e4       	ldi	r25, 0x40	; 64
    1046:	29 9f       	mul	r18, r25
    1048:	90 01       	movw	r18, r0
    104a:	11 24       	eor	r1, r1
    104c:	87 70       	andi	r24, 0x07	; 7
    104e:	82 2b       	or	r24, r18
    1050:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    1054:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    1058:	80 64       	ori	r24, 0x40	; 64
    105a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    105e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    1062:	86 fd       	sbrc	r24, 6
    1064:	fc cf       	rjmp	.-8      	; 0x105e <analogRead+0x34>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    1066:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
	high = ADCH;
    106a:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    106e:	90 e0       	ldi	r25, 0x00	; 0
}
    1070:	92 2b       	or	r25, r18
    1072:	08 95       	ret

00001074 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	fc 01       	movw	r30, r24
    1078:	31 97       	sbiw	r30, 0x01	; 1
    107a:	e2 31       	cpi	r30, 0x12	; 18
    107c:	f1 05       	cpc	r31, r1
    107e:	08 f0       	brcs	.+2      	; 0x1082 <turnOffPWM+0xe>
    1080:	4d c0       	rjmp	.+154    	; 0x111c <turnOffPWM+0xa8>
    1082:	88 27       	eor	r24, r24
    1084:	e7 58       	subi	r30, 0x87	; 135
    1086:	ff 4f       	sbci	r31, 0xFF	; 255
    1088:	8f 4f       	sbci	r24, 0xFF	; 255
    108a:	ea c0       	rjmp	.+468    	; 0x1260 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    108c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1090:	8f 77       	andi	r24, 0x7F	; 127
    1092:	03 c0       	rjmp	.+6      	; 0x109a <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1094:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1098:	8f 7d       	andi	r24, 0xDF	; 223
    109a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    109e:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    10a0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    10a4:	87 7f       	andi	r24, 0xF7	; 247
    10a6:	f9 cf       	rjmp	.-14     	; 0x109a <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    10a8:	84 b5       	in	r24, 0x24	; 36
    10aa:	8f 77       	andi	r24, 0x7F	; 127
    10ac:	02 c0       	rjmp	.+4      	; 0x10b2 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    10ae:	84 b5       	in	r24, 0x24	; 36
    10b0:	8f 7d       	andi	r24, 0xDF	; 223
    10b2:	84 bd       	out	0x24, r24	; 36
    10b4:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    10b6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    10ba:	8f 77       	andi	r24, 0x7F	; 127
    10bc:	03 c0       	rjmp	.+6      	; 0x10c4 <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    10be:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    10c2:	8f 7d       	andi	r24, 0xDF	; 223
    10c4:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    10c8:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    10ca:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    10ce:	8f 77       	andi	r24, 0x7F	; 127
    10d0:	07 c0       	rjmp	.+14     	; 0x10e0 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    10d2:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    10d6:	8f 7d       	andi	r24, 0xDF	; 223
    10d8:	03 c0       	rjmp	.+6      	; 0x10e0 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    10da:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    10de:	87 7f       	andi	r24, 0xF7	; 247
    10e0:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    10e4:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    10e6:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    10ea:	8f 77       	andi	r24, 0x7F	; 127
    10ec:	07 c0       	rjmp	.+14     	; 0x10fc <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    10ee:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    10f2:	8f 7d       	andi	r24, 0xDF	; 223
    10f4:	03 c0       	rjmp	.+6      	; 0x10fc <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    10f6:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    10fa:	87 7f       	andi	r24, 0xF7	; 247
    10fc:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1100:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    1102:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1106:	8f 77       	andi	r24, 0x7F	; 127
    1108:	07 c0       	rjmp	.+14     	; 0x1118 <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    110a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    110e:	8f 7d       	andi	r24, 0xDF	; 223
    1110:	03 c0       	rjmp	.+6      	; 0x1118 <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    1112:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1116:	87 7f       	andi	r24, 0xF7	; 247
    1118:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    111c:	08 95       	ret

0000111e <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    111e:	cf 93       	push	r28
    1120:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	fc 01       	movw	r30, r24
    1126:	e4 5a       	subi	r30, 0xA4	; 164
    1128:	fe 4f       	sbci	r31, 0xFE	; 254
    112a:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    112c:	fc 01       	movw	r30, r24
    112e:	ee 55       	subi	r30, 0x5E	; 94
    1130:	fe 4f       	sbci	r31, 0xFE	; 254
    1132:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1134:	88 23       	and	r24, r24
    1136:	61 f1       	breq	.+88     	; 0x1190 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	88 0f       	add	r24, r24
    113c:	99 1f       	adc	r25, r25
    113e:	fc 01       	movw	r30, r24
    1140:	ee 5f       	subi	r30, 0xFE	; 254
    1142:	fd 4f       	sbci	r31, 0xFD	; 253
    1144:	c5 91       	lpm	r28, Z+
    1146:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1148:	fc 01       	movw	r30, r24
    114a:	e8 51       	subi	r30, 0x18	; 24
    114c:	fe 4f       	sbci	r31, 0xFE	; 254
    114e:	a5 91       	lpm	r26, Z+
    1150:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1152:	61 11       	cpse	r22, r1
    1154:	09 c0       	rjmp	.+18     	; 0x1168 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1156:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1158:	f8 94       	cli
		*reg &= ~bit;
    115a:	88 81       	ld	r24, Y
    115c:	20 95       	com	r18
    115e:	82 23       	and	r24, r18
    1160:	88 83       	st	Y, r24
		*out &= ~bit;
    1162:	ec 91       	ld	r30, X
    1164:	2e 23       	and	r18, r30
    1166:	0b c0       	rjmp	.+22     	; 0x117e <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1168:	62 30       	cpi	r22, 0x02	; 2
    116a:	61 f4       	brne	.+24     	; 0x1184 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    116c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    116e:	f8 94       	cli
		*reg &= ~bit;
    1170:	88 81       	ld	r24, Y
    1172:	32 2f       	mov	r19, r18
    1174:	30 95       	com	r19
    1176:	83 23       	and	r24, r19
    1178:	88 83       	st	Y, r24
		*out |= bit;
    117a:	ec 91       	ld	r30, X
    117c:	2e 2b       	or	r18, r30
    117e:	2c 93       	st	X, r18
		SREG = oldSREG;
    1180:	9f bf       	out	0x3f, r25	; 63
    1182:	06 c0       	rjmp	.+12     	; 0x1190 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1184:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1186:	f8 94       	cli
		*reg |= bit;
    1188:	e8 81       	ld	r30, Y
    118a:	2e 2b       	or	r18, r30
    118c:	28 83       	st	Y, r18
		SREG = oldSREG;
    118e:	8f bf       	out	0x3f, r24	; 63
	}
}
    1190:	df 91       	pop	r29
    1192:	cf 91       	pop	r28
    1194:	08 95       	ret

00001196 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1196:	1f 93       	push	r17
    1198:	cf 93       	push	r28
    119a:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    119c:	28 2f       	mov	r18, r24
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	f9 01       	movw	r30, r18
    11a2:	ea 5e       	subi	r30, 0xEA	; 234
    11a4:	fe 4f       	sbci	r31, 0xFE	; 254
    11a6:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    11a8:	f9 01       	movw	r30, r18
    11aa:	e4 5a       	subi	r30, 0xA4	; 164
    11ac:	fe 4f       	sbci	r31, 0xFE	; 254
    11ae:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    11b0:	f9 01       	movw	r30, r18
    11b2:	ee 55       	subi	r30, 0x5E	; 94
    11b4:	fe 4f       	sbci	r31, 0xFE	; 254
    11b6:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    11b8:	cc 23       	and	r28, r28
    11ba:	b9 f0       	breq	.+46     	; 0x11ea <digitalWrite+0x54>
    11bc:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    11be:	81 11       	cpse	r24, r1

	out = portOutputRegister(port);
    11c0:	59 df       	rcall	.-334    	; 0x1074 <turnOffPWM>
    11c2:	ec 2f       	mov	r30, r28
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	ee 0f       	add	r30, r30
    11c8:	ff 1f       	adc	r31, r31
    11ca:	e8 51       	subi	r30, 0x18	; 24
    11cc:	fe 4f       	sbci	r31, 0xFE	; 254
    11ce:	a5 91       	lpm	r26, Z+

	uint8_t oldSREG = SREG;
    11d0:	b4 91       	lpm	r27, Z
	cli();
    11d2:	9f b7       	in	r25, 0x3f	; 63

	if (val == LOW) {
    11d4:	f8 94       	cli
    11d6:	11 11       	cpse	r17, r1
		*out &= ~bit;
    11d8:	04 c0       	rjmp	.+8      	; 0x11e2 <digitalWrite+0x4c>
    11da:	8c 91       	ld	r24, X
    11dc:	d0 95       	com	r29
    11de:	d8 23       	and	r29, r24
	} else {
		*out |= bit;
    11e0:	02 c0       	rjmp	.+4      	; 0x11e6 <digitalWrite+0x50>
    11e2:	ec 91       	ld	r30, X
    11e4:	de 2b       	or	r29, r30
	}

	SREG = oldSREG;
    11e6:	dc 93       	st	X, r29
}
    11e8:	9f bf       	out	0x3f, r25	; 63
    11ea:	df 91       	pop	r29
    11ec:	cf 91       	pop	r28
    11ee:	1f 91       	pop	r17
    11f0:	08 95       	ret

000011f2 <shiftOut>:
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
    11f2:	bf 92       	push	r11
    11f4:	cf 92       	push	r12
    11f6:	df 92       	push	r13
    11f8:	ef 92       	push	r14
    11fa:	ff 92       	push	r15
    11fc:	0f 93       	push	r16
    11fe:	1f 93       	push	r17
    1200:	cf 93       	push	r28
    1202:	df 93       	push	r29
    1204:	c8 2e       	mov	r12, r24
    1206:	d6 2e       	mov	r13, r22
    1208:	b4 2e       	mov	r11, r20
    120a:	c7 e0       	ldi	r28, 0x07	; 7
    120c:	d0 e0       	ldi	r29, 0x00	; 0
    120e:	02 2f       	mov	r16, r18
    1210:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
			digitalWrite(dataPin, !!(val & (1 << i)));
    1212:	87 e0       	ldi	r24, 0x07	; 7
    1214:	e8 2e       	mov	r14, r24
    1216:	f1 2c       	mov	r15, r1
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
    1218:	b1 10       	cpse	r11, r1
    121a:	05 c0       	rjmp	.+10     	; 0x1226 <shiftOut+0x34>
			digitalWrite(dataPin, !!(val & (1 << i)));
    121c:	c7 01       	movw	r24, r14
    121e:	8c 1b       	sub	r24, r28
    1220:	9d 0b       	sbc	r25, r29
    1222:	b8 01       	movw	r22, r16
    1224:	02 c0       	rjmp	.+4      	; 0x122a <shiftOut+0x38>
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
    1226:	b8 01       	movw	r22, r16
    1228:	8c 2f       	mov	r24, r28
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <shiftOut+0x3e>
    122c:	75 95       	asr	r23
    122e:	67 95       	ror	r22
    1230:	8a 95       	dec	r24
    1232:	e2 f7       	brpl	.-8      	; 0x122c <shiftOut+0x3a>
    1234:	61 70       	andi	r22, 0x01	; 1
    1236:	8c 2d       	mov	r24, r12
    1238:	ae df       	rcall	.-164    	; 0x1196 <digitalWrite>
			
		digitalWrite(clockPin, HIGH);
    123a:	61 e0       	ldi	r22, 0x01	; 1
    123c:	8d 2d       	mov	r24, r13
		digitalWrite(clockPin, LOW);		
    123e:	ab df       	rcall	.-170    	; 0x1196 <digitalWrite>
    1240:	60 e0       	ldi	r22, 0x00	; 0
    1242:	8d 2d       	mov	r24, r13
    1244:	a8 df       	rcall	.-176    	; 0x1196 <digitalWrite>
    1246:	21 97       	sbiw	r28, 0x01	; 1
	}
}
    1248:	38 f7       	brcc	.-50     	; 0x1218 <shiftOut+0x26>
    124a:	df 91       	pop	r29
    124c:	cf 91       	pop	r28
    124e:	1f 91       	pop	r17
    1250:	0f 91       	pop	r16
    1252:	ff 90       	pop	r15
    1254:	ef 90       	pop	r14
    1256:	df 90       	pop	r13
    1258:	cf 90       	pop	r12
    125a:	bf 90       	pop	r11
    125c:	08 95       	ret

0000125e <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    125e:	08 95       	ret

00001260 <__tablejump2__>:
    1260:	ee 0f       	add	r30, r30
    1262:	ff 1f       	adc	r31, r31
    1264:	88 1f       	adc	r24, r24
    1266:	8b bf       	out	0x3b, r24	; 59
    1268:	07 90       	elpm	r0, Z+
    126a:	f6 91       	elpm	r31, Z
    126c:	e0 2d       	mov	r30, r0
    126e:	19 94       	eijmp

00001270 <malloc>:
    1270:	0f 93       	push	r16
    1272:	1f 93       	push	r17
    1274:	cf 93       	push	r28
    1276:	df 93       	push	r29
    1278:	82 30       	cpi	r24, 0x02	; 2
    127a:	91 05       	cpc	r25, r1
    127c:	10 f4       	brcc	.+4      	; 0x1282 <malloc+0x12>
    127e:	82 e0       	ldi	r24, 0x02	; 2
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <__flp>
    1286:	f0 91 7a 02 	lds	r31, 0x027A	; 0x80027a <__flp+0x1>
    128a:	20 e0       	ldi	r18, 0x00	; 0
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	a0 e0       	ldi	r26, 0x00	; 0
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	30 97       	sbiw	r30, 0x00	; 0
    1294:	19 f1       	breq	.+70     	; 0x12dc <malloc+0x6c>
    1296:	40 81       	ld	r20, Z
    1298:	51 81       	ldd	r21, Z+1	; 0x01
    129a:	02 81       	ldd	r16, Z+2	; 0x02
    129c:	13 81       	ldd	r17, Z+3	; 0x03
    129e:	48 17       	cp	r20, r24
    12a0:	59 07       	cpc	r21, r25
    12a2:	c8 f0       	brcs	.+50     	; 0x12d6 <malloc+0x66>
    12a4:	84 17       	cp	r24, r20
    12a6:	95 07       	cpc	r25, r21
    12a8:	69 f4       	brne	.+26     	; 0x12c4 <malloc+0x54>
    12aa:	10 97       	sbiw	r26, 0x00	; 0
    12ac:	31 f0       	breq	.+12     	; 0x12ba <malloc+0x4a>
    12ae:	12 96       	adiw	r26, 0x02	; 2
    12b0:	0c 93       	st	X, r16
    12b2:	12 97       	sbiw	r26, 0x02	; 2
    12b4:	13 96       	adiw	r26, 0x03	; 3
    12b6:	1c 93       	st	X, r17
    12b8:	27 c0       	rjmp	.+78     	; 0x1308 <malloc+0x98>
    12ba:	00 93 79 02 	sts	0x0279, r16	; 0x800279 <__flp>
    12be:	10 93 7a 02 	sts	0x027A, r17	; 0x80027a <__flp+0x1>
    12c2:	22 c0       	rjmp	.+68     	; 0x1308 <malloc+0x98>
    12c4:	21 15       	cp	r18, r1
    12c6:	31 05       	cpc	r19, r1
    12c8:	19 f0       	breq	.+6      	; 0x12d0 <malloc+0x60>
    12ca:	42 17       	cp	r20, r18
    12cc:	53 07       	cpc	r21, r19
    12ce:	18 f4       	brcc	.+6      	; 0x12d6 <malloc+0x66>
    12d0:	9a 01       	movw	r18, r20
    12d2:	bd 01       	movw	r22, r26
    12d4:	ef 01       	movw	r28, r30
    12d6:	df 01       	movw	r26, r30
    12d8:	f8 01       	movw	r30, r16
    12da:	db cf       	rjmp	.-74     	; 0x1292 <malloc+0x22>
    12dc:	21 15       	cp	r18, r1
    12de:	31 05       	cpc	r19, r1
    12e0:	f9 f0       	breq	.+62     	; 0x1320 <malloc+0xb0>
    12e2:	28 1b       	sub	r18, r24
    12e4:	39 0b       	sbc	r19, r25
    12e6:	24 30       	cpi	r18, 0x04	; 4
    12e8:	31 05       	cpc	r19, r1
    12ea:	80 f4       	brcc	.+32     	; 0x130c <malloc+0x9c>
    12ec:	8a 81       	ldd	r24, Y+2	; 0x02
    12ee:	9b 81       	ldd	r25, Y+3	; 0x03
    12f0:	61 15       	cp	r22, r1
    12f2:	71 05       	cpc	r23, r1
    12f4:	21 f0       	breq	.+8      	; 0x12fe <malloc+0x8e>
    12f6:	fb 01       	movw	r30, r22
    12f8:	93 83       	std	Z+3, r25	; 0x03
    12fa:	82 83       	std	Z+2, r24	; 0x02
    12fc:	04 c0       	rjmp	.+8      	; 0x1306 <malloc+0x96>
    12fe:	90 93 7a 02 	sts	0x027A, r25	; 0x80027a <__flp+0x1>
    1302:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <__flp>
    1306:	fe 01       	movw	r30, r28
    1308:	32 96       	adiw	r30, 0x02	; 2
    130a:	44 c0       	rjmp	.+136    	; 0x1394 <malloc+0x124>
    130c:	fe 01       	movw	r30, r28
    130e:	e2 0f       	add	r30, r18
    1310:	f3 1f       	adc	r31, r19
    1312:	81 93       	st	Z+, r24
    1314:	91 93       	st	Z+, r25
    1316:	22 50       	subi	r18, 0x02	; 2
    1318:	31 09       	sbc	r19, r1
    131a:	39 83       	std	Y+1, r19	; 0x01
    131c:	28 83       	st	Y, r18
    131e:	3a c0       	rjmp	.+116    	; 0x1394 <malloc+0x124>
    1320:	20 91 77 02 	lds	r18, 0x0277	; 0x800277 <__brkval>
    1324:	30 91 78 02 	lds	r19, 0x0278	; 0x800278 <__brkval+0x1>
    1328:	23 2b       	or	r18, r19
    132a:	41 f4       	brne	.+16     	; 0x133c <malloc+0xcc>
    132c:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    1330:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    1334:	30 93 78 02 	sts	0x0278, r19	; 0x800278 <__brkval+0x1>
    1338:	20 93 77 02 	sts	0x0277, r18	; 0x800277 <__brkval>
    133c:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    1340:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    1344:	21 15       	cp	r18, r1
    1346:	31 05       	cpc	r19, r1
    1348:	41 f4       	brne	.+16     	; 0x135a <malloc+0xea>
    134a:	2d b7       	in	r18, 0x3d	; 61
    134c:	3e b7       	in	r19, 0x3e	; 62
    134e:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    1352:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    1356:	24 1b       	sub	r18, r20
    1358:	35 0b       	sbc	r19, r21
    135a:	e0 91 77 02 	lds	r30, 0x0277	; 0x800277 <__brkval>
    135e:	f0 91 78 02 	lds	r31, 0x0278	; 0x800278 <__brkval+0x1>
    1362:	e2 17       	cp	r30, r18
    1364:	f3 07       	cpc	r31, r19
    1366:	a0 f4       	brcc	.+40     	; 0x1390 <malloc+0x120>
    1368:	2e 1b       	sub	r18, r30
    136a:	3f 0b       	sbc	r19, r31
    136c:	28 17       	cp	r18, r24
    136e:	39 07       	cpc	r19, r25
    1370:	78 f0       	brcs	.+30     	; 0x1390 <malloc+0x120>
    1372:	ac 01       	movw	r20, r24
    1374:	4e 5f       	subi	r20, 0xFE	; 254
    1376:	5f 4f       	sbci	r21, 0xFF	; 255
    1378:	24 17       	cp	r18, r20
    137a:	35 07       	cpc	r19, r21
    137c:	48 f0       	brcs	.+18     	; 0x1390 <malloc+0x120>
    137e:	4e 0f       	add	r20, r30
    1380:	5f 1f       	adc	r21, r31
    1382:	50 93 78 02 	sts	0x0278, r21	; 0x800278 <__brkval+0x1>
    1386:	40 93 77 02 	sts	0x0277, r20	; 0x800277 <__brkval>
    138a:	81 93       	st	Z+, r24
    138c:	91 93       	st	Z+, r25
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <malloc+0x124>
    1390:	e0 e0       	ldi	r30, 0x00	; 0
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	cf 01       	movw	r24, r30
    1396:	df 91       	pop	r29
    1398:	cf 91       	pop	r28
    139a:	1f 91       	pop	r17
    139c:	0f 91       	pop	r16
    139e:	08 95       	ret

000013a0 <free>:
    13a0:	cf 93       	push	r28
    13a2:	df 93       	push	r29
    13a4:	00 97       	sbiw	r24, 0x00	; 0
    13a6:	09 f4       	brne	.+2      	; 0x13aa <free+0xa>
    13a8:	81 c0       	rjmp	.+258    	; 0x14ac <free+0x10c>
    13aa:	fc 01       	movw	r30, r24
    13ac:	32 97       	sbiw	r30, 0x02	; 2
    13ae:	13 82       	std	Z+3, r1	; 0x03
    13b0:	12 82       	std	Z+2, r1	; 0x02
    13b2:	a0 91 79 02 	lds	r26, 0x0279	; 0x800279 <__flp>
    13b6:	b0 91 7a 02 	lds	r27, 0x027A	; 0x80027a <__flp+0x1>
    13ba:	10 97       	sbiw	r26, 0x00	; 0
    13bc:	81 f4       	brne	.+32     	; 0x13de <free+0x3e>
    13be:	20 81       	ld	r18, Z
    13c0:	31 81       	ldd	r19, Z+1	; 0x01
    13c2:	82 0f       	add	r24, r18
    13c4:	93 1f       	adc	r25, r19
    13c6:	20 91 77 02 	lds	r18, 0x0277	; 0x800277 <__brkval>
    13ca:	30 91 78 02 	lds	r19, 0x0278	; 0x800278 <__brkval+0x1>
    13ce:	28 17       	cp	r18, r24
    13d0:	39 07       	cpc	r19, r25
    13d2:	51 f5       	brne	.+84     	; 0x1428 <free+0x88>
    13d4:	f0 93 78 02 	sts	0x0278, r31	; 0x800278 <__brkval+0x1>
    13d8:	e0 93 77 02 	sts	0x0277, r30	; 0x800277 <__brkval>
    13dc:	67 c0       	rjmp	.+206    	; 0x14ac <free+0x10c>
    13de:	ed 01       	movw	r28, r26
    13e0:	20 e0       	ldi	r18, 0x00	; 0
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	ce 17       	cp	r28, r30
    13e6:	df 07       	cpc	r29, r31
    13e8:	40 f4       	brcc	.+16     	; 0x13fa <free+0x5a>
    13ea:	4a 81       	ldd	r20, Y+2	; 0x02
    13ec:	5b 81       	ldd	r21, Y+3	; 0x03
    13ee:	9e 01       	movw	r18, r28
    13f0:	41 15       	cp	r20, r1
    13f2:	51 05       	cpc	r21, r1
    13f4:	f1 f0       	breq	.+60     	; 0x1432 <free+0x92>
    13f6:	ea 01       	movw	r28, r20
    13f8:	f5 cf       	rjmp	.-22     	; 0x13e4 <free+0x44>
    13fa:	d3 83       	std	Z+3, r29	; 0x03
    13fc:	c2 83       	std	Z+2, r28	; 0x02
    13fe:	40 81       	ld	r20, Z
    1400:	51 81       	ldd	r21, Z+1	; 0x01
    1402:	84 0f       	add	r24, r20
    1404:	95 1f       	adc	r25, r21
    1406:	c8 17       	cp	r28, r24
    1408:	d9 07       	cpc	r29, r25
    140a:	59 f4       	brne	.+22     	; 0x1422 <free+0x82>
    140c:	88 81       	ld	r24, Y
    140e:	99 81       	ldd	r25, Y+1	; 0x01
    1410:	84 0f       	add	r24, r20
    1412:	95 1f       	adc	r25, r21
    1414:	02 96       	adiw	r24, 0x02	; 2
    1416:	91 83       	std	Z+1, r25	; 0x01
    1418:	80 83       	st	Z, r24
    141a:	8a 81       	ldd	r24, Y+2	; 0x02
    141c:	9b 81       	ldd	r25, Y+3	; 0x03
    141e:	93 83       	std	Z+3, r25	; 0x03
    1420:	82 83       	std	Z+2, r24	; 0x02
    1422:	21 15       	cp	r18, r1
    1424:	31 05       	cpc	r19, r1
    1426:	29 f4       	brne	.+10     	; 0x1432 <free+0x92>
    1428:	f0 93 7a 02 	sts	0x027A, r31	; 0x80027a <__flp+0x1>
    142c:	e0 93 79 02 	sts	0x0279, r30	; 0x800279 <__flp>
    1430:	3d c0       	rjmp	.+122    	; 0x14ac <free+0x10c>
    1432:	e9 01       	movw	r28, r18
    1434:	fb 83       	std	Y+3, r31	; 0x03
    1436:	ea 83       	std	Y+2, r30	; 0x02
    1438:	49 91       	ld	r20, Y+
    143a:	59 91       	ld	r21, Y+
    143c:	c4 0f       	add	r28, r20
    143e:	d5 1f       	adc	r29, r21
    1440:	ec 17       	cp	r30, r28
    1442:	fd 07       	cpc	r31, r29
    1444:	61 f4       	brne	.+24     	; 0x145e <free+0xbe>
    1446:	80 81       	ld	r24, Z
    1448:	91 81       	ldd	r25, Z+1	; 0x01
    144a:	84 0f       	add	r24, r20
    144c:	95 1f       	adc	r25, r21
    144e:	02 96       	adiw	r24, 0x02	; 2
    1450:	e9 01       	movw	r28, r18
    1452:	99 83       	std	Y+1, r25	; 0x01
    1454:	88 83       	st	Y, r24
    1456:	82 81       	ldd	r24, Z+2	; 0x02
    1458:	93 81       	ldd	r25, Z+3	; 0x03
    145a:	9b 83       	std	Y+3, r25	; 0x03
    145c:	8a 83       	std	Y+2, r24	; 0x02
    145e:	e0 e0       	ldi	r30, 0x00	; 0
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	12 96       	adiw	r26, 0x02	; 2
    1464:	8d 91       	ld	r24, X+
    1466:	9c 91       	ld	r25, X
    1468:	13 97       	sbiw	r26, 0x03	; 3
    146a:	00 97       	sbiw	r24, 0x00	; 0
    146c:	19 f0       	breq	.+6      	; 0x1474 <free+0xd4>
    146e:	fd 01       	movw	r30, r26
    1470:	dc 01       	movw	r26, r24
    1472:	f7 cf       	rjmp	.-18     	; 0x1462 <free+0xc2>
    1474:	8d 91       	ld	r24, X+
    1476:	9c 91       	ld	r25, X
    1478:	11 97       	sbiw	r26, 0x01	; 1
    147a:	9d 01       	movw	r18, r26
    147c:	2e 5f       	subi	r18, 0xFE	; 254
    147e:	3f 4f       	sbci	r19, 0xFF	; 255
    1480:	82 0f       	add	r24, r18
    1482:	93 1f       	adc	r25, r19
    1484:	20 91 77 02 	lds	r18, 0x0277	; 0x800277 <__brkval>
    1488:	30 91 78 02 	lds	r19, 0x0278	; 0x800278 <__brkval+0x1>
    148c:	28 17       	cp	r18, r24
    148e:	39 07       	cpc	r19, r25
    1490:	69 f4       	brne	.+26     	; 0x14ac <free+0x10c>
    1492:	30 97       	sbiw	r30, 0x00	; 0
    1494:	29 f4       	brne	.+10     	; 0x14a0 <free+0x100>
    1496:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <__flp+0x1>
    149a:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <__flp>
    149e:	02 c0       	rjmp	.+4      	; 0x14a4 <free+0x104>
    14a0:	13 82       	std	Z+3, r1	; 0x03
    14a2:	12 82       	std	Z+2, r1	; 0x02
    14a4:	b0 93 78 02 	sts	0x0278, r27	; 0x800278 <__brkval+0x1>
    14a8:	a0 93 77 02 	sts	0x0277, r26	; 0x800277 <__brkval>
    14ac:	df 91       	pop	r29
    14ae:	cf 91       	pop	r28
    14b0:	08 95       	ret

000014b2 <_exit>:
    14b2:	f8 94       	cli

000014b4 <__stop_program>:
    14b4:	ff cf       	rjmp	.-2      	; 0x14b4 <__stop_program>
