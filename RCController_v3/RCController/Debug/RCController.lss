
RCController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800200  0000069c  00000730  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000069c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800216  00800216  00000746  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000746  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000778  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  000007b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000270f  00000000  00000000  00000958  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000148e  00000000  00000000  00003067  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ff0  00000000  00000000  000044f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000368  00000000  00000000  000054e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c06  00000000  00000000  00005850  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e41  00000000  00000000  00006456  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00007297  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	f9 c0       	rjmp	.+498    	; 0x1f4 <__ctors_end>
   2:	00 00       	nop
   4:	16 c1       	rjmp	.+556    	; 0x232 <__bad_interrupt>
   6:	00 00       	nop
   8:	14 c1       	rjmp	.+552    	; 0x232 <__bad_interrupt>
   a:	00 00       	nop
   c:	12 c1       	rjmp	.+548    	; 0x232 <__bad_interrupt>
   e:	00 00       	nop
  10:	10 c1       	rjmp	.+544    	; 0x232 <__bad_interrupt>
  12:	00 00       	nop
  14:	0e c1       	rjmp	.+540    	; 0x232 <__bad_interrupt>
  16:	00 00       	nop
  18:	0c c1       	rjmp	.+536    	; 0x232 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	0a c1       	rjmp	.+532    	; 0x232 <__bad_interrupt>
  1e:	00 00       	nop
  20:	08 c1       	rjmp	.+528    	; 0x232 <__bad_interrupt>
  22:	00 00       	nop
  24:	06 c1       	rjmp	.+524    	; 0x232 <__bad_interrupt>
  26:	00 00       	nop
  28:	04 c1       	rjmp	.+520    	; 0x232 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	02 c1       	rjmp	.+516    	; 0x232 <__bad_interrupt>
  2e:	00 00       	nop
  30:	00 c1       	rjmp	.+512    	; 0x232 <__bad_interrupt>
  32:	00 00       	nop
  34:	fe c0       	rjmp	.+508    	; 0x232 <__bad_interrupt>
  36:	00 00       	nop
  38:	fc c0       	rjmp	.+504    	; 0x232 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	fa c0       	rjmp	.+500    	; 0x232 <__bad_interrupt>
  3e:	00 00       	nop
  40:	f8 c0       	rjmp	.+496    	; 0x232 <__bad_interrupt>
  42:	00 00       	nop
  44:	f6 c0       	rjmp	.+492    	; 0x232 <__bad_interrupt>
  46:	00 00       	nop
  48:	f4 c0       	rjmp	.+488    	; 0x232 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	f2 c0       	rjmp	.+484    	; 0x232 <__bad_interrupt>
  4e:	00 00       	nop
  50:	f0 c0       	rjmp	.+480    	; 0x232 <__bad_interrupt>
  52:	00 00       	nop
  54:	ee c0       	rjmp	.+476    	; 0x232 <__bad_interrupt>
  56:	00 00       	nop
  58:	ec c0       	rjmp	.+472    	; 0x232 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	51 c1       	rjmp	.+674    	; 0x300 <__vector_23>
  5e:	00 00       	nop
  60:	e8 c0       	rjmp	.+464    	; 0x232 <__bad_interrupt>
  62:	00 00       	nop
  64:	e6 c0       	rjmp	.+460    	; 0x232 <__bad_interrupt>
  66:	00 00       	nop
  68:	e4 c0       	rjmp	.+456    	; 0x232 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	e2 c0       	rjmp	.+452    	; 0x232 <__bad_interrupt>
  6e:	00 00       	nop
  70:	e0 c0       	rjmp	.+448    	; 0x232 <__bad_interrupt>
  72:	00 00       	nop
  74:	de c0       	rjmp	.+444    	; 0x232 <__bad_interrupt>
  76:	00 00       	nop
  78:	dc c0       	rjmp	.+440    	; 0x232 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	da c0       	rjmp	.+436    	; 0x232 <__bad_interrupt>
  7e:	00 00       	nop
  80:	d8 c0       	rjmp	.+432    	; 0x232 <__bad_interrupt>
  82:	00 00       	nop
  84:	d6 c0       	rjmp	.+428    	; 0x232 <__bad_interrupt>
  86:	00 00       	nop
  88:	d4 c0       	rjmp	.+424    	; 0x232 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	d2 c0       	rjmp	.+420    	; 0x232 <__bad_interrupt>
  8e:	00 00       	nop
  90:	d0 c0       	rjmp	.+416    	; 0x232 <__bad_interrupt>
  92:	00 00       	nop
  94:	ce c0       	rjmp	.+412    	; 0x232 <__bad_interrupt>
  96:	00 00       	nop
  98:	cc c0       	rjmp	.+408    	; 0x232 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	ca c0       	rjmp	.+404    	; 0x232 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	c8 c0       	rjmp	.+400    	; 0x232 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	c6 c0       	rjmp	.+396    	; 0x232 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	c4 c0       	rjmp	.+392    	; 0x232 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	c2 c0       	rjmp	.+388    	; 0x232 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	c0 c0       	rjmp	.+384    	; 0x232 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	be c0       	rjmp	.+380    	; 0x232 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	bc c0       	rjmp	.+376    	; 0x232 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	ba c0       	rjmp	.+372    	; 0x232 <__bad_interrupt>
  be:	00 00       	nop
  c0:	b8 c0       	rjmp	.+368    	; 0x232 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	b6 c0       	rjmp	.+364    	; 0x232 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	b4 c0       	rjmp	.+360    	; 0x232 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	b2 c0       	rjmp	.+356    	; 0x232 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	b0 c0       	rjmp	.+352    	; 0x232 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	ae c0       	rjmp	.+348    	; 0x232 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	ac c0       	rjmp	.+344    	; 0x232 <__bad_interrupt>
  da:	00 00       	nop
  dc:	aa c0       	rjmp	.+340    	; 0x232 <__bad_interrupt>
  de:	00 00       	nop
  e0:	a8 c0       	rjmp	.+336    	; 0x232 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	a4 02       	muls	r26, r20
  e6:	a7 02       	muls	r26, r23
  e8:	96 02       	muls	r25, r22
  ea:	9a 02       	muls	r25, r26
  ec:	a0 02       	muls	r26, r16
  ee:	de 02       	muls	r29, r30
  f0:	ab 02       	muls	r26, r27
  f2:	af 02       	muls	r26, r31
  f4:	b5 02       	muls	r27, r21
  f6:	b9 02       	muls	r27, r25
  f8:	bd 02       	muls	r27, r29
  fa:	c3 02       	muls	r28, r19
  fc:	c7 02       	muls	r28, r23
  fe:	cb 02       	muls	r28, r27
 100:	de 02       	muls	r29, r30
 102:	d1 02       	muls	r29, r17
 104:	d5 02       	muls	r29, r21
 106:	d9 02       	muls	r29, r25

00000108 <__trampolines_end>:
 108:	00 00       	nop
 10a:	0a 0b       	sbc	r16, r26
 10c:	02 09       	sbc	r16, r2
 10e:	0c 0d       	add	r16, r12
 110:	0e 08       	sbc	r0, r14
 112:	07 03       	mulsu	r16, r23
 114:	04 01       	movw	r0, r8
	...
 132:	00 00       	nop
 134:	12 11       	cpse	r17, r2
 136:	10 00       	.word	0x0010	; ????
	...

0000014e <digital_pin_to_bit_mask_PGM>:
 14e:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
 15e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
 16e:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
 17e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
 18e:	04 08 10 20 40 80                                   ... @.

00000194 <digital_pin_to_port_PGM>:
 194:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
 1a4:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
 1b4:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
 1c4:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
 1d4:	0b 0b 0b 0b 0b 0b                                   ......

000001da <port_to_output_PGM>:
 1da:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
 1ea:	02 01 00 00 05 01 08 01 0b 01                       ..........

000001f4 <__ctors_end>:
 1f4:	11 24       	eor	r1, r1
 1f6:	1f be       	out	0x3f, r1	; 63
 1f8:	cf ef       	ldi	r28, 0xFF	; 255
 1fa:	d1 e2       	ldi	r29, 0x21	; 33
 1fc:	de bf       	out	0x3e, r29	; 62
 1fe:	cd bf       	out	0x3d, r28	; 61
 200:	00 e0       	ldi	r16, 0x00	; 0
 202:	0c bf       	out	0x3c, r16	; 60

00000204 <__do_copy_data>:
 204:	12 e0       	ldi	r17, 0x02	; 2
 206:	a0 e0       	ldi	r26, 0x00	; 0
 208:	b2 e0       	ldi	r27, 0x02	; 2
 20a:	ec e9       	ldi	r30, 0x9C	; 156
 20c:	f6 e0       	ldi	r31, 0x06	; 6
 20e:	00 e0       	ldi	r16, 0x00	; 0
 210:	0b bf       	out	0x3b, r16	; 59
 212:	02 c0       	rjmp	.+4      	; 0x218 <__do_copy_data+0x14>
 214:	07 90       	elpm	r0, Z+
 216:	0d 92       	st	X+, r0
 218:	a6 31       	cpi	r26, 0x16	; 22
 21a:	b1 07       	cpc	r27, r17
 21c:	d9 f7       	brne	.-10     	; 0x214 <__do_copy_data+0x10>

0000021e <__do_clear_bss>:
 21e:	22 e0       	ldi	r18, 0x02	; 2
 220:	a6 e1       	ldi	r26, 0x16	; 22
 222:	b2 e0       	ldi	r27, 0x02	; 2
 224:	01 c0       	rjmp	.+2      	; 0x228 <.do_clear_bss_start>

00000226 <.do_clear_bss_loop>:
 226:	1d 92       	st	X+, r1

00000228 <.do_clear_bss_start>:
 228:	a3 32       	cpi	r26, 0x23	; 35
 22a:	b2 07       	cpc	r27, r18
 22c:	e1 f7       	brne	.-8      	; 0x226 <.do_clear_bss_loop>
 22e:	5d d0       	rcall	.+186    	; 0x2ea <main>
 230:	33 c2       	rjmp	.+1126   	; 0x698 <_exit>

00000232 <__bad_interrupt>:
 232:	e6 ce       	rjmp	.-564    	; 0x0 <__vectors>

00000234 <controller_initialize>:
#include "controller.h"

tact_switch_board controller_tact_switches;

void controller_initialize(controller *self)
{   
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
 238:	ec 01       	movw	r28, r24
    self->switches = &controller_tact_switches;
 23a:	e0 e0       	ldi	r30, 0x00	; 0
 23c:	f2 e0       	ldi	r31, 0x02	; 2
 23e:	f9 83       	std	Y+1, r31	; 0x01
 240:	e8 83       	st	Y, r30
    self->switches->data_pin = 1;
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	80 83       	st	Z, r24
    self->switches->interrupt_pin = 2;
 246:	e8 81       	ld	r30, Y
 248:	f9 81       	ldd	r31, Y+1	; 0x01
 24a:	82 e0       	ldi	r24, 0x02	; 2
 24c:	81 83       	std	Z+1, r24	; 0x01
  
    self->leds = (led_shift_register*)(sizeof(led_shift_register));
 24e:	e8 e0       	ldi	r30, 0x08	; 8
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	fb 83       	std	Y+3, r31	; 0x03
 254:	ea 83       	std	Y+2, r30	; 0x02
    self->leds->data_pin = 53;
 256:	85 e3       	ldi	r24, 0x35	; 53
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	91 83       	std	Z+1, r25	; 0x01
 25c:	80 83       	st	Z, r24
    self->leds->clock_pin = 49;
 25e:	81 e3       	ldi	r24, 0x31	; 49
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	93 83       	std	Z+3, r25	; 0x03
 264:	82 83       	std	Z+2, r24	; 0x02
    self->leds->latch_pin = 51;
 266:	83 e3       	ldi	r24, 0x33	; 51
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	95 83       	std	Z+5, r25	; 0x05
 26c:	84 83       	std	Z+4, r24	; 0x04
    /*lcd.begin(16,2);
    lcd.setCursor(0, 0);
    lcd.print("RC Controller");
    lcd.setCursor(0, 1);
    lcd.print("ver. 1.0");*/
    delay(2000);
 26e:	60 ed       	ldi	r22, 0xD0	; 208
 270:	77 e0       	ldi	r23, 0x07	; 7
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	b3 d0       	rcall	.+358    	; 0x3de <delay>
    /*lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Testing LEDs...");*/
    //Testign controller info leds
    led_shift_register_test(self->leds);
 278:	8a 81       	ldd	r24, Y+2	; 0x02
 27a:	9b 81       	ldd	r25, Y+3	; 0x03
    /*lcd.clear();
    lcd.print("WELCOME");*/
}
 27c:	df 91       	pop	r29
    delay(2000);
    /*lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Testing LEDs...");*/
    //Testign controller info leds
    led_shift_register_test(self->leds);
 27e:	cf 91       	pop	r28
 280:	19 c0       	rjmp	.+50     	; 0x2b4 <led_shift_register_test>

00000282 <led_shift_register_write>:
  shift_register->led_state = shift_register->led_state & (!(short)led);
  led_shift_register_write(shift_register, shift_register->led_state);
}

void led_shift_register_write(led_shift_register *shift_register, short value)
{
 282:	1f 93       	push	r17
 284:	cf 93       	push	r28
 286:	df 93       	push	r29
 288:	ec 01       	movw	r28, r24
 28a:	16 2f       	mov	r17, r22
    digitalWrite(shift_register->latch_pin, LOW);
 28c:	60 e0       	ldi	r22, 0x00	; 0
 28e:	8c 81       	ldd	r24, Y+4	; 0x04
 290:	96 d1       	rcall	.+812    	; 0x5be <digitalWrite>
    shiftOut(shift_register->data_pin, shift_register->clock_pin, MSBFIRST, value);
 292:	21 2f       	mov	r18, r17
 294:	41 e0       	ldi	r20, 0x01	; 1
 296:	6a 81       	ldd	r22, Y+2	; 0x02
 298:	88 81       	ld	r24, Y
 29a:	bf d1       	rcall	.+894    	; 0x61a <shiftOut>
    digitalWrite(shift_register->latch_pin, HIGH);
 29c:	61 e0       	ldi	r22, 0x01	; 1
 29e:	8c 81       	ldd	r24, Y+4	; 0x04
 2a0:	df 91       	pop	r29
 2a2:	cf 91       	pop	r28

void led_shift_register_write(led_shift_register *shift_register, short value)
{
    digitalWrite(shift_register->latch_pin, LOW);
    shiftOut(shift_register->data_pin, shift_register->clock_pin, MSBFIRST, value);
    digitalWrite(shift_register->latch_pin, HIGH);
 2a4:	1f 91       	pop	r17
 2a6:	8b c1       	rjmp	.+790    	; 0x5be <digitalWrite>

000002a8 <led_shift_register_reset>:
    led_shift_register_reset(shift_register);
}

void led_shift_register_reset(led_shift_register *shift_register)
{
    shift_register->led_state = 0;
 2a8:	fc 01       	movw	r30, r24
 2aa:	17 82       	std	Z+7, r1	; 0x07
 2ac:	16 82       	std	Z+6, r1	; 0x06
    led_shift_register_write(shift_register, shift_register->led_state);
 2ae:	60 e0       	ldi	r22, 0x00	; 0
 2b0:	70 e0       	ldi	r23, 0x00	; 0
 2b2:	e7 cf       	rjmp	.-50     	; 0x282 <led_shift_register_write>

000002b4 <led_shift_register_test>:

static void led_shift_register_write(led_shift_register *, short);


void led_shift_register_test(led_shift_register *shift_register)
{
 2b4:	cf 93       	push	r28
 2b6:	df 93       	push	r29
 2b8:	ec 01       	movw	r28, r24
    for(shift_register->led_state = 0; shift_register->led_state <= 128; shift_register->led_state = shift_register->led_state * 2)
 2ba:	1f 82       	std	Y+7, r1	; 0x07
 2bc:	1e 82       	std	Y+6, r1	; 0x06
 2be:	6e 81       	ldd	r22, Y+6	; 0x06
 2c0:	7f 81       	ldd	r23, Y+7	; 0x07
    {
      led_shift_register_write(shift_register, shift_register->led_state);
 2c2:	ce 01       	movw	r24, r28
static void led_shift_register_write(led_shift_register *, short);


void led_shift_register_test(led_shift_register *shift_register)
{
    for(shift_register->led_state = 0; shift_register->led_state <= 128; shift_register->led_state = shift_register->led_state * 2)
 2c4:	61 38       	cpi	r22, 0x81	; 129
 2c6:	71 05       	cpc	r23, r1
    {
      led_shift_register_write(shift_register, shift_register->led_state);
 2c8:	44 f4       	brge	.+16     	; 0x2da <led_shift_register_test+0x26>
static void led_shift_register_write(led_shift_register *, short);


void led_shift_register_test(led_shift_register *shift_register)
{
    for(shift_register->led_state = 0; shift_register->led_state <= 128; shift_register->led_state = shift_register->led_state * 2)
 2ca:	db df       	rcall	.-74     	; 0x282 <led_shift_register_write>
 2cc:	8e 81       	ldd	r24, Y+6	; 0x06
 2ce:	9f 81       	ldd	r25, Y+7	; 0x07
 2d0:	88 0f       	add	r24, r24
 2d2:	99 1f       	adc	r25, r25
 2d4:	9f 83       	std	Y+7, r25	; 0x07
 2d6:	8e 83       	std	Y+6, r24	; 0x06
    {
      led_shift_register_write(shift_register, shift_register->led_state);
    }
    
    led_shift_register_reset(shift_register);
}
 2d8:	f2 cf       	rjmp	.-28     	; 0x2be <led_shift_register_test+0xa>
    for(shift_register->led_state = 0; shift_register->led_state <= 128; shift_register->led_state = shift_register->led_state * 2)
    {
      led_shift_register_write(shift_register, shift_register->led_state);
    }
    
    led_shift_register_reset(shift_register);
 2da:	df 91       	pop	r29
 2dc:	cf 91       	pop	r28
 2de:	e4 cf       	rjmp	.-56     	; 0x2a8 <led_shift_register_reset>

000002e0 <setup>:

controller rc_controller;

void setup() {
  // put your setup code here, to run once:
  controller_initialize(&rc_controller);
 2e0:	8f e1       	ldi	r24, 0x1F	; 31
 2e2:	92 e0       	ldi	r25, 0x02	; 2
 2e4:	a7 cf       	rjmp	.-178    	; 0x234 <controller_initialize>

000002e6 <loop>:
}

void loop() {
 2e6:	08 95       	ret

000002e8 <initVariant>:
 2e8:	08 95       	ret

000002ea <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 2ea:	b2 d0       	rcall	.+356    	; 0x450 <init>
 2ec:	fd df       	rcall	.-6      	; 0x2e8 <initVariant>
 2ee:	f8 df       	rcall	.-16     	; 0x2e0 <setup>
 2f0:	c0 e0       	ldi	r28, 0x00	; 0
 2f2:	d0 e0       	ldi	r29, 0x00	; 0
 2f4:	f8 df       	rcall	.-16     	; 0x2e6 <loop>
 2f6:	20 97       	sbiw	r28, 0x00	; 0
 2f8:	e9 f3       	breq	.-6      	; 0x2f4 <main+0xa>
 2fa:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 2fe:	fa cf       	rjmp	.-12     	; 0x2f4 <main+0xa>

00000300 <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 300:	1f 92       	push	r1
 302:	0f 92       	push	r0
 304:	0f b6       	in	r0, 0x3f	; 63
 306:	0f 92       	push	r0
 308:	11 24       	eor	r1, r1
 30a:	2f 93       	push	r18
 30c:	3f 93       	push	r19
 30e:	8f 93       	push	r24
 310:	9f 93       	push	r25
 312:	af 93       	push	r26
 314:	bf 93       	push	r27
 316:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <timer0_millis>
 31a:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <timer0_millis+0x1>
 31e:	a0 91 19 02 	lds	r26, 0x0219	; 0x800219 <timer0_millis+0x2>
 322:	b0 91 1a 02 	lds	r27, 0x021A	; 0x80021a <timer0_millis+0x3>
 326:	30 91 16 02 	lds	r19, 0x0216	; 0x800216 <__data_end>
 32a:	23 e0       	ldi	r18, 0x03	; 3
 32c:	23 0f       	add	r18, r19
 32e:	2d 37       	cpi	r18, 0x7D	; 125
 330:	20 f4       	brcc	.+8      	; 0x33a <__vector_23+0x3a>
 332:	01 96       	adiw	r24, 0x01	; 1
 334:	a1 1d       	adc	r26, r1
 336:	b1 1d       	adc	r27, r1
 338:	05 c0       	rjmp	.+10     	; 0x344 <__vector_23+0x44>
 33a:	26 e8       	ldi	r18, 0x86	; 134
 33c:	23 0f       	add	r18, r19
 33e:	02 96       	adiw	r24, 0x02	; 2
 340:	a1 1d       	adc	r26, r1
 342:	b1 1d       	adc	r27, r1
 344:	20 93 16 02 	sts	0x0216, r18	; 0x800216 <__data_end>
 348:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <timer0_millis>
 34c:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <timer0_millis+0x1>
 350:	a0 93 19 02 	sts	0x0219, r26	; 0x800219 <timer0_millis+0x2>
 354:	b0 93 1a 02 	sts	0x021A, r27	; 0x80021a <timer0_millis+0x3>
 358:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <timer0_overflow_count>
 35c:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <timer0_overflow_count+0x1>
 360:	a0 91 1d 02 	lds	r26, 0x021D	; 0x80021d <timer0_overflow_count+0x2>
 364:	b0 91 1e 02 	lds	r27, 0x021E	; 0x80021e <timer0_overflow_count+0x3>
 368:	01 96       	adiw	r24, 0x01	; 1
 36a:	a1 1d       	adc	r26, r1
 36c:	b1 1d       	adc	r27, r1
 36e:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <timer0_overflow_count>
 372:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <timer0_overflow_count+0x1>
 376:	a0 93 1d 02 	sts	0x021D, r26	; 0x80021d <timer0_overflow_count+0x2>
 37a:	b0 93 1e 02 	sts	0x021E, r27	; 0x80021e <timer0_overflow_count+0x3>
 37e:	bf 91       	pop	r27
 380:	af 91       	pop	r26
 382:	9f 91       	pop	r25
 384:	8f 91       	pop	r24
 386:	3f 91       	pop	r19
 388:	2f 91       	pop	r18
 38a:	0f 90       	pop	r0
 38c:	0f be       	out	0x3f, r0	; 63
 38e:	0f 90       	pop	r0
 390:	1f 90       	pop	r1
 392:	18 95       	reti

00000394 <micros>:
 394:	3f b7       	in	r19, 0x3f	; 63
 396:	f8 94       	cli
 398:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <timer0_overflow_count>
 39c:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <timer0_overflow_count+0x1>
 3a0:	a0 91 1d 02 	lds	r26, 0x021D	; 0x80021d <timer0_overflow_count+0x2>
 3a4:	b0 91 1e 02 	lds	r27, 0x021E	; 0x80021e <timer0_overflow_count+0x3>
 3a8:	26 b5       	in	r18, 0x26	; 38
 3aa:	a8 9b       	sbis	0x15, 0	; 21
 3ac:	05 c0       	rjmp	.+10     	; 0x3b8 <micros+0x24>
 3ae:	2f 3f       	cpi	r18, 0xFF	; 255
 3b0:	19 f0       	breq	.+6      	; 0x3b8 <micros+0x24>
 3b2:	01 96       	adiw	r24, 0x01	; 1
 3b4:	a1 1d       	adc	r26, r1
 3b6:	b1 1d       	adc	r27, r1
 3b8:	3f bf       	out	0x3f, r19	; 63
 3ba:	ba 2f       	mov	r27, r26
 3bc:	a9 2f       	mov	r26, r25
 3be:	98 2f       	mov	r25, r24
 3c0:	88 27       	eor	r24, r24
 3c2:	82 0f       	add	r24, r18
 3c4:	91 1d       	adc	r25, r1
 3c6:	a1 1d       	adc	r26, r1
 3c8:	b1 1d       	adc	r27, r1
 3ca:	bc 01       	movw	r22, r24
 3cc:	cd 01       	movw	r24, r26
 3ce:	42 e0       	ldi	r20, 0x02	; 2
 3d0:	66 0f       	add	r22, r22
 3d2:	77 1f       	adc	r23, r23
 3d4:	88 1f       	adc	r24, r24
 3d6:	99 1f       	adc	r25, r25
 3d8:	4a 95       	dec	r20
 3da:	d1 f7       	brne	.-12     	; 0x3d0 <micros+0x3c>
 3dc:	08 95       	ret

000003de <delay>:
 3de:	8f 92       	push	r8
 3e0:	9f 92       	push	r9
 3e2:	af 92       	push	r10
 3e4:	bf 92       	push	r11
 3e6:	cf 92       	push	r12
 3e8:	df 92       	push	r13
 3ea:	ef 92       	push	r14
 3ec:	ff 92       	push	r15
 3ee:	6b 01       	movw	r12, r22
 3f0:	7c 01       	movw	r14, r24
 3f2:	d0 df       	rcall	.-96     	; 0x394 <micros>
 3f4:	4b 01       	movw	r8, r22
 3f6:	5c 01       	movw	r10, r24
 3f8:	c1 14       	cp	r12, r1
 3fa:	d1 04       	cpc	r13, r1
 3fc:	e1 04       	cpc	r14, r1
 3fe:	f1 04       	cpc	r15, r1
 400:	f1 f0       	breq	.+60     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 402:	41 d1       	rcall	.+642    	; 0x686 <yield>
 404:	c7 df       	rcall	.-114    	; 0x394 <micros>
 406:	dc 01       	movw	r26, r24
 408:	cb 01       	movw	r24, r22
 40a:	88 19       	sub	r24, r8
 40c:	99 09       	sbc	r25, r9
 40e:	aa 09       	sbc	r26, r10
 410:	bb 09       	sbc	r27, r11
 412:	88 3e       	cpi	r24, 0xE8	; 232
 414:	93 40       	sbci	r25, 0x03	; 3
 416:	a1 05       	cpc	r26, r1
 418:	b1 05       	cpc	r27, r1
 41a:	70 f3       	brcs	.-36     	; 0x3f8 <delay+0x1a>
 41c:	21 e0       	ldi	r18, 0x01	; 1
 41e:	c2 1a       	sub	r12, r18
 420:	d1 08       	sbc	r13, r1
 422:	e1 08       	sbc	r14, r1
 424:	f1 08       	sbc	r15, r1
 426:	88 ee       	ldi	r24, 0xE8	; 232
 428:	88 0e       	add	r8, r24
 42a:	83 e0       	ldi	r24, 0x03	; 3
 42c:	98 1e       	adc	r9, r24
 42e:	a1 1c       	adc	r10, r1
 430:	b1 1c       	adc	r11, r1
 432:	c1 14       	cp	r12, r1
 434:	d1 04       	cpc	r13, r1
 436:	e1 04       	cpc	r14, r1
 438:	f1 04       	cpc	r15, r1
 43a:	21 f7       	brne	.-56     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 43c:	dd cf       	rjmp	.-70     	; 0x3f8 <delay+0x1a>
 43e:	ff 90       	pop	r15
 440:	ef 90       	pop	r14
 442:	df 90       	pop	r13
 444:	cf 90       	pop	r12
 446:	bf 90       	pop	r11
 448:	af 90       	pop	r10
 44a:	9f 90       	pop	r9
 44c:	8f 90       	pop	r8
 44e:	08 95       	ret

00000450 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 450:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 452:	84 b5       	in	r24, 0x24	; 36
 454:	82 60       	ori	r24, 0x02	; 2
 456:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 458:	84 b5       	in	r24, 0x24	; 36
 45a:	81 60       	ori	r24, 0x01	; 1
 45c:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 45e:	85 b5       	in	r24, 0x25	; 37
 460:	82 60       	ori	r24, 0x02	; 2
 462:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 464:	85 b5       	in	r24, 0x25	; 37
 466:	81 60       	ori	r24, 0x01	; 1
 468:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 46a:	ee e6       	ldi	r30, 0x6E	; 110
 46c:	f0 e0       	ldi	r31, 0x00	; 0
 46e:	80 81       	ld	r24, Z
 470:	81 60       	ori	r24, 0x01	; 1
 472:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 474:	e1 e8       	ldi	r30, 0x81	; 129
 476:	f0 e0       	ldi	r31, 0x00	; 0
 478:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 47a:	80 81       	ld	r24, Z
 47c:	82 60       	ori	r24, 0x02	; 2
 47e:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 480:	80 81       	ld	r24, Z
 482:	81 60       	ori	r24, 0x01	; 1
 484:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 486:	e0 e8       	ldi	r30, 0x80	; 128
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	80 81       	ld	r24, Z
 48c:	81 60       	ori	r24, 0x01	; 1
 48e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 490:	e1 eb       	ldi	r30, 0xB1	; 177
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	80 81       	ld	r24, Z
 496:	84 60       	ori	r24, 0x04	; 4
 498:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 49a:	e0 eb       	ldi	r30, 0xB0	; 176
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	80 81       	ld	r24, Z
 4a0:	81 60       	ori	r24, 0x01	; 1
 4a2:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
 4a4:	e1 e9       	ldi	r30, 0x91	; 145
 4a6:	f0 e0       	ldi	r31, 0x00	; 0
 4a8:	80 81       	ld	r24, Z
 4aa:	82 60       	ori	r24, 0x02	; 2
 4ac:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
 4ae:	80 81       	ld	r24, Z
 4b0:	81 60       	ori	r24, 0x01	; 1
 4b2:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
 4b4:	e0 e9       	ldi	r30, 0x90	; 144
 4b6:	f0 e0       	ldi	r31, 0x00	; 0
 4b8:	80 81       	ld	r24, Z
 4ba:	81 60       	ori	r24, 0x01	; 1
 4bc:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
 4be:	e1 ea       	ldi	r30, 0xA1	; 161
 4c0:	f0 e0       	ldi	r31, 0x00	; 0
 4c2:	80 81       	ld	r24, Z
 4c4:	82 60       	ori	r24, 0x02	; 2
 4c6:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
 4c8:	80 81       	ld	r24, Z
 4ca:	81 60       	ori	r24, 0x01	; 1
 4cc:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
 4ce:	e0 ea       	ldi	r30, 0xA0	; 160
 4d0:	f0 e0       	ldi	r31, 0x00	; 0
 4d2:	80 81       	ld	r24, Z
 4d4:	81 60       	ori	r24, 0x01	; 1
 4d6:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
 4d8:	e1 e2       	ldi	r30, 0x21	; 33
 4da:	f1 e0       	ldi	r31, 0x01	; 1
 4dc:	80 81       	ld	r24, Z
 4de:	82 60       	ori	r24, 0x02	; 2
 4e0:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
 4e2:	80 81       	ld	r24, Z
 4e4:	81 60       	ori	r24, 0x01	; 1
 4e6:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
 4e8:	e0 e2       	ldi	r30, 0x20	; 32
 4ea:	f1 e0       	ldi	r31, 0x01	; 1
 4ec:	80 81       	ld	r24, Z
 4ee:	81 60       	ori	r24, 0x01	; 1
 4f0:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 4f2:	ea e7       	ldi	r30, 0x7A	; 122
 4f4:	f0 e0       	ldi	r31, 0x00	; 0
 4f6:	80 81       	ld	r24, Z
 4f8:	84 60       	ori	r24, 0x04	; 4
 4fa:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 4fc:	80 81       	ld	r24, Z
 4fe:	82 60       	ori	r24, 0x02	; 2
 500:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 502:	80 81       	ld	r24, Z
 504:	81 60       	ori	r24, 0x01	; 1
 506:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 508:	80 81       	ld	r24, Z
 50a:	80 68       	ori	r24, 0x80	; 128
 50c:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 50e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
 512:	08 95       	ret

00000514 <turnOffPWM>:
		uint8_t oldSREG = SREG;
                cli();
		*reg |= bit;
		SREG = oldSREG;
	}
}
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	fc 01       	movw	r30, r24
 518:	31 97       	sbiw	r30, 0x01	; 1
 51a:	e2 31       	cpi	r30, 0x12	; 18
 51c:	f1 05       	cpc	r31, r1
 51e:	08 f0       	brcs	.+2      	; 0x522 <turnOffPWM+0xe>
 520:	4d c0       	rjmp	.+154    	; 0x5bc <turnOffPWM+0xa8>
 522:	88 27       	eor	r24, r24
 524:	ee 58       	subi	r30, 0x8E	; 142
 526:	ff 4f       	sbci	r31, 0xFF	; 255
 528:	8f 4f       	sbci	r24, 0xFF	; 255
 52a:	ae c0       	rjmp	.+348    	; 0x688 <__tablejump2__>
 52c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 530:	8f 77       	andi	r24, 0x7F	; 127
 532:	03 c0       	rjmp	.+6      	; 0x53a <turnOffPWM+0x26>
 534:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 538:	8f 7d       	andi	r24, 0xDF	; 223
 53a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 53e:	08 95       	ret
 540:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 544:	87 7f       	andi	r24, 0xF7	; 247
 546:	f9 cf       	rjmp	.-14     	; 0x53a <turnOffPWM+0x26>
 548:	84 b5       	in	r24, 0x24	; 36
 54a:	8f 77       	andi	r24, 0x7F	; 127
 54c:	02 c0       	rjmp	.+4      	; 0x552 <turnOffPWM+0x3e>
 54e:	84 b5       	in	r24, 0x24	; 36
 550:	8f 7d       	andi	r24, 0xDF	; 223
 552:	84 bd       	out	0x24, r24	; 36
 554:	08 95       	ret
 556:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
 55a:	8f 77       	andi	r24, 0x7F	; 127
 55c:	03 c0       	rjmp	.+6      	; 0x564 <turnOffPWM+0x50>
 55e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
 562:	8f 7d       	andi	r24, 0xDF	; 223
 564:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
 568:	08 95       	ret
 56a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
 56e:	8f 77       	andi	r24, 0x7F	; 127
 570:	07 c0       	rjmp	.+14     	; 0x580 <turnOffPWM+0x6c>
 572:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
 576:	8f 7d       	andi	r24, 0xDF	; 223
 578:	03 c0       	rjmp	.+6      	; 0x580 <turnOffPWM+0x6c>
 57a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
 57e:	87 7f       	andi	r24, 0xF7	; 247
 580:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
 584:	08 95       	ret
 586:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 58a:	8f 77       	andi	r24, 0x7F	; 127
 58c:	07 c0       	rjmp	.+14     	; 0x59c <turnOffPWM+0x88>
 58e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 592:	8f 7d       	andi	r24, 0xDF	; 223
 594:	03 c0       	rjmp	.+6      	; 0x59c <turnOffPWM+0x88>
 596:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 59a:	87 7f       	andi	r24, 0xF7	; 247
 59c:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 5a0:	08 95       	ret
 5a2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
 5a6:	8f 77       	andi	r24, 0x7F	; 127
 5a8:	07 c0       	rjmp	.+14     	; 0x5b8 <turnOffPWM+0xa4>
 5aa:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
 5ae:	8f 7d       	andi	r24, 0xDF	; 223
 5b0:	03 c0       	rjmp	.+6      	; 0x5b8 <turnOffPWM+0xa4>
 5b2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
 5b6:	87 7f       	andi	r24, 0xF7	; 247
 5b8:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
 5bc:	08 95       	ret

000005be <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 5be:	1f 93       	push	r17
 5c0:	cf 93       	push	r28
 5c2:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 5c4:	28 2f       	mov	r18, r24
 5c6:	30 e0       	ldi	r19, 0x00	; 0
 5c8:	f9 01       	movw	r30, r18
 5ca:	e8 5f       	subi	r30, 0xF8	; 248
 5cc:	fe 4f       	sbci	r31, 0xFE	; 254
 5ce:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 5d0:	f9 01       	movw	r30, r18
 5d2:	e2 5b       	subi	r30, 0xB2	; 178
 5d4:	fe 4f       	sbci	r31, 0xFE	; 254
 5d6:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 5d8:	f9 01       	movw	r30, r18
 5da:	ec 56       	subi	r30, 0x6C	; 108
 5dc:	fe 4f       	sbci	r31, 0xFE	; 254
 5de:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 5e0:	cc 23       	and	r28, r28
 5e2:	b9 f0       	breq	.+46     	; 0x612 <digitalWrite+0x54>
 5e4:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 5e6:	81 11       	cpse	r24, r1

	out = portOutputRegister(port);
 5e8:	95 df       	rcall	.-214    	; 0x514 <turnOffPWM>
 5ea:	ec 2f       	mov	r30, r28
 5ec:	f0 e0       	ldi	r31, 0x00	; 0
 5ee:	ee 0f       	add	r30, r30
 5f0:	ff 1f       	adc	r31, r31
 5f2:	e6 52       	subi	r30, 0x26	; 38
 5f4:	fe 4f       	sbci	r31, 0xFE	; 254
 5f6:	a5 91       	lpm	r26, Z+

	uint8_t oldSREG = SREG;
 5f8:	b4 91       	lpm	r27, Z
	cli();
 5fa:	9f b7       	in	r25, 0x3f	; 63

	if (val == LOW) {
 5fc:	f8 94       	cli
 5fe:	11 11       	cpse	r17, r1
		*out &= ~bit;
 600:	04 c0       	rjmp	.+8      	; 0x60a <digitalWrite+0x4c>
 602:	8c 91       	ld	r24, X
 604:	d0 95       	com	r29
 606:	d8 23       	and	r29, r24
	} else {
		*out |= bit;
 608:	02 c0       	rjmp	.+4      	; 0x60e <digitalWrite+0x50>
 60a:	ec 91       	ld	r30, X
 60c:	de 2b       	or	r29, r30
	}

	SREG = oldSREG;
 60e:	dc 93       	st	X, r29
}
 610:	9f bf       	out	0x3f, r25	; 63
 612:	df 91       	pop	r29
 614:	cf 91       	pop	r28
 616:	1f 91       	pop	r17
 618:	08 95       	ret

0000061a <shiftOut>:
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
 61a:	bf 92       	push	r11
 61c:	cf 92       	push	r12
 61e:	df 92       	push	r13
 620:	ef 92       	push	r14
 622:	ff 92       	push	r15
 624:	0f 93       	push	r16
 626:	1f 93       	push	r17
 628:	cf 93       	push	r28
 62a:	df 93       	push	r29
 62c:	c8 2e       	mov	r12, r24
 62e:	d6 2e       	mov	r13, r22
 630:	b4 2e       	mov	r11, r20
 632:	c7 e0       	ldi	r28, 0x07	; 7
 634:	d0 e0       	ldi	r29, 0x00	; 0
 636:	02 2f       	mov	r16, r18
 638:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
			digitalWrite(dataPin, !!(val & (1 << i)));
 63a:	87 e0       	ldi	r24, 0x07	; 7
 63c:	e8 2e       	mov	r14, r24
 63e:	f1 2c       	mov	r15, r1
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
 640:	b1 10       	cpse	r11, r1
 642:	05 c0       	rjmp	.+10     	; 0x64e <shiftOut+0x34>
			digitalWrite(dataPin, !!(val & (1 << i)));
 644:	c7 01       	movw	r24, r14
 646:	8c 1b       	sub	r24, r28
 648:	9d 0b       	sbc	r25, r29
 64a:	b8 01       	movw	r22, r16
 64c:	02 c0       	rjmp	.+4      	; 0x652 <shiftOut+0x38>
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
 64e:	b8 01       	movw	r22, r16
 650:	8c 2f       	mov	r24, r28
 652:	02 c0       	rjmp	.+4      	; 0x658 <shiftOut+0x3e>
 654:	75 95       	asr	r23
 656:	67 95       	ror	r22
 658:	8a 95       	dec	r24
 65a:	e2 f7       	brpl	.-8      	; 0x654 <shiftOut+0x3a>
 65c:	61 70       	andi	r22, 0x01	; 1
 65e:	8c 2d       	mov	r24, r12
 660:	ae df       	rcall	.-164    	; 0x5be <digitalWrite>
			
		digitalWrite(clockPin, HIGH);
 662:	61 e0       	ldi	r22, 0x01	; 1
 664:	8d 2d       	mov	r24, r13
		digitalWrite(clockPin, LOW);		
 666:	ab df       	rcall	.-170    	; 0x5be <digitalWrite>
 668:	60 e0       	ldi	r22, 0x00	; 0
 66a:	8d 2d       	mov	r24, r13
 66c:	a8 df       	rcall	.-176    	; 0x5be <digitalWrite>
 66e:	21 97       	sbiw	r28, 0x01	; 1
	}
}
 670:	38 f7       	brcc	.-50     	; 0x640 <shiftOut+0x26>
 672:	df 91       	pop	r29
 674:	cf 91       	pop	r28
 676:	1f 91       	pop	r17
 678:	0f 91       	pop	r16
 67a:	ff 90       	pop	r15
 67c:	ef 90       	pop	r14
 67e:	df 90       	pop	r13
 680:	cf 90       	pop	r12
 682:	bf 90       	pop	r11
 684:	08 95       	ret

00000686 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 686:	08 95       	ret

00000688 <__tablejump2__>:
 688:	ee 0f       	add	r30, r30
 68a:	ff 1f       	adc	r31, r31
 68c:	88 1f       	adc	r24, r24
 68e:	8b bf       	out	0x3b, r24	; 59
 690:	07 90       	elpm	r0, Z+
 692:	f6 91       	elpm	r31, Z
 694:	e0 2d       	mov	r30, r0
 696:	19 94       	eijmp

00000698 <_exit>:
 698:	f8 94       	cli

0000069a <__stop_program>:
 69a:	ff cf       	rjmp	.-2      	; 0x69a <__stop_program>
